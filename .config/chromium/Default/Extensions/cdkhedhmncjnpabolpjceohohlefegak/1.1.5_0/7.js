(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{387:function(t,e,i){"use strict";var s=i(32),n=i(47),o=i(410),a=i(411),r=i(12),h=1..toFixed,l=Math.floor,c=function(t,e,i){return 0===e?i:e%2==1?c(t,e-1,i*t):c(t*t,e/2,i)};s({target:"Number",proto:!0,forced:h&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r((function(){h.call({})}))},{toFixed:function(t){var e,i,s,r,h=o(this),d=n(t),u=[0,0,0,0,0,0],f="",g="0",p=function(t,e){for(var i=-1,s=e;++i<6;)s+=t*u[i],u[i]=s%1e7,s=l(s/1e7)},m=function(t){for(var e=6,i=0;--e>=0;)i+=u[e],u[e]=l(i/t),i=i%t*1e7},b=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==u[t]){var i=String(u[t]);e=""===e?i:e+a.call("0",7-i.length)+i}return e};if(d<0||d>20)throw RangeError("Incorrect fraction digits");if(h!=h)return"NaN";if(h<=-1e21||h>=1e21)return String(h);if(h<0&&(f="-",h=-h),h>1e-21)if(i=(e=function(t){for(var e=0,i=t;i>=4096;)e+=12,i/=4096;for(;i>=2;)e+=1,i/=2;return e}(h*c(2,69,1))-69)<0?h*c(2,-e,1):h/c(2,e,1),i*=4503599627370496,(e=52-e)>0){for(p(0,i),s=d;s>=7;)p(1e7,0),s-=7;for(p(c(10,s,1),0),s=e-1;s>=23;)m(1<<23),s-=23;m(1<<s),p(1,1),m(2),g=b()}else p(0,i),p(1<<-e,0),g=b()+a.call("0",d);return g=d>0?f+((r=g.length)<=d?"0."+a.call("0",d-r)+g:g.slice(0,r-d)+"."+g.slice(r-d)):f+g}})},388:function(t,e,i){"use strict";i.d(e,"a",(function(){return Mn})),i.d(e,"b",(function(){return zi})),i.d(e,"c",(function(){return Vi})),i.d(e,"d",(function(){return pn})),i.d(e,"e",(function(){return Bi})),i.d(e,"f",(function(){return Ni})),i.d(e,"g",(function(){return Wi})),i.d(e,"h",(function(){return ji})),i.d(e,"i",(function(){return Hi})),i.d(e,"j",(function(){return $i}));const s="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function n(t,e,i){const n=i||(t=>Array.prototype.slice.call(t));let o=!1,a=[];return function(...i){a=n(i),o||(o=!0,s.call(window,()=>{o=!1,t.apply(e,a)}))}}const o=t=>"start"===t?"left":"end"===t?"right":"center",a=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;const r=function(){let t=0;return function(){return t++}}();function h(t){return null==t}function l(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function c(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const d=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function u(t,e){return d(t)?t:e}function f(t,e){return void 0===t?e:t}const g=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function p(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function m(t,e,i,s){let n,o,a;if(l(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(c(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function b(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function x(t){if(l(t))return t.map(x);if(c(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=x(t[i[n]]);return e}return t}function _(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function y(t,e,i,s){if(!_(t))return;const n=e[t],o=i[t];c(n)&&c(o)?v(n,o,s):e[t]=x(o)}function v(t,e,i){const s=l(e)?e:[e],n=s.length;if(!c(t))return t;const o=(i=i||{}).merger||y;for(let a=0;a<n;++a){if(!c(e=s[a]))continue;const n=Object.keys(e);for(let s=0,a=n.length;s<a;++s)o(n[s],t,e,i)}return t}function M(t,e){return v(t,e,{merger:w})}function w(t,e,i){if(!_(t))return;const s=e[t],n=i[t];c(s)&&c(n)?M(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=x(n))}function k(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function S(t,e){if(""===e)return t;let i=0,s=k(e,i);for(;t&&s>i;)t=t[e.substr(i,s-i)],i=s+1,s=k(e,i);return t}function P(t){return t.charAt(0).toUpperCase()+t.slice(1)}const O=t=>void 0!==t,D=t=>"function"==typeof t,C=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};const A=Math.PI,L=2*A,R=L+A,T=Number.POSITIVE_INFINITY,E=A/180,I=A/2,F=A/4,z=2*A/3,V=Math.log10,B=Math.sign;function N(t){const e=Math.round(t);t=W(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(V(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function j(t){return!isNaN(parseFloat(t))&&isFinite(t)}function W(t,e,i){return Math.abs(t-e)<i}function H(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function $(t){return t*(A/180)}function Y(t){return t*(180/A)}function U(t){if(!d(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function X(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*A&&(o+=L),{angle:o,distance:n}}function q(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function K(t,e){return(t-e+R)%L-A}function G(t){return(t%L+L)%L}function Z(t,e,i,s){const n=G(t),o=G(e),a=G(i),r=G(o-n),h=G(a-n),l=G(n-o),c=G(n-a);return n===o||n===a||s&&o===a||r>h&&l<c}function J(t,e,i){return Math.max(e,Math.min(i,t))}function Q(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}const tt=t=>0===t||1===t,et=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*L/i),it=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*L/i)+1,st={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*I),easeOutSine:t=>Math.sin(t*I),easeInOutSine:t=>-.5*(Math.cos(A*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>tt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>tt(t)?t:et(t,.075,.3),easeOutElastic:t=>tt(t)?t:it(t,.075,.3),easeInOutElastic(t){const e=.1125;return tt(t)?t:t<.5?.5*et(2*t,e,.45):.5+.5*it(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-st.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*st.easeInBounce(2*t):.5*st.easeOutBounce(2*t-1)+.5},nt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},ot="0123456789ABCDEF",at=t=>ot[15&t],rt=t=>ot[(240&t)>>4]+ot[15&t],ht=t=>(240&t)>>4==(15&t);function lt(t){var e=function(t){return ht(t.r)&&ht(t.g)&&ht(t.b)&&ht(t.a)}(t)?at:rt;return t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t}function ct(t){return t+.5|0}const dt=(t,e,i)=>Math.max(Math.min(t,i),e);function ut(t){return dt(ct(2.55*t),0,255)}function ft(t){return dt(ct(255*t),0,255)}function gt(t){return dt(ct(t/2.55)/100,0,1)}function pt(t){return dt(ct(100*t),0,100)}const mt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const bt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function xt(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function _t(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function yt(t,e,i){const s=xt(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function vt(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,h,l;return n!==o&&(l=n-o,h=a>.5?l/(2-n-o):l/(n+o),r=n===e?(i-s)/l+(i<s?6:0):n===i?(s-e)/l+2:(e-i)/l+4,r=60*r+.5),[0|r,h||0,a]}function Mt(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(ft)}function wt(t,e,i){return Mt(xt,t,e,i)}function kt(t){return(t%360+360)%360}function St(t){const e=bt.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?ut(+e[5]):ft(+e[5]));const n=kt(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return Mt(yt,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return Mt(_t,t,e,i)}(n,o,a):wt(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}const Pt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Ot={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Dt;function Ct(t){Dt||(Dt=function(){const t={},e=Object.keys(Ot),i=Object.keys(Pt);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,Pt[o]);o=parseInt(Ot[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),Dt.transparent=[0,0,0,0]);const e=Dt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}function At(t,e,i){if(t){let s=vt(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=wt(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function Lt(t,e){return t?Object.assign(e||{},t):t}function Rt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=ft(t[3]))):(e=Lt(t,{r:0,g:0,b:0,a:1})).a=ft(e.a),e}function Tt(t){return"r"===t.charAt(0)?function(t){const e=mt.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=255&(e[8]?ut(t):255*t)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?ut(i):i),s=255&(e[4]?ut(s):s),n=255&(e[6]?ut(n):n),{r:i,g:s,b:n,a:o}}}(t):St(t)}class Et{constructor(t){if(t instanceof Et)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=Rt(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*nt[s[1]],g:255&17*nt[s[2]],b:255&17*nt[s[3]],a:5===o?17*nt[s[4]]:255}:7!==o&&9!==o||(n={r:nt[s[1]]<<4|nt[s[2]],g:nt[s[3]]<<4|nt[s[4]],b:nt[s[5]]<<4|nt[s[6]],a:9===o?nt[s[7]]<<4|nt[s[8]]:255})),i=n||Ct(t)||Tt(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=Lt(this._rgb);return t&&(t.a=gt(t.a)),t}set rgb(t){this._rgb=Rt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${gt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?lt(this._rgb):this._rgb}hslString(){return this._valid?function(t){if(!t)return;const e=vt(t),i=e[0],s=pt(e[1]),n=pt(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${gt(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const s=i.rgb,n=t.rgb;let o;const a=e===o?.5:e,r=2*a-1,h=s.a-n.a,l=((r*h==-1?r:(r+h)/(1+r*h))+1)/2;o=1-l,s.r=255&l*s.r+o*n.r+.5,s.g=255&l*s.g+o*n.g+.5,s.b=255&l*s.b+o*n.b+.5,s.a=a*s.a+(1-a)*n.a,i.rgb=s}return i}clone(){return new Et(this.rgb)}alpha(t){return this._rgb.a=ft(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=ct(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return At(this._rgb,2,t),this}darken(t){return At(this._rgb,2,-t),this}saturate(t){return At(this._rgb,1,t),this}desaturate(t){return At(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=vt(t);i[0]=kt(i[0]+e),i=wt(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function It(t){return new Et(t)}const Ft=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function zt(t){return Ft(t)?t:It(t)}function Vt(t){return Ft(t)?t:It(t).saturate(.5).darken(.1).hexString()}const Bt=Object.create(null),Nt=Object.create(null);function jt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function Wt(t,e,i){return"string"==typeof e?v(jt(t,e),i):v(jt(t,""),e)}var Ht=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Vt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Vt(e.borderColor),this.hoverColor=(t,e)=>Vt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Wt(this,t,e)}get(t){return jt(this,t)}describe(t,e){return Wt(Nt,t,e)}override(t,e){return Wt(Bt,t,e)}route(t,e,i,s){const n=jt(this,t),o=jt(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return c(t)?Object.assign({},e,t):f(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function $t(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function Yt(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let h,c,d,u,f;for(h=0;h<r;h++)if(u=i[h],null!=u&&!0!==l(u))a=$t(t,n,o,a,u);else if(l(u))for(c=0,d=u.length;c<d;c++)f=u[c],null==f||l(f)||(a=$t(t,n,o,a,f));t.restore();const g=o.length/2;if(g>i.length){for(h=0;h<g;h++)delete n[o[h]];o.splice(0,g)}return a}function Ut(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function Xt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function qt(t,e,i,s){let n,o,a,r,h;const l=e.pointStyle,c=e.rotation,d=e.radius;let u=(c||0)*E;if(l&&"object"==typeof l&&(n=l.toString(),"[object HTMLImageElement]"===n||"[object HTMLCanvasElement]"===n))return t.save(),t.translate(i,s),t.rotate(u),t.drawImage(l,-l.width/2,-l.height/2,l.width,l.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),l){default:t.arc(i,s,d,0,L),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=z,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=z,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),t.closePath();break;case"rectRounded":h=.516*d,r=d-h,o=Math.cos(u+F)*r,a=Math.sin(u+F)*r,t.arc(i-o,s-a,h,u-A,u-I),t.arc(i+a,s-o,h,u-I,u),t.arc(i+o,s+a,h,u,u+I),t.arc(i-a,s+o,h,u+I,u+A),t.closePath();break;case"rect":if(!c){r=Math.SQRT1_2*d,t.rect(i-r,s-r,2*r,2*r);break}u+=F;case"rectRot":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+a,s-o),t.lineTo(i+o,s+a),t.lineTo(i-a,s+o),t.closePath();break;case"crossRot":u+=F;case"cross":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o);break;case"star":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o),u+=F,o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o);break;case"line":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(u)*d,s+Math.sin(u)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function Kt(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Gt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Zt(t){t.restore()}function Jt(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Qt(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function te(t,e,i,s,n,o={}){const a=l(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let c,d;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]);h(e.rotation)||t.rotate(e.rotation);e.color&&(t.fillStyle=e.color);e.textAlign&&(t.textAlign=e.textAlign);e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),c=0;c<a.length;++c)d=a[c],r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),h(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(d,i,s,o.maxWidth)),t.fillText(d,i,s,o.maxWidth),ee(t,i,s,d,o),s+=n.lineHeight;t.restore()}function ee(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,h=i-o.actualBoundingBoxAscent,l=i+o.actualBoundingBoxDescent,c=n.strikethrough?(h+l)/2:l;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function ie(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-I,A,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,A,I,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,I,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-I,!0),t.lineTo(i+a.topLeft,s)}const se=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),ne=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function oe(t,e){const i=(""+t).match(se);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function ae(t,e){const i={},s=c(e),n=s?Object.keys(e):e,o=c(t)?s?i=>f(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=+o(t)||0;return i}function re(t){return ae(t,{top:"y",right:"x",bottom:"y",left:"x"})}function he(t){return ae(t,["topLeft","topRight","bottomLeft","bottomRight"])}function le(t){const e=re(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ce(t,e){t=t||{},e=e||Ht.font;let i=f(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=f(t.style,e.style);s&&!(""+s).match(ne)&&(console.warn('Invalid font style specified: "'+s+'"'),s="");const n={family:f(t.family,e.family),lineHeight:oe(f(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:f(t.weight,e.weight),string:""};return n.string=function(t){return!t||h(t.size)||h(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function de(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&l(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function ue(t,e){return Object.assign(Object.create(t),e)}function fe(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const ge=(t,e,i)=>fe(t,i,s=>t[s][e]<i),pe=(t,e,i)=>fe(t,i,s=>t[s][e]>=i);const me=["push","pop","shift","splice","unshift"];function be(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(me.forEach(e=>{delete t[e]}),delete t._chartjs)}function xe(t){const e=new Set;let i,s;for(i=0,s=t.length;i<s;++i)e.add(t[i]);return e.size===s?t:Array.from(e)}function _e(t,e=[""],i=t,s,n=(()=>t[0])){O(s)||(s=Ae("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:s,_getTarget:n,override:n=>_e([n,...t],e,i,s)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>ke(i,s,()=>function(t,e,i,s){let n;for(const o of e)if(n=Ae(Me(o,t),i),O(n))return we(t,n)?De(i,s,t,n):n}(s,e,t,i)),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Le(t).includes(e),ownKeys:t=>Le(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function ye(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:ve(t,s),setContext:e=>ye(t,e,i,s),override:n=>ye(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>ke(t,e,()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];D(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t),e=e(o,a||s),r.delete(t),we(t,e)&&(e=De(n._scopes,n,t,e));return e}(e,r,t,i));l(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(O(o.index)&&s(t))e=e[o.index%e.length];else if(c(e[0])){const i=e,s=n._scopes.filter(t=>t!==i);e=[];for(const h of i){const i=De(s,n,t,h);e.push(ye(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable));we(e,r)&&(r=ye(r,n,o&&o[e],a));return r}(t,e,i)),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function ve(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:D(i)?i:()=>i,isIndexable:D(s)?s:()=>s}}const Me=(t,e)=>t?t+P(e):e,we=(t,e)=>c(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function ke(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function Se(t,e,i){return D(t)?t(e,i):t}const Pe=(t,e)=>!0===t?e:"string"==typeof t?S(e,t):void 0;function Oe(t,e,i,s,n){for(const o of e){const e=Pe(i,o);if(e){t.add(e);const o=Se(e._fallback,i,n);if(O(o)&&o!==i&&o!==s)return o}else if(!1===e&&O(s)&&i!==s)return null}return!1}function De(t,e,i,s){const n=e._rootScopes,o=Se(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let h=Ce(r,a,i,o||i,s);return null!==h&&((!O(o)||o===i||(h=Ce(r,a,o,h,s),null!==h))&&_e(Array.from(r),[""],n,o,()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];if(l(n)&&c(i))return i;return n}(e,i,s)))}function Ce(t,e,i,s,n){for(;i;)i=Oe(t,e,i,s,n);return i}function Ae(t,e){for(const i of e){if(!i)continue;const e=i[t];if(O(e))return e}}function Le(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter(t=>!t.startsWith("_")))e.add(t);return Array.from(e)}(t._scopes)),e}const Re=Number.EPSILON||1e-14,Te=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ee=t=>"x"===t?"y":"x";function Ie(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=q(o,n),h=q(a,o);let l=r/(r+h),c=h/(r+h);l=isNaN(l)?0:l,c=isNaN(c)?0:c;const d=s*l,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function Fe(t,e="x"){const i=Ee(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,h,l=Te(t,0);for(a=0;a<s;++a)if(r=h,h=l,l=Te(t,a+1),h){if(l){const t=l[e]-h[e];n[a]=0!==t?(l[i]-h[i])/t:0}o[a]=r?l?B(n[a-1])!==B(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,h,l=Te(t,0);for(let c=0;c<s-1;++c)h=l,l=Te(t,c+1),h&&l&&(W(e[c],0,Re)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=Ee(i),n=t.length;let o,a,r,h=Te(t,0);for(let l=0;l<n;++l){if(a=r,r=h,h=Te(t,l+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r["cp1"+i]=n-o,r["cp1"+s]=c-o*e[l]),h&&(o=(h[i]-n)/3,r["cp2"+i]=n+o,r["cp2"+s]=c+o*e[l])}}(t,o,e)}function ze(t,e,i){return Math.max(Math.min(t,i),e)}function Ve(t,e,i,s,n){let o,a,r,h;if(e.spanGaps&&(t=t.filter(t=>!t.skip)),"monotone"===e.cubicInterpolationMode)Fe(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],h=Ie(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=h.previous.x,r.cp1y=h.previous.y,r.cp2x=h.next.x,r.cp2y=h.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=Kt(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&Kt(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=ze(n.cp1x,e.left,e.right),n.cp1y=ze(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=ze(n.cp2x,e.left,e.right),n.cp2y=ze(n.cp2y,e.top,e.bottom)))}(t,i)}function Be(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ne(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function je(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const We=t=>window.getComputedStyle(t,null);const He=["top","right","bottom","left"];function $e(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=He[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}function Ye(t,e){const{canvas:i,currentDevicePixelRatio:s}=e,n=We(i),o="border-box"===n.boxSizing,a=$e(n,"padding"),r=$e(n,"border","width"),{x:h,y:l,box:c}=function(t,e){const i=t.native||t,s=i.touches,n=s&&s.length?s[0]:i,{offsetX:o,offsetY:a}=n;let r,h,l=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(o,a,i.target))r=o,h=a;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,h=n.clientY-t.top,l=!0}return{x:r,y:h,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((h-d)/f*i.width/s),y:Math.round((l-u)/g*i.height/s)}}const Ue=t=>Math.round(10*t)/10;function Xe(t,e,i,s){const n=We(t),o=$e(n,"margin"),a=je(n.maxWidth,t,"clientWidth")||T,r=je(n.maxHeight,t,"clientHeight")||T,h=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=Ne(t);if(o){const t=o.getBoundingClientRect(),a=We(o),r=$e(a,"border","width"),h=$e(a,"padding");e=t.width-h.width-r.width,i=t.height-h.height-r.height,s=je(a.maxWidth,o,"clientWidth"),n=je(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||T,maxHeight:n||T}}(t,e,i);let{width:l,height:c}=h;if("content-box"===n.boxSizing){const t=$e(n,"border","width"),e=$e(n,"padding");l-=e.width+t.width,c-=e.height+t.height}return l=Math.max(0,l-o.width),c=Math.max(0,s?Math.floor(l/s):c-o.height),l=Ue(Math.min(l,a,h.maxWidth)),c=Ue(Math.min(c,r,h.maxHeight)),l&&!c&&(c=Ue(l/2)),{width:l,height:c}}function qe(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=n/s,t.width=o/s;const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=t.height+"px",a.style.width=t.width+"px"),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const Ke=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ge(t,e){const i=function(t,e){return We(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function Ze(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Je(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function Qe(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=Ze(t,n,i),r=Ze(n,o,i),h=Ze(o,e,i),l=Ze(a,r,i),c=Ze(r,h,i);return Ze(l,c,i)}const ti=new Map;function ei(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=ti.get(i);return s||(s=new Intl.NumberFormat(t,e),ti.set(i,s)),s}(e,i).format(t)}function ii(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function si(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function ni(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function oi(t){return"angle"===t?{between:Z,compare:K,normalize:G}:{between:Q,compare:(t,e)=>t-e,normalize:t=>t}}function ai({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function ri(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:h,normalize:l}=oi(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=oi(s),h=e.length;let l,c,{start:d,end:u,loop:f}=t;if(f){for(d+=h,u+=h,l=0,c=h;l<c&&a(r(e[d%h][s]),n,o);++l)d--,u--;d%=h,u%=h}return u<d&&(u+=h),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,b,x=!1,_=null;const y=()=>x||h(n,b,p)&&0!==r(n,b),v=()=>!x||0===r(o,p)||h(o,b,p);for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=l(m[s]),p!==b&&(x=h(p,n,o),null===_&&y()&&(_=0===r(p,n)?t:i),null!==_&&v()&&(g.push(ai({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,b=p));return null!==_&&g.push(ai({start:_,end:d,loop:u,count:a,style:f})),g}function hi(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=ri(s[n],t.points,e);o.length&&i.push(...o)}return i}function li(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=ci(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,h=i.length,l=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=h;i[t%h].skip;)t-=o;for(;i[e%h].skip;)e+=o;t%h!=e%h&&(l.push({start:t%h,end:e%h,loop:s,style:n}),c=n,d=e%h)}}for(const t of e){d=r?d:t.start;let e,o=i[d%h];for(u=d+1;u<=t.end;u++){const r=i[u%h];e=ci(s.setContext(ue(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%h,p1DataIndex:u%h,datasetIndex:a}))),di(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return l}(t,e,i,s):e}function ci(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function di(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}
/*!
 * Chart.js v3.7.0
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */var ui=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach(s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)}))}_refresh(){this._request||(this._running=!0,this._request=s.call(window,()=>{this._update(),this._request=null,this._running&&this._refresh()}))}_update(t=Date.now()){let e=0;this._charts.forEach((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length}),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce((t,e)=>Math.max(t,e._duration),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const fi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=zt(t||"transparent"),n=s.valid&&zt(e||"transparent");return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class gi{constructor(t,e,i,s){const n=e[i];s=de([t.to,s,n,t.from]);const o=de([t.from,n,s]);this._active=!0,this._fn=t.fn||fi[t.type||typeof o],this._easing=st[t.easing]||st.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=de([t.to,e,s,t.from]),this._from=de([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise((e,i)=>{t.push({res:e,rej:i})})}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Ht.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const pi=Object.keys(Ht.animation);Ht.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Ht.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Ht.describe("animations",{_fallback:"animation"}),Ht.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class mi{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!c(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach(i=>{const s=t[i];if(!c(s))return;const n={};for(const t of pi)n[t]=s[t];(l(s.properties)&&s.properties||[i]).forEach(t=>{t!==i&&e.has(t)||e.set(t,n)})})}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then(()=>{t.options=i},()=>{}),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const h=o[r];if("$"===h.charAt(0))continue;if("options"===h){s.push(...this._animateOptions(t,e));continue}const l=e[h];let c=n[h];const d=i.get(h);if(c){if(d&&c.active()){c.update(d,l,a);continue}c.cancel()}d&&d.duration?(n[h]=c=new gi(d,t,h,l),s.push(c)):t[h]=l}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(ui.add(this._chart,i),!0):void 0}}function bi(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function xi(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function _i(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,h,l;if(null!==e){for(a=0,r=n.length;a<r;++a){if(h=+n[a],h===i){if(s.all)continue;break}l=t.values[h],d(l)&&(o||0===e||B(e)===B(l))&&(e+=l)}return e}}function yi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function vi(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function Mi(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function wi(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,h=o.axis,l=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[h]:o,[l]:d}=i;u=(i._stacks||(i._stacks={}))[l]=vi(n,c,o),u[r]=d,u._top=Mi(u,a,!0,s.type),u._bottom=Mi(u,a,!1,s.type)}}function ki(t,e){const i=t.scales;return Object.keys(i).filter(t=>i[t].axis===e).shift()}function Si(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i]}}}const Pi=t=>"reset"===t||"none"===t,Oi=(t,e)=>e?t:Object.assign({},t);class Di{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=yi(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Si(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=f(i.xAxisID,ki(t,"x")),o=e.yAxisID=f(i.yAxisID,ki(t,"y")),a=e.rAxisID=f(i.rAxisID,ki(t,"r")),r=e.indexAxis,h=e.iAxisID=s(r,n,o,a),l=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(h),e.vScale=this.getScaleForId(l)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&be(this._data,this),t._stacked&&Si(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(c(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){be(i,this);const t=this._cachedMeta;Si(t),t._parsed=[]}e&&Object.isExtensible(e)&&(n=this,(s=e)._chartjs?s._chartjs.listeners.push(n):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[n]}}),me.forEach(t=>{const e="_onData"+P(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach(i=>{"function"==typeof i[e]&&i[e](...t)}),n}})}))),this._syncList=[],this._data=e}var s,n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=yi(e.vScale,e),e.stack!==i.stack&&(s=!0,Si(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&wi(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,h,d,u=0===t&&e===s.length||i._sorted,f=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,d=s;else{d=l(s[t])?this.parseArrayData(i,s,t,e):c(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===h[a]||f&&h[a]<f[a];for(r=0;r<e;++r)i._parsed[r+t]=h=d[r],u&&(n()&&(u=!1),f=h);i._sorted=u}o&&wi(this,d)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,h=n.getLabels(),l=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:l||n.parse(h[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,h,l,c;for(r=0,h=s;r<h;++r)l=r+i,c=e[l],a[r]={x:n.parse(c[0],l),y:o.parse(c[1],l)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h=new Array(s);let l,c,d,u;for(l=0,c=s;l<c;++l)d=l+i,u=e[d],h[l]={x:n.parse(S(u,a),d),y:o.parse(S(u,r),d)};return h}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return _i({keys:xi(s,!0),values:e._stacks[t.axis]},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=_i(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:xi(i,!0),values:null})(e,i,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:l,max:c}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let u,f;function g(){f=s[u];const e=f[a.axis];return!d(f[t.axis])||l>e||c<e}for(u=0;u<o&&(g()||(this.updateRangeFromParsed(h,t,f,r),!n));++u);if(n)for(u=o-1;u>=0;--u)if(!g()){this.updateRangeFromParsed(h,t,f,r);break}return h}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],d(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return c(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(f(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=bi(t,i),n=bi(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,h=this.options.drawActiveElementsOnTop;let l;for(i.dataset&&i.dataset.draw(t,n,a,r),l=a;l<a+r;++l){const e=s[l];e.hidden||(e.active&&h?o.push(e):e.draw(t,n))}for(l=0;l<o.length;++l)o[l].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return ue(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return ue(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&O(i);if(a)return Oi(a,r);const h=this.chart.config,l=h.datasetElementScopeKeys(this._type,t),c=s?[t+"Hover","hover",t,""]:[t,""],d=h.getOptionScopes(this.getDataset(),l),u=Object.keys(Ht.elements[t]),f=h.resolveNamedOptions(d,u,()=>this.getContext(i,s),c);return f.$shared&&(f.$shared=r,n[o]=Object.freeze(Oi(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o="animation-"+e,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const h=new mi(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(h)),h}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Pi(t)||this.chart._animationsDisabled}updateElement(t,e,i,s){Pi(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Pi(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Si(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Ci(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=xe(s.sort((t,e)=>t-e))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const h=()=>{32767!==o&&-32768!==o&&(O(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),h();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),h();return r}function Ai(t,e,i,s){return l(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let h=a,l=r;Math.abs(a)>Math.abs(r)&&(h=r,l=a),e[i.axis]=l,e._custom={barStart:h,barEnd:l,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Li(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,h=[];let l,c,d,u;for(l=i,c=i+s;l<c;++l)u=e[l],d={},d[n.axis]=r||n.parse(a[l],l),h.push(Ai(u,d,o,l));return h}function Ri(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Ti(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);const{start:a,end:r,reverse:h,top:l,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=l:(i._bottom||0)===s?n=c:(o[Ei(c,a,r,h)]=!0,n=l)),o[Ei(n,a,r,h)]=!0,t.borderSkipped=o}function Ei(t,e,i,s){var n,o,a;return s?(a=i,t=Ii(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=Ii(t,e,i),t}function Ii(t,e,i){return"start"===t?e:"end"===t?i:t}function Fi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}Di.defaults={},Di.prototype.datasetElementType=null,Di.prototype.dataElementType=null;class zi extends Di{parsePrimitiveData(t,e,i,s){return Li(t,e,i,s)}parseArrayData(t,e,i,s){return Li(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h="x"===n.axis?a:r,l="x"===o.axis?a:r,c=[];let d,u,f,g;for(d=i,u=i+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(S(g,h),d),c.push(Ai(S(g,l),f,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Ri(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),l=a.isHorizontal(),c=this._getRuler(),d=this.resolveDataElementOptions(e,s),u=this.getSharedOptions(d),f=this.includeOptions(s,u);this.updateSharedOptions(u,s,d);for(let d=e;d<e+i;d++){const e=this.getParsed(d),i=n||h(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(d),g=this._calculateBarIndexPixels(d,c),p=(e._stacks||{})[a.axis],m={horizontal:l,base:i.base,enableBorderRadius:!p||Ri(e._custom)||o===p._top||o===p._bottom,x:l?i.head:g.center,y:l?g.center:i.head,height:l?g.size:Math.abs(i.size),width:l?Math.abs(i.size):g.size};f&&(m.options=u||this.resolveDataElementOptions(d,t[d].active?"active":s));const b=m.options||t[d].options;Ti(m,b,p,o),Fi(m,b,c.ratio),this.updateElement(t[d],d,m,s)}}_getStacks(t,e){const i=this._cachedMeta.iScale,s=i.getMatchingVisibleMetas(this._type),n=i.options.stacked,o=s.length,a=[];let r,l;for(r=0;r<o;++r)if(l=s[r],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(h(t)||isNaN(t))continue}if((!1===n||-1===a.indexOf(l.stack)||void 0===n&&void 0===l.stack)&&a.push(l.stack),l.index===t)break}return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||Ci(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:s,minBarLength:n}}=this,o=s||0,a=this.getParsed(t),r=a._custom,l=Ri(r);let c,d,u=a[e.axis],f=0,g=i?this.applyStack(e,a,i):u;g!==u&&(f=g-u,g=u),l&&(u=r.barStart,g=r.barEnd-r.barStart,0!==u&&B(u)!==B(r.barEnd)&&(f=0),f+=u);const p=h(s)||l?f:s;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+g):m,d=c-m,Math.abs(d)<n&&(d=function(t,e,i){return 0!==t?B(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,o)*n,u===o&&(m-=d/2),c=m+d),m===e.getPixelForValue(o)){const t=B(d)*e.getLineWidthForValue(o)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=f(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,l="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const h=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const l=o-(o-Math.min(a,r))/2*h;return{chunk:Math.abs(r-a)/2*h/s,ratio:i.barPercentage,start:l}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return h(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=l.start+l.chunk*c+l.chunk/2,r=Math.min(o,l.chunk*l.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}}zi.id="bar",zi.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},zi.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Vi extends Di{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=f(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=f(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:s}=e,n=this.getParsed(t),o=i.getLabelForValue(n.x),a=s.getLabelForValue(n.y),r=n._custom;return{label:e.label,value:"("+o+", "+a+(r?", "+r:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,r=this.resolveDataElementOptions(e,s),h=this.getSharedOptions(r),l=this.includeOptions(s,h),c=o.axis,d=a.axis;for(let r=e;r<e+i;r++){const e=t[r],i=!n&&this.getParsed(r),h={},u=h[c]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[c]),f=h[d]=n?a.getBasePixel():a.getPixelForValue(i[d]);h.skip=isNaN(u)||isNaN(f),l&&(h.options=this.resolveDataElementOptions(r,e.active?"active":s),n&&(h.options.radius=0)),this.updateElement(e,r,h,s)}this.updateSharedOptions(h,s,r)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=f(i&&i._custom,n),s}}Vi.id="bubble",Vi.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Vi.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Bi extends Di{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(c(i[t])){const{key:t="value"}=this._parsing;a=e=>+S(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return $(this.options.rotation-90)}_getCircumference(){return $(this.options.circumference)}_getRotationExtents(){let t=L,e=-L;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((h=this.options.cutout,l=a,"string"==typeof h&&h.endsWith("%")?parseFloat(h)/100:h/l),1);var h,l;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:m,offsetY:b}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<L){const r=t,h=r+e,l=Math.cos(r),c=Math.sin(r),d=Math.cos(h),u=Math.sin(h),f=(t,e,s)=>Z(t,r,h,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>Z(t,r,h,!0)?-1:Math.min(e,e*i,s,s*i),p=f(0,l,d),m=f(I,c,u),b=g(A,l,d),x=g(A+I,c,u);s=(p-b)/2,n=(m-x)/2,o=-(p+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),x=(i.width-o)/f,_=(i.height-o)/p,y=Math.max(Math.min(x,_)/2,0),v=g(this.options.radius,y),M=(v-Math.max(v*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=m*v,this.offsetY=b*v,s.total=this.calculateTotal(),this.outerRadius=v-M*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-M*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/L)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,h=(a.left+a.right)/2,l=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,f=this.resolveDataElementOptions(e,s),g=this.getSharedOptions(f),p=this.includeOptions(s,g);let m,b=this._getRotation();for(m=0;m<e;++m)b+=this._circumference(m,n);for(m=e;m<e+i;++m){const e=this._circumference(m,n),i=t[m],o={x:h+this.offsetX,y:l+this.offsetY,startAngle:b,endAngle:b+e,circumference:e,outerRadius:u,innerRadius:d};p&&(o.options=g||this.resolveDataElementOptions(m,i.active?"active":s)),b+=e,this.updateElement(i,m,o,s)}this.updateSharedOptions(g,s,f)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?L*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=ei(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(f(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Bi.id="doughnut",Bi.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Bi.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Bi.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return l(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class Ni extends Di{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=function(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,h=a.axis,{min:l,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=J(Math.min(ge(r,a.axis,l).lo,i?s:ge(e,h,a.getPixelForValue(l)).lo),0,s-1)),o=u?J(Math.max(ge(r,a.axis,c).hi+1,i?0:ge(e,h,a.getPixelForValue(c)).hi+1),n,s)-n:s-n}return{start:n,count:o}}(e,s,o);this._drawStart=a,this._drawCount=r,function(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const h=this.resolveDatasetElementOptions(t);this.options.showLine||(h.borderWidth=0),h.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:h},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,s),d=this.getSharedOptions(c),u=this.includeOptions(s,d),f=o.axis,g=a.axis,{spanGaps:p,segment:m}=this.options,b=j(p)?p:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||n||"none"===s;let _=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),p=x?e:{},y=h(i[g]),v=p[f]=o.getPixelForValue(i[f],c),M=p[g]=n||y?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[g],c);p.skip=isNaN(v)||isNaN(M)||y,p.stop=c>0&&i[f]-_[f]>b,m&&(p.parsed=i,p.raw=l.data[c]),u&&(p.options=d||this.resolveDataElementOptions(c,e.active?"active":s)),x||this.updateElement(e,c,p,s),_=i}this.updateSharedOptions(d,s,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Ni.id="line",Ni.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Ni.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class ji extends Di{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=ei(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=this.getDataset(),r=o.options.animation,h=this._cachedMeta.rScale,l=h.xCenter,c=h.yCenter,d=h.getIndexAngle(0)-.5*A;let u,f=d;const g=360/this.countVisibleElements();for(u=0;u<e;++u)f+=this._computeAngle(u,s,g);for(u=e;u<e+i;u++){const e=t[u];let i=f,p=f+this._computeAngle(u,s,g),m=o.getDataVisibility(u)?h.getDistanceFromCenterForValue(a.data[u]):0;f=p,n&&(r.animateScale&&(m=0),r.animateRotate&&(i=p=d));const b={x:l,y:c,innerRadius:0,outerRadius:m,startAngle:i,endAngle:p,options:this.resolveDataElementOptions(u,e.active?"active":s)};this.updateElement(e,u,b,s)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach((e,s)=>{!isNaN(t.data[s])&&this.chart.getDataVisibility(s)&&i++}),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?$(this.resolveDataElementOptions(t,e).angle||i):0}}ji.id="polarArea",ji.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},ji.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Wi extends Bi{}Wi.id="pie",Wi.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Hi extends Di{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this.getDataset(),o=this._cachedMeta.rScale,a="reset"===s;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":s),h=o.getPointPositionForValue(r,n.data[r]),l=a?o.xCenter:h.x,c=a?o.yCenter:h.y,d={x:l,y:c,angle:h.angle,skip:isNaN(l)||isNaN(c),options:i};this.updateElement(e,r,d,s)}}}Hi.id="radar",Hi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Hi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class $i extends Ni{}$i.id="scatter",$i.defaults={showLine:!1,fill:!1},$i.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};function Yi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Ui{constructor(t){this.options=t||{}}formats(){return Yi()}parse(t,e){return Yi()}format(t,e){return Yi()}add(t,e,i){return Yi()}diff(t,e,i){return Yi()}startOf(t,e,i){return Yi()}endOf(t,e){return Yi()}}Ui.override=function(t){Object.assign(Ui.prototype,t)};var Xi={_date:Ui};function qi(t,e){return"native"in t?{x:t.x,y:t.y}:Ye(t,e)}function Ki(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?pe:ge;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function Gi(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:h,hi:l}=Ki(o[t],e,a,n);for(let t=h;t<=l;++t){const e=r[t];e.skip||s(e,i,t)}}}function Zi(t,e,i,s){const n=[];if(!Kt(e,t.chartArea,t._minPadding))return n;return Gi(t,i,e,(function(t,i,o){t.inRange(e.x,e.y,s)&&n.push({element:t,datasetIndex:i,index:o})}),!0),n}function Ji(t,e,i,s,n){let o=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let r=Number.POSITIVE_INFINITY;return Gi(t,i,e,(function(i,h,l){const c=i.inRange(e.x,e.y,n);if(s&&!c)return;const d=i.getCenterPoint(n);if(!Kt(d,t.chartArea,t._minPadding)&&!c)return;const u=a(e,d);u<r?(o=[{element:i,datasetIndex:h,index:l}],r=u):u===r&&o.push({element:i,datasetIndex:h,index:l})})),o}function Qi(t,e,i,s,n){return Kt(e,t.chartArea,t._minPadding)?"r"!==i||s?Ji(t,e,i,s,n):function(t,e,i,s){let n=[];return Gi(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:h}=X(t,{x:e.x,y:e.y});Z(h,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function ts(t,e,i,s){const n=qi(e,t),o=[],a=i.axis,r="x"===a?"inXRange":"inYRange";let h=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let s,n,o;for(let t=0,a=i.length;t<a;++t){({index:s,data:n}=i[t]);for(let t=0,i=n.length;t<i;++t)o=n[t],o.skip||e(o,s,t)}}(t,(t,e,i)=>{t[r](n[a],s)&&o.push({element:t,datasetIndex:e,index:i}),t.inRange(n.x,n.y,s)&&(h=!0)}),i.intersect&&!h?[]:o}var es={modes:{index(t,e,i,s){const n=qi(e,t),o=i.axis||"x",a=i.intersect?Zi(t,n,o,s):Qi(t,n,o,!1,s),r=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach(t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&r.push({element:i,datasetIndex:t.index,index:e})}),r):[]},dataset(t,e,i,s){const n=qi(e,t),o=i.axis||"xy";let a=i.intersect?Zi(t,n,o,s):Qi(t,n,o,!1,s);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,s)=>Zi(t,qi(e,t),i.axis||"xy",s),nearest:(t,e,i,s)=>Qi(t,qi(e,t),i.axis||"xy",i.intersect,s),x:(t,e,i,s)=>ts(t,e,{axis:"x",intersect:i.intersect},s),y:(t,e,i,s)=>ts(t,e,{axis:"y",intersect:i.intersect},s)}};const is=["left","top","right","bottom"];function ss(t,e){return t.filter(t=>t.pos===e)}function ns(t,e){return t.filter(t=>-1===is.indexOf(t.pos)&&t.box.axis===e)}function os(t,e){return t.sort((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight})}function as(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!is.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,h=i[r.stack],l=h&&r.stackWeight/h.weight;r.horizontal?(r.width=l?l*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=l?l*n:a&&e.availableHeight)}return i}function rs(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function hs(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function ls(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!c(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&hs(a,o.getPadding());const r=Math.max(0,e.outerWidth-rs(a,t,"left","right")),h=Math.max(0,e.outerHeight-rs(a,t,"top","bottom")),l=r!==t.w,d=h!==t.h;return t.w=r,t.h=h,i.horizontal?{same:l,other:d}:{same:d,other:l}}function cs(t,e){const i=e.maxPadding;function s(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach(t=>{s[t]=Math.max(e[t],i[t])}),s}return s(t?["left","right"]:["top","bottom"])}function ds(t,e,i,s){const n=[];let o,a,r,h,l,c;for(o=0,a=t.length,l=0;o<a;++o){r=t[o],h=r.box,h.update(r.width||e.w,r.height||e.h,cs(r.horizontal,e));const{same:a,other:d}=ls(e,i,r,s);l|=a&&n.length,c=c||d,h.fullSize||n.push(r)}return l&&ds(n,e,i,s)||c}function us(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function fs(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,h=s[r.stack]||{count:1,placed:0,weight:1},l=r.stackWeight/h.weight||1;if(r.horizontal){const s=e.w*l,o=h.size||t.height;O(h.start)&&(a=h.start),t.fullSize?us(t,n.left,a,i.outerWidth-n.right-n.left,o):us(t,e.left+h.placed,a,s,o),h.start=a,h.placed+=s,a=t.bottom}else{const s=e.h*l,a=h.size||t.width;O(h.start)&&(o=h.start),t.fullSize?us(t,o,n.top,a,i.outerHeight-n.bottom-n.top):us(t,o,e.top+h.placed,a,s),h.start=o,h.placed+=s,o=t.right}}e.x=o,e.y=a}Ht.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var gs={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=le(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=os(e.filter(t=>t.box.fullSize),!0),s=os(ss(e,"left"),!0),n=os(ss(e,"right")),o=os(ss(e,"top"),!0),a=os(ss(e,"bottom")),r=ns(e,"x"),h=ns(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(h).concat(a).concat(r),chartArea:ss(e,"chartArea"),vertical:s.concat(n).concat(h),horizontal:o.concat(a).concat(r)}}(t.boxes),h=r.vertical,l=r.horizontal;m(t.boxes,t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()});const c=h.reduce((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1,0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);hs(u,le(s));const f=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),g=as(h.concat(l),d);ds(r.fullSize,f,d,g),ds(h,f,d,g),ds(l,f,d,g)&&ds(h,f,d,g),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),fs(r.leftAndTop,f,d,g),f.x+=f.w,f.y+=f.h,fs(r.rightAndBottom,f,d,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},m(r.chartArea,e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})})}};class ps{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class ms extends ps{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const bs={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},xs=t=>null===t||""===t;const _s=!!Ke&&{passive:!0};function ys(t,e,i){t.canvas.removeEventListener(e,i,_s)}function vs(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Ms(t,e,i){const s=t.canvas,n=new MutationObserver(t=>{let e=!1;for(const i of t)e=e||vs(i.addedNodes,s),e=e&&!vs(i.removedNodes,s);e&&i()});return n.observe(document,{childList:!0,subtree:!0}),n}function ws(t,e,i){const s=t.canvas,n=new MutationObserver(t=>{let e=!1;for(const i of t)e=e||vs(i.removedNodes,s),e=e&&!vs(i.addedNodes,s);e&&i()});return n.observe(document,{childList:!0,subtree:!0}),n}const ks=new Map;let Ss=0;function Ps(){const t=window.devicePixelRatio;t!==Ss&&(Ss=t,ks.forEach((e,i)=>{i.currentDevicePixelRatio!==t&&e()}))}function Os(t,e,i){const s=t.canvas,o=s&&Ne(s);if(!o)return;const a=n((t,e)=>{const s=o.clientWidth;i(t,e),s<o.clientWidth&&i()},window),r=new ResizeObserver(t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||a(i,s)});return r.observe(o),function(t,e){ks.size||window.addEventListener("resize",Ps),ks.set(t,e)}(t,a),r}function Ds(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ks.delete(t),ks.size||window.removeEventListener("resize",Ps)}(t)}function Cs(t,e,i){const s=t.canvas,o=n(e=>{null!==t.ctx&&i(function(t,e){const i=bs[t.type]||t.type,{x:s,y:n}=Ye(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))},t,t=>{const e=t[0];return[e,e.offsetX,e.offsetY]});return function(t,e,i){t.addEventListener(e,i,_s)}(s,e,o),o}class As extends ps{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t.$chartjs={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",xs(n)){const e=Ge(t,"width");void 0!==e&&(t.width=e)}if(xs(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ge(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach(t=>{const s=i[t];h(s)?e.removeAttribute(t):e.setAttribute(t,s)});const s=i.style||{};return Object.keys(s).forEach(t=>{e.style[t]=s[t]}),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:Ms,detach:ws,resize:Os}[e]||Cs;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:Ds,detach:Ds,resize:Ds}[e]||ys)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return Xe(t,e,i,s)}isAttached(t){const e=Ne(t);return!(!e||!e.isConnected)}}class Ls{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return j(this.x)&&j(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach(t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]}),s}}Ls.defaults={},Ls.defaultRoutes=void 0;const Rs={values:t=>l(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const a=V(Math.abs(o)),r=Math.max(Math.min(-1*Math.floor(a),20),0),h={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(h,this.options.ticks.format),ei(t,s,h)},logarithmic(t,e,i){if(0===t)return"0";const s=t/Math.pow(10,Math.floor(V(t)));return 1===s||2===s||5===s?Rs.numeric.call(this,t,e,i):""}};var Ts={formatters:Rs};function Es(t,e){const i=t.options.ticks,s=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],o=n.length,a=n[0],r=n[o-1],l=[];if(o>s)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,l,n,o/s),l;const c=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort((t,e)=>t-e).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(n,e,s);if(o>0){let t,i;const s=o>1?Math.round((r-a)/(o-1)):null;for(Is(e,l,c,h(s)?0:a-s,a),t=0,i=o-1;t<i;t++)Is(e,l,c,n[t],n[t+1]);return Is(e,l,c,r,h(s)?e.length:r+s),l}return Is(e,l,c),l}function Is(t,e,i,s,n){const o=f(s,0),a=Math.min(f(n,t.length),t.length);let r,h,l,c=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),l=o;l<0;)c++,l=Math.round(o+c*i);for(h=Math.max(o,0);h<a;h++)h===l&&(e.push(t[h]),c++,l=Math.round(o+c*i))}Ht.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Ts.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Ht.route("scale.ticks","color","","color"),Ht.route("scale.grid","color","","borderColor"),Ht.route("scale.grid","borderColor","","borderColor"),Ht.route("scale.title","color","","color"),Ht.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Ht.describe("scales",{_fallback:"scale"}),Ht.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Fs=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function zs(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function Vs(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel;let r,h=t.getPixelForTick(n);if(!(i&&(r=1===s?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(n-1))/2,h+=n<e?r:-r,h<o-1e-6||h>a+1e-6)))return h}function Bs(t){return t.drawTicks?t.tickLength:0}function Ns(t,e){if(!t.display)return 0;const i=ce(t.font,e),s=le(t.padding);return(l(t.text)?t.text.length:1)*i.lineHeight+s.height}function js(t,e,i){let s=o(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class Ws extends Ls{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=u(t,Number.POSITIVE_INFINITY),e=u(e,Number.NEGATIVE_INFINITY),i=u(i,Number.POSITIVE_INFINITY),s=u(s,Number.NEGATIVE_INFINITY),{min:u(t,i),max:u(e,s),minDefined:d(t),maxDefined:d(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,h=a.length;r<h;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:u(i,u(s,i)),max:u(s,u(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){p(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=g(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?zs(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=Es(this,this.ticks),this._labelSizes=null),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){p(this.options.afterUpdate,[this])}beforeSetDimensions(){p(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){p(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),p(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){p(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=p(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){p(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){p(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,s=e.minRotation||0,n=e.maxRotation;let o,a,r,h=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const l=this._getLabelSizes(),c=l.widest.width,d=l.highest.height,u=J(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Bs(t.grid)-e.padding-Ns(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),h=Y(Math.min(Math.asin(J((l.highest.height+6)/o,-1,1)),Math.asin(J(a/r,-1,1))-Math.asin(J(d/r,-1,1)))),h=Math.max(s,Math.min(n,h))),this.labelRotation=h}afterCalculateLabelRotation(){p(this.options.afterCalculateLabelRotation,[this])}beforeFit(){p(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Ns(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Bs(n)+o):(t.height=this.maxHeight,t.width=Bs(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,h=$(this.labelRotation),l=Math.cos(h),c=Math.sin(h);if(a){const e=i.mirror?0:c*n.width+l*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:l*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,l)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,h="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,l=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?h?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-l+o)*this.width/(this.width-l),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){p(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)h(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=zs(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:s}=this,n=[],o=[];let a,r,c,d,u,f,g,p,b,x,_,y=0,v=0;for(a=0;a<e;++a){if(d=t[a].label,u=this._resolveTickFontOptions(a),i.font=f=u.string,g=s[f]=s[f]||{data:{},gc:[]},p=u.lineHeight,b=x=0,h(d)||l(d)){if(l(d))for(r=0,c=d.length;r<c;++r)_=d[r],h(_)||l(_)||(b=$t(i,g.data,g.gc,b,_),x+=p)}else b=$t(i,g.data,g.gc,b,d),x=p;n.push(b),o.push(x),y=Math.max(b,y),v=Math.max(x,v)}!function(t,e){m(t,t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}})}(s,e);const M=n.indexOf(y),w=o.indexOf(v),k=t=>({width:n[t]||0,height:o[t]||0});return{first:k(0),last:k(e-1),widest:k(M),highest:k(w),widths:n,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return J(this._alignToPixels?Ut(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return ue(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=ue(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=$(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o}=s,a=n.offset,r=this.isHorizontal(),h=this.ticks.length+(a?1:0),l=Bs(n),d=[],u=n.setContext(this.getContext()),g=u.drawBorder?u.borderWidth:0,p=g/2,m=function(t){return Ut(i,t,g)};let b,x,_,y,v,M,w,k,S,P,O,D;if("top"===o)b=m(this.bottom),M=this.bottom-l,k=b-p,P=m(t.top)+p,D=t.bottom;else if("bottom"===o)b=m(this.top),P=t.top,D=m(t.bottom)-p,M=b+p,k=this.top+l;else if("left"===o)b=m(this.right),v=this.right-l,w=b-p,S=m(t.left)+p,O=t.right;else if("right"===o)b=m(this.left),S=t.left,O=m(t.right)-p,v=b+p,w=this.left+l;else if("x"===e){if("center"===o)b=m((t.top+t.bottom)/2+.5);else if(c(o)){const t=Object.keys(o)[0],e=o[t];b=m(this.chart.scales[t].getPixelForValue(e))}P=t.top,D=t.bottom,M=b+p,k=M+l}else if("y"===e){if("center"===o)b=m((t.left+t.right)/2);else if(c(o)){const t=Object.keys(o)[0],e=o[t];b=m(this.chart.scales[t].getPixelForValue(e))}v=b-p,w=v-l,S=t.left,O=t.right}const C=f(s.ticks.maxTicksLimit,h),A=Math.max(1,Math.ceil(h/C));for(x=0;x<h;x+=A){const t=n.setContext(this.getContext(x)),e=t.lineWidth,s=t.color,o=n.borderDash||[],h=t.borderDashOffset,l=t.tickWidth,c=t.tickColor,u=t.tickBorderDash||[],f=t.tickBorderDashOffset;_=Vs(this,x,a),void 0!==_&&(y=Ut(i,_,e),r?v=w=S=O=y:M=k=P=D=y,d.push({tx1:v,ty1:M,tx2:w,ty2:k,x1:S,y1:P,x2:O,y2:D,width:e,color:s,borderDash:o,borderDashOffset:h,tickWidth:l,tickColor:c,tickBorderDash:u,tickBorderDashOffset:f}))}return this._ticksLength=h,this._borderValue=b,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:h,padding:d,mirror:u}=n,f=Bs(i.grid),g=f+d,p=u?-d:g,m=-$(this.labelRotation),b=[];let x,_,y,v,M,w,k,S,P,O,D,C,A="middle";if("top"===s)w=this.bottom-p,k=this._getXAxisLabelAlignment();else if("bottom"===s)w=this.top+p,k=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(f);k=t.textAlign,M=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(f);k=t.textAlign,M=t.x}else if("x"===e){if("center"===s)w=(t.top+t.bottom)/2+g;else if(c(s)){const t=Object.keys(s)[0],e=s[t];w=this.chart.scales[t].getPixelForValue(e)+g}k=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)M=(t.left+t.right)/2-g;else if(c(s)){const t=Object.keys(s)[0],e=s[t];M=this.chart.scales[t].getPixelForValue(e)}k=this._getYAxisLabelAlignment(f).textAlign}"y"===e&&("start"===r?A="top":"end"===r&&(A="bottom"));const L=this._getLabelSizes();for(x=0,_=a.length;x<_;++x){y=a[x],v=y.label;const t=n.setContext(this.getContext(x));S=this.getPixelForTick(x)+n.labelOffset,P=this._resolveTickFontOptions(x),O=P.lineHeight,D=l(v)?v.length:1;const e=D/2,i=t.color,r=t.textStrokeColor,c=t.textStrokeWidth;let d;if(o?(M=S,C="top"===s?"near"===h||0!==m?-D*O+O/2:"center"===h?-L.highest.height/2-e*O+O:-L.highest.height+O/2:"near"===h||0!==m?O/2:"center"===h?L.highest.height/2-e*O:L.highest.height-D*O,u&&(C*=-1)):(w=S,C=(1-D)*O/2),t.showLabelBackdrop){const e=le(t.backdropPadding),i=L.heights[x],s=L.widths[x];let n=w+C-e.top,o=M-e.left;switch(A){case"middle":n-=i/2;break;case"bottom":n-=i}switch(k){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}b.push({rotation:m,label:v,font:P,color:i,strokeColor:r,strokeWidth:c,textOffset:C,textAlign:k,textBaseline:A,translation:[M,w],backdrop:d})}return b}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-$(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,h;return"left"===e?s?(h=this.right+n,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h+=a)):(h=this.right-o,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h=this.left)):"right"===e?s?(h=this.left+n,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h-=a)):(h=this.left+o,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h=this.right)):r="right",{textAlign:r,x:h}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex(e=>e.value===t);if(i>=0){return e.setContext(this.getContext(i)).lineWidth}return 0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,s=i.setContext(this.getContext()),n=i.drawBorder?s.borderWidth:0;if(!n)return;const o=i.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let r,h,l,c;this.isHorizontal()?(r=Ut(t,this.left,n)-n/2,h=Ut(t,this.right,o)+o/2,l=c=a):(l=Ut(t,this.top,n)-n/2,c=Ut(t,this.bottom,o)+o/2,r=h=a),e.save(),e.lineWidth=s.borderWidth,e.strokeStyle=s.borderColor,e.beginPath(),e.moveTo(r,l),e.lineTo(h,c),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Gt(e,i);const s=this._labelItems||(this._labelItems=this._computeLabelItems(t));let n,o;for(n=0,o=s.length;n<o;++n){const t=s[n],i=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),te(e,o,0,t.textOffset,i,t)}i&&Zt(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=ce(i.font),o=le(i.padding),r=i.align;let h=n.lineHeight/2;"bottom"===e||"center"===e||c(e)?(h+=o.bottom,l(i.text)&&(h+=n.lineHeight*(i.text.length-1))):h+=o.top;const{titleX:d,titleY:u,maxWidth:f,rotation:g}=function(t,e,i,s){const{top:n,left:o,bottom:r,right:h,chart:l}=t,{chartArea:d,scales:u}=l;let f,g,p,m=0;const b=r-n,x=h-o;if(t.isHorizontal()){if(g=a(s,o,h),c(i)){const t=Object.keys(i)[0],s=i[t];p=u[t].getPixelForValue(s)+b-e}else p="center"===i?(d.bottom+d.top)/2+b-e:Fs(t,i,e);f=h-o}else{if(c(i)){const t=Object.keys(i)[0],s=i[t];g=u[t].getPixelForValue(s)-x+e}else g="center"===i?(d.left+d.right)/2-x+e:Fs(t,i,e);p=a(s,r,n),m="left"===i?-I:I}return{titleX:g,titleY:p,maxWidth:f,rotation:m}}(this,h,e,r);te(t,i.text,0,0,n,{color:i.color,maxWidth:f,rotation:g,textAlign:js(r,e,s),textBaseline:"middle",translation:[d,u]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=f(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===Ws.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return ce(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Hs{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=v(Object.create(null),[i?Ht.get(i):{},Ht.get(e),t.defaults]);Ht.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach(i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),h=a.join(".");Ht.route(o,n,h,r)})}(e,t.defaultRoutes);t.descriptors&&Ht.describe(e,t.descriptors)}(t,o,i),this.override&&Ht.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in Ht[s]&&(delete Ht[s][i],this.override&&delete Bt[i])}}var $s=new class{constructor(){this.controllers=new Hs(Di,"datasets",!0),this.elements=new Hs(Ls,"elements"),this.plugins=new Hs(Object,"plugins"),this.scales=new Hs(Ws,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach(e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):m(e,e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)})})}_exec(t,e,i){const s=P(t);p(i["before"+s],[],i),e[t](i),p(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}};class Ys{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===p(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){h(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=f(i.options&&i.options.plugins,{}),n=function(t){const e=[],i=Object.keys($s.plugins.items);for(let t=0;t<i.length;t++)e.push($s.getPlugin(i[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const i=s[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==s||e?function(t,e,i,s){const n=[],o=t.getContext();for(let a=0;a<e.length;a++){const r=e[a],h=r.id,l=Us(i[h],s);null!==l&&n.push({plugin:r,options:Xs(t.config,r,l,o)})}return n}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter(t=>!e.some(e=>t.plugin.id===e.plugin.id));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Us(t,e){return e||!1!==t?!0===t?{}:t:null}function Xs(t,e,i,s){const n=t.pluginScopeKeys(e),o=t.getOptionScopes(i,n);return t.createResolver(o,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function qs(t,e){const i=Ht.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Ks(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function Gs(t){const e=t.options||(t.options={});e.plugins=f(e.plugins,{}),e.scales=function(t,e){const i=Bt[t.type]||{scales:{}},s=e.scales||{},n=qs(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(s).forEach(t=>{const e=s[t];if(!c(e))return console.error("Invalid scale configuration for scale: "+t);if(e._proxy)return console.warn("Ignoring resolver passed as options for scale: "+t);const r=Ks(t,e),h=function(t,e){return t===e?"_index_":"_value_"}(r,n),l=i.scales||{};o[r]=o[r]||t,a[t]=M(Object.create(null),[{axis:r},e,l[r],l[h]])}),t.data.datasets.forEach(i=>{const n=i.type||t.type,r=i.indexAxis||qs(n,e),h=(Bt[n]||{}).scales||{};Object.keys(h).forEach(t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),n=i[e+"AxisID"]||o[e]||e;a[n]=a[n]||Object.create(null),M(a[n],[{axis:e},s[n],h[t]])})}),Object.keys(a).forEach(t=>{const e=a[t];M(e,[Ht.scales[e.type],Ht.scale])}),a}(t,e)}function Zs(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Js=new Map,Qs=new Set;function tn(t,e){let i=Js.get(t);return i||(i=e(),Js.set(t,i),Qs.add(i)),i}const en=(t,e,i)=>{const s=S(e,i);void 0!==s&&t.add(s)};class sn{constructor(t){this._config=function(t){return(t=t||{}).data=Zs(t.data),Gs(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Zs(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Gs(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return tn(t,()=>[["datasets."+t,""]])}datasetAnimationScopeKeys(t,e){return tn(`${t}.transition.${e}`,()=>[[`datasets.${t}.transitions.${e}`,"transitions."+e],["datasets."+t,""]])}datasetElementScopeKeys(t,e){return tn(`${t}-${e}`,()=>[[`datasets.${t}.elements.${e}`,"datasets."+t,"elements."+e,""]])}pluginScopeKeys(t){const e=t.id;return tn(`${this.type}-plugin-${e}`,()=>[["plugins."+e,...t.additionalOptionScopes||[]]])}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach(e=>{t&&(r.add(t),e.forEach(e=>en(r,t,e))),e.forEach(t=>en(r,s,t)),e.forEach(t=>en(r,Bt[n]||{},t)),e.forEach(t=>en(r,Ht,t)),e.forEach(t=>en(r,Nt,t))});const h=Array.from(r);return 0===h.length&&h.push(Object.create(null)),Qs.has(e)&&o.set(e,h),h}chartOptionScopes(){const{options:t,type:e}=this;return[t,Bt[e]||{},Ht.datasets[e]||{},{type:e},Ht,Nt]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=nn(this._resolverCache,t,s);let r=o;if(function(t,e){const{isScriptable:i,isIndexable:s}=ve(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(D(a)||on(a))||o&&l(a))return!0}return!1}(o,e)){n.$shared=!1,r=ye(o,i=D(i)?i():i,this.createResolver(t,i,a))}for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=nn(this._resolverCache,t,i);return c(e)?ye(n,e,void 0,s):n}}function nn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);if(!o){o={resolver:_e(e,i),subPrefixes:i.filter(t=>!t.toLowerCase().includes("hover"))},s.set(n,o)}return o}const on=t=>c(t)&&Object.getOwnPropertyNames(t).reduce((e,i)=>e||D(t[i]),!1);const an=["top","bottom","left","right","chartArea"];function rn(t,e){return"top"===t||"bottom"===t||-1===an.indexOf(t)&&"x"===e}function hn(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function ln(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),p(i&&i.onComplete,[t],e)}function cn(t){const e=t.chart,i=e.options.animation;p(i&&i.onProgress,[t],e)}function dn(t){return Be()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const un={},fn=t=>{const e=dn(t);return Object.values(un).filter(t=>t.canvas===e).pop()};function gn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class pn{constructor(t,e){const i=this.config=new sn(e),s=dn(t),n=fn(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Be()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?ms:As}(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),h=a&&a.canvas,l=h&&h.height,c=h&&h.width;this.id=r(),this.ctx=a,this.canvas=h,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ys,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}(t=>this.update(t),o.resizeDelay||0),this._dataChanges=[],un[this.id]=this,a&&h?(ui.listen(this,"complete",ln),ui.listen(this,"progress",cn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return h(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():qe(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Xt(this.canvas,this.ctx),this}stop(){return ui.stop(this),this}resize(t,e){ui.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,qe(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),p(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){m(this.options.scales||{},(t,e)=>{t.id=e})}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce((t,e)=>(t[e]=!1,t),{});let n=[];e&&(n=n.concat(Object.keys(e).map(t=>{const i=e[t],s=Ks(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}}))),m(n,e=>{const n=e.options,o=n.id,a=Ks(o,n),r=f(n.type,e.dtype);void 0!==n.position&&rn(n.position,a)===rn(e.dposition)||(n.position=e.dposition),s[o]=!0;let h=null;if(o in i&&i[o].type===r)h=i[o];else{h=new($s.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[h.id]=h}h.init(n,t)}),m(s,(t,e)=>{t||delete i[e]}),m(i,t=>{gs.configure(this,t,t.options),gs.addBox(this,t)})}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort((t,e)=>t.index-e.index),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(hn("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach((t,i)=>{0===e.filter(e=>e===t._dataset).length&&this._destroyDatasetMeta(i)})}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||qs(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=$s.getController(o),{datasetElementType:s,dataElementType:a}=Ht.datasets[o];Object.assign(e.prototype,{dataElementType:$s.getElement(a),datasetElementType:s&&$s.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){m(this.data.datasets,(t,e)=>{this.getDatasetMeta(e).controller.reset()},this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||m(n,t=>{t.reset()}),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(hn("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){m(this.scales,t=>{gs.removeBox(this,t)}),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);C(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e){gn(t,s,"_removeElements"===i?-n:n)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter(t=>t[0]===e).map((t,e)=>e+","+t.splice(1).join(","))),s=i(0);for(let t=1;t<e;t++)if(!C(s,i(t)))return;return Array.from(s).map(t=>t.split(",")).map(t=>({method:t[1],start:+t[2],count:+t[3]}))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;gs.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],m(this.boxes,t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))},this),this._layers.forEach((t,e)=>{t._idx=e}),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,D(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(ui.has(this)?this.attached&&!ui.running(this)&&ui.start(this):(this.draw(),ln({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&Gt(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&Zt(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}getElementsAtEventForMode(t,e,i,s){const n=es.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter(t=>t&&t._dataset===e).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=ue(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);O(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update(e=>e.datasetIndex===t?s:void 0))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),ui.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Xt(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete un[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};m(this.options.events,t=>i(t,s))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){m(this._listeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._listeners={},m(this._responsiveListeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map(({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}});!b(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter(t=>!e.some(e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:Kt(t,this.chartArea,this._minPadding)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),h=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,p(n.onHover,[t,a,this],this),r&&p(n.onClick,[t,a,this],this));const l=!b(a,s);return(l||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=h,l}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}const mn=()=>m(pn.instances,t=>t._plugins.invalidate());function bn(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:h}=e;let l=n/r;t.beginPath(),t.arc(o,a,r,s-l,i+l),h>n?(l=n/h,t.arc(o,a,h,i+l,s-l,!0)):t.arc(o,a,n,i+I,s-I),t.closePath(),t.clip()}function xn(t,e,i,s){const n=ae(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]);const o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return J(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:J(n.innerStart,0,a),innerEnd:J(n.innerEnd,0,a)}}function _n(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function yn(t,e,i,s,n){const{x:o,y:a,startAngle:r,pixelMargin:h,innerRadius:l}=e,c=Math.max(e.outerRadius+s+i-h,0),d=l>0?l+s+i+h:0;let u=0;const f=n-r;if(s){const t=((l>0?l-s:0)+(c>0?c-s:0))/2;u=(f-(0!==t?f*t/(t+s):f))/2}const g=(f-Math.max(.001,f*c-i/A)/c)/2,p=r+g+u,m=n-g-u,{outerStart:b,outerEnd:x,innerStart:_,innerEnd:y}=xn(e,d,c,m-p),v=c-b,M=c-x,w=p+b/v,k=m-x/M,S=d+_,P=d+y,O=p+_/S,D=m-y/P;if(t.beginPath(),t.arc(o,a,c,w,k),x>0){const e=_n(M,k,o,a);t.arc(e.x,e.y,x,k,m+I)}const C=_n(P,m,o,a);if(t.lineTo(C.x,C.y),y>0){const e=_n(P,D,o,a);t.arc(e.x,e.y,y,m+I,D+Math.PI)}if(t.arc(o,a,d,m-y/d,p+_/d,!0),_>0){const e=_n(S,O,o,a);t.arc(e.x,e.y,_,O+Math.PI,p-I)}const L=_n(v,p,o,a);if(t.lineTo(L.x,L.y),b>0){const e=_n(v,w,o,a);t.arc(e.x,e.y,b,p-I,w)}t.closePath()}function vn(t,e,i,s,n){const{options:o}=e,{borderWidth:a,borderJoinStyle:r}=o,h="inner"===o.borderAlign;a&&(h?(t.lineWidth=2*a,t.lineJoin=r||"round"):(t.lineWidth=a,t.lineJoin=r||"bevel"),e.fullCircles&&function(t,e,i){const{x:s,y:n,startAngle:o,pixelMargin:a,fullCircles:r}=e,h=Math.max(e.outerRadius-a,0),l=e.innerRadius+a;let c;for(i&&bn(t,e,o+L),t.beginPath(),t.arc(s,n,l,o+L,o,!0),c=0;c<r;++c)t.stroke();for(t.beginPath(),t.arc(s,n,h,o,o+L),c=0;c<r;++c)t.stroke()}(t,e,h),h&&bn(t,e,n),yn(t,e,i,s,n),t.stroke())}Object.defineProperties(pn,{defaults:{enumerable:!0,value:Ht},instances:{enumerable:!0,value:un},overrides:{enumerable:!0,value:Bt},registry:{enumerable:!0,value:$s},version:{enumerable:!0,value:"3.7.0"},getChart:{enumerable:!0,value:fn},register:{enumerable:!0,value:(...t)=>{$s.add(...t),mn()}},unregister:{enumerable:!0,value:(...t)=>{$s.remove(...t),mn()}}});class Mn extends Ls{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=X(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:h,outerRadius:l,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,u=f(c,r-a)>=L||Z(n,a,r),g=Q(o,h+d,l+d);return u&&g}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:r,spacing:h}=this.options,l=(s+n)/2,c=(o+a+h+r)/2;return{x:e+Math.cos(l)*c,y:i+Math.sin(l)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/2,n=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>L?Math.floor(i/L):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let o=0;if(s){o=s/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*o,Math.sin(e)*o),this.circumference>=A&&(o=s)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const a=function(t,e,i,s){const{fullCircles:n,startAngle:o,circumference:a}=e;let r=e.endAngle;if(n){yn(t,e,i,s,o+L);for(let e=0;e<n;++e)t.fill();isNaN(a)||(r=o+a%L,a%L==0&&(r+=L))}return yn(t,e,i,s,r),t.fill(),r}(t,this,o,n);vn(t,this,o,n,a),t.restore()}}function wn(t,e,i=e){t.lineCap=f(i.borderCapStyle,e.borderCapStyle),t.setLineDash(f(i.borderDash,e.borderDash)),t.lineDashOffset=f(i.borderDashOffset,e.borderDashOffset),t.lineJoin=f(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=f(i.borderWidth,e.borderWidth),t.strokeStyle=f(i.borderColor,e.borderColor)}function kn(t,e,i){t.lineTo(i.x,i.y)}function Sn(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,h=Math.max(n,a),l=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:h,loop:e.loop,ilen:l<h&&!c?s+l-h:l-h}}function Pn(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:h,ilen:l}=Sn(n,i,s),c=function(t){return t.stepped?Jt:t.tension||"monotone"===t.cubicInterpolationMode?Qt:kn}(o);let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=l;++d)u=n[(r+(p?l-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,o.stepped),f=u);return h&&(u=n[(r+(p?l:0))%a],c(t,f,u,p,o.stepped)),!!h}function On(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=Sn(n,i,s),{move:h=!0,reverse:l}=s||{};let c,d,u,f,g,p,m=0,b=0;const x=t=>(a+(l?r-t:t))%o,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(h&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,f=g=i),p=i}_()}function Dn(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?On:Pn}Mn.id="arc",Mn.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},Mn.defaultRoutes={backgroundColor:"backgroundColor"};const Cn="function"==typeof Path2D;function An(t,e,i,s){Cn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),wn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Dn(e);for(const r of n)wn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}class Ln extends Ls{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;Ve(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return li(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,h=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?h.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,h.skip&&(e=a)),h=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=hi(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?Je:t.tension||"monotone"===t.cubicInterpolationMode?Qe:Ze}(i);let h,l;for(h=0,l=o.length;h<l;++h){const{start:l,end:c}=o[h],d=n[l],u=n[c];if(d===u){a.push(d);continue}const f=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Dn(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Dn(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),An(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Rn(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}Ln.id="line",Ln.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Ln.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Ln.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Tn extends Ls{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return Rn(this,t,"x",e)}inYRange(t,e){return Rn(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Kt(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,qt(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function En(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,h,l,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),h=Math.max(i,n),l=s-d,c=s+d):(d=o/2,r=i-d,h=i+d,l=Math.min(s,n),c=Math.max(s,n)),{left:r,top:l,right:h,bottom:c}}function In(t,e,i,s){return t?0:J(e,i,s)}function Fn(t){const e=En(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=re(s);return{t:In(n.top,o.top,0,i),r:In(n.right,o.right,0,e),b:In(n.bottom,o.bottom,0,i),l:In(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=he(n),a=Math.min(e,i),r=t.borderSkipped,h=s||c(n);return{topLeft:In(!h||r.top||r.left,o.topLeft,0,a),topRight:In(!h||r.top||r.right,o.topRight,0,a),bottomLeft:In(!h||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:In(!h||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}function zn(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&En(t,s);return a&&(n||Q(e,a.left,a.right))&&(o||Q(i,a.top,a.bottom))}function Vn(t,e){t.rect(e.x,e.y,e.w,e.h)}function Bn(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}Tn.id="point",Tn.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Tn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Nn extends Ls{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=Fn(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?ie:Vn;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,Bn(o,e,n)),t.clip(),a(t,Bn(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Bn(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return zn(this,t,e,i)}inXRange(t,e){return zn(this,t,null,e)}inYRange(t,e){return zn(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Nn.id="bar",Nn.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Nn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};new WeakMap;const jn={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=q(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Wn(t,e){return e&&(l(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Hn(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function $n(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function Yn(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,h=ce(e.bodyFont),l=ce(e.titleFont),c=ce(e.footerFont),d=o.length,u=n.length,f=s.length,g=le(e.padding);let p=g.height,b=0,x=s.reduce((t,e)=>t+e.before.length+e.lines.length+e.after.length,0);if(x+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*l.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x){p+=f*(e.displayColors?Math.max(r,h.lineHeight):h.lineHeight)+(x-f)*h.lineHeight+(x-1)*e.bodySpacing}u&&(p+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let _=0;const y=function(t){b=Math.max(b,i.measureText(t).width+_)};return i.save(),i.font=l.string,m(t.title,y),i.font=h.string,m(t.beforeBody.concat(t.afterBody),y),_=e.displayColors?a+2+e.boxPadding:0,m(s,t=>{m(t.before,y),m(t.lines,y),m(t.after,y)}),_=0,i.font=c.string,m(t.footer,y),i.restore(),b+=g.width,{width:b,height:p}}function Un(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:h}}=t;let l="center";return"center"===s?l=n<=(r+h)/2?"left":"right":n<=o/2?l="left":n>=a-o/2&&(l="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||("right"===t&&n-o-a<0||void 0)}(l,t,e,i)&&(l="center"),l}function Xn(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Un(t,e,i,s),yAlign:s}}function qn(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:h}=i,l=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=he(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const p=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,h,l);return"center"===h?"left"===r?g+=l:"right"===r&&(g-=l):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,f)+n),{x:J(g,0,s.width-e.width),y:J(p,0,s.height-e.height)}}function Kn(t,e,i){const s=le(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Gn(t){return Wn([],Hn(t))}function Zn(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class Jn extends Ls{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new mi(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this,i=this._tooltipItems,ue(t,{tooltip:e,tooltipItems:i,type:"tooltip"})));var t,e,i}getTitle(t,e){const{callbacks:i}=e,s=i.beforeTitle.apply(this,[t]),n=i.title.apply(this,[t]),o=i.afterTitle.apply(this,[t]);let a=[];return a=Wn(a,Hn(s)),a=Wn(a,Hn(n)),a=Wn(a,Hn(o)),a}getBeforeBody(t,e){return Gn(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,s=[];return m(t,t=>{const e={before:[],lines:[],after:[]},n=Zn(i,t);Wn(e.before,Hn(n.beforeLabel.call(this,t))),Wn(e.lines,n.label.call(this,t)),Wn(e.after,Hn(n.afterLabel.call(this,t))),s.push(e)}),s}getAfterBody(t,e){return Gn(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,s=i.beforeFooter.apply(this,[t]),n=i.footer.apply(this,[t]),o=i.afterFooter.apply(this,[t]);let a=[];return a=Wn(a,Hn(s)),a=Wn(a,Hn(n)),a=Wn(a,Hn(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,h=[];for(a=0,r=e.length;a<r;++a)h.push($n(this.chart,e[a]));return t.filter&&(h=h.filter((e,s,n)=>t.filter(e,s,n,i))),t.itemSort&&(h=h.sort((e,s)=>t.itemSort(e,s,i))),m(h,e=>{const i=Zn(t.callbacks,e);s.push(i.labelColor.call(this,e)),n.push(i.labelPointStyle.call(this,e)),o.push(i.labelTextColor.call(this,e))}),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=h,h}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=jn[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=Yn(this,i),a=Object.assign({},t,e),r=Xn(this.chart,i,a),h=qn(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:h.x,y:h.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:h,bottomLeft:l,bottomRight:c}=he(a),{x:d,y:u}=t,{width:f,height:g}=e;let p,m,b,x,_,y;return"center"===n?(_=u+g/2,"left"===s?(p=d,m=p-o,x=_+o,y=_-o):(p=d+f,m=p+o,x=_-o,y=_+o),b=p):(m="left"===s?d+Math.max(r,l)+o:"right"===s?d+f-Math.max(h,c)-o:this.caretX,"top"===n?(x=u,_=x-o,p=m-o,b=m+o):(x=u+g,_=x+o,p=m+o,b=m-o),y=x),{x1:p,x2:m,x3:b,y1:x,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const h=ii(i.rtl,this.x,this.width);for(t.x=Kn(this,i.titleAlign,i),e.textAlign=h.textAlign(i.titleAlign),e.textBaseline="middle",o=ce(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],h.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:h,boxPadding:l}=n,c=ce(n.bodyFont),d=Kn(this,"left",n),u=s.x(d),f=r<c.lineHeight?(c.lineHeight-r)/2:0,g=e.y+f;if(n.usePointStyle){const e={radius:Math.min(h,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(u,h)+h/2,l=g+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,qt(t,e,i,l),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,qt(t,e,i,l)}else{t.lineWidth=o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(u,h-l),i=s.leftForLtr(s.xPlus(u,1),h-l-2),a=he(o.borderRadius);Object.values(a).some(t=>0!==t)?(t.beginPath(),t.fillStyle=n.multiKeyBackground,ie(t,{x:e,y:g,w:h,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),ie(t,{x:i,y:g+1,w:h-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,g,h,r),t.strokeRect(e,g,h,r),t.fillStyle=o.backgroundColor,t.fillRect(i,g+1,h-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:h,boxPadding:l}=i,c=ce(i.bodyFont);let d=c.lineHeight,u=0;const f=ii(i.rtl,this.x,this.width),g=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+n},p=f.textAlign(o);let b,x,_,y,v,M,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Kn(this,p,i),e.fillStyle=i.bodyColor,m(this.beforeBody,g),u=a&&"right"!==p?"center"===o?h/2+l:h+2+l:0,y=0,M=s.length;y<M;++y){for(b=s[y],x=this.labelTextColors[y],e.fillStyle=x,m(b.before,g),_=b.lines,a&&_.length&&(this._drawColorBox(e,t,y,f,i),d=Math.max(c.lineHeight,r)),v=0,w=_.length;v<w;++v)g(_[v]),d=c.lineHeight;m(b.after,g)}u=0,d=c.lineHeight,m(this.afterBody,g),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=ii(i.rtl,this.x,this.width);for(t.x=Kn(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=ce(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:h,height:l}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=he(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+h-d,r),e.quadraticCurveTo(a+h,r,a+h,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+h,r+l-f),e.quadraticCurveTo(a+h,r+l,a+h-f,r+l),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+l),e.quadraticCurveTo(a,r+l,a,r+l-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=jn[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=Yn(this,t),a=Object.assign({},i,this._size),r=Xn(e,t,a),h=qn(t,a,r,e);s._to===h.x&&n._to===h.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,h))}}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=le(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),si(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),ni(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map(({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}),n=!b(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!b(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=jn[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}Jn.positioners=jn;function Qn(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}class to extends Ws{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(h(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:J(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:Qn(i,t,f(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function eo(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:l,maxTicks:c,maxDigits:d,includeBounds:u}=t,f=n||1,g=c-1,{min:p,max:m}=e,b=!h(o),x=!h(a),_=!h(l),y=(m-p)/(d+1);let v,M,w,k,S=N((m-p)/g/f)*f;if(S<1e-14&&!b&&!x)return[{value:p},{value:m}];k=Math.ceil(m/S)-Math.floor(p/S),k>g&&(S=N(k*S/g/f)*f),h(r)||(v=Math.pow(10,r),S=Math.ceil(S*v)/v),"ticks"===s?(M=Math.floor(p/S)*S,w=Math.ceil(m/S)*S):(M=p,w=m),b&&x&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,S/1e3)?(k=Math.round(Math.min((a-o)/S,c)),S=(a-o)/k,M=o,w=a):_?(M=b?o:M,w=x?a:w,k=l-1,S=(w-M)/k):(k=(w-M)/S,k=W(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const P=Math.max(U(S),U(M));v=Math.pow(10,h(r)?P:r),M=Math.round(M*v)/v,w=Math.round(w*v)/v;let O=0;for(b&&(u&&M!==o?(i.push({value:o}),M<o&&O++,W(Math.round((M+O*S)*v)/v,o,io(o,y,t))&&O++):M<o&&O++);O<k;++O)i.push({value:Math.round((M+O*S)*v)/v});return x&&u&&w!==a?i.length&&W(i[i.length-1].value,a,io(a,y,t))?i[i.length-1].value=a:i.push({value:a}):x&&w!==a||i.push({value:w}),i}function io(t,e,{horizontal:i,minRotation:s}){const n=$(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}to.id="category",to.defaults={ticks:{callback:to.prototype.getLabelForValue}};class so extends Ws{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return h(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=B(s),e=B(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=1;(n>=Number.MAX_SAFE_INTEGER||s<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*n)),a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=eo({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&H(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return ei(t,this.chart.options.locale,this.options.ticks.format)}}class no extends so{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=d(t)?t:0,this.max=d(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=$(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function oo(t){return 1===t/Math.pow(10,Math.floor(V(t)))}no.id="linear",no.defaults={ticks:{callback:Ts.formatters.numeric}};class ao extends Ws{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=so.prototype.parse.apply(this,[t,e]);if(0!==i)return d(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=d(t)?Math.max(0,t):null,this.max=d(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t,a=(t,e)=>Math.pow(10,Math.floor(V(t))+e);i===s&&(i<=0?(n(1),o(10)):(n(a(i,-1)),o(a(s,1)))),i<=0&&n(a(s,-1)),s<=0&&o(a(i,1)),this._zero&&this.min!==this._suggestedMin&&i===a(this.min,0)&&n(a(i,-1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(V(e.max)),s=Math.ceil(e.max/Math.pow(10,i)),n=[];let o=u(t.min,Math.pow(10,Math.floor(V(e.min)))),a=Math.floor(V(o)),r=Math.floor(o/Math.pow(10,a)),h=a<0?Math.pow(10,Math.abs(a)):1;do{n.push({value:o,major:oo(o)}),++r,10===r&&(r=1,++a,h=a>=0?1:h),o=Math.round(r*Math.pow(10,a)*h)/h}while(a<i||a===i&&r<s);const l=u(t.max,o);return n.push({value:l,major:oo(o)}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&H(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":ei(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=V(t),this._valueRange=V(this.max)-V(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(V(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function ro(t){const e=t.ticks;if(e.display&&t.display){const t=le(e.backdropPadding);return f(e.font&&e.font.size,Ht.font.size)+t.height}return 0}function ho(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function lo(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?A/o:0;for(let u=0;u<o;u++){const o=a.setContext(t.getPointLabelContext(u));n[u]=o.padding;const f=t.getPointPosition(u,t.drawingArea+n[u],r),g=ce(o.font),p=(h=t.ctx,c=g,d=l(d=t._pointLabels[u])?d:[d],{w:Yt(h,c.string,d),h:d.length*c.lineHeight});s[u]=p;const m=G(t.getIndexAngle(u)+r),b=Math.round(Y(m));co(i,e,m,ho(b,f.x,p.w,0,180),ho(b,f.y,p.h,90,270))}var h,c,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,a=ro(o)/2,r=t.drawingArea,h=o.pointLabels.centerPointLabels?A/n:0;for(let o=0;o<n;o++){const n=t.getPointPosition(o,r+a+i[o],h),l=Math.round(Y(G(n.angle+I))),c=e[o],d=go(n.y,c.h,l),u=uo(l),f=fo(n.x,c.w,u);s.push({x:n.x,y:d,textAlign:u,left:f,top:d,right:f+c.w,bottom:d+c.h})}return s}(t,s,n)}function co(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,h=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(h=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-h)):n.end>e.b&&(h=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+h))}function uo(t){return 0===t||180===t?"center":t<180?"left":"right"}function fo(t,e,i){return"right"===i?t-=e:"center"===i&&(t-=e/2),t}function go(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function po(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,L);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}ao.id="logarithmic",ao.defaults={ticks:{callback:Ts.formatters.logarithmic,major:{enabled:!0}}};class mo extends so{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=le(ro(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=d(t)&&!isNaN(t)?t:0,this.max=d(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/ro(this.options))}generateTickLabels(t){so.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map((t,e)=>{const i=p(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""}).filter((t,e)=>this.chart.getDataVisibility(e))}fit(){const t=this.options;t.display&&t.pointLabels.display?lo(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return G(t*(L/(this._pointLabels.length||1))+$(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(h(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(h(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return ue(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-I+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),po(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s}=e,n=this._pointLabels.length;let o,a,r;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=s.setContext(t.getPointLabelContext(n)),o=ce(e.font),{x:a,y:r,textAlign:l,left:c,top:d,right:u,bottom:f}=t._pointLabelItems[n],{backdropColor:g}=e;if(!h(g)){const t=le(e.backdropPadding);i.fillStyle=g,i.fillRect(c-t.left,d-t.top,u-c+t.width,f-d+t.height)}te(i,t._pointLabels[n],a,r+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,n),s.display&&this.ticks.forEach((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value),function(t,e,i,s){const n=t.ctx,o=e.circular,{color:a,lineWidth:r}=e;!o&&!s||!a||!r||i<0||(n.save(),n.strokeStyle=a,n.lineWidth=r,n.setLineDash(e.borderDash),n.lineDashOffset=e.borderDashOffset,n.beginPath(),po(t,i,o,s),n.closePath(),n.stroke(),n.restore())}(this,s.setContext(this.getContext(e-1)),a,n)}}),i.display){for(t.save(),o=n-1;o>=0;o--){const s=i.setContext(this.getPointLabelContext(o)),{color:n,lineWidth:h}=s;h&&n&&(t.lineWidth=h,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),r=this.getPointPosition(o,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(r.x,r.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),h=ce(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=h.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=le(r.backdropPadding);t.fillRect(-o/2-e.left,-n-h.size/2-e.top,o+e.width,h.size+e.height)}te(t,s.label,0,-n,h,{color:r.color})}),t.restore()}drawTitle(){}}mo.id="radialLinear",mo.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Ts.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},mo.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},mo.descriptors={angleLines:{_fallback:"grid"}};const bo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},xo=Object.keys(bo);function _o(t,e){return t-e}function yo(t,e){if(h(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),d(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!j(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function vo(t,e,i,s){const n=xo.length;for(let o=xo.indexOf(t);o<n-1;++o){const t=bo[xo[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return xo[o]}return xo[n-1]}function Mo(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=fe(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function wo(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,h;for(r=o;r<=a;r=+n.add(r,1,s))h=i[r],h>=0&&(e[h].major=!0);return e}(t,s,n,i):s}class ko extends Ws{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),s=this._adapter=new Xi._date(t.adapters.date);M(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:yo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=d(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=d(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?vo(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=xo.length-1;o>=xo.indexOf(i);o--){const i=xo[o];if(bo[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return xo[i?xo.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=xo.indexOf(t)+1,i=xo.length;e<i;++e)if(bo[xo[e]].common)return xo[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),wo(this,o,this._majorUnit)}initOffsets(t){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=J(s,0,o),n=J(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||vo(n.minUnit,e,i,this._getLabelCapacity(e)),a=f(n.stepSize,1),r="week"===o&&n.isoWeekday,h=j(r)||!0===r,l={};let c,d,u=e;if(h&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,h?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const g="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)Mo(l,c,g);return c!==i&&"ticks"!==s.bounds&&1!==d||Mo(l,c,g),Object.keys(l).sort((t,e)=>t-e).map(t=>+t)}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.time.displayFormats,a=this._unit,r=this._majorUnit,h=a&&o[a],l=r&&o[r],c=i[e],d=r&&l&&c&&c.major,u=this._adapter.format(t,s||(d?l:h)),f=n.ticks.callback;return f?p(f,[u,e,i],this):u}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=$(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,wo(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(yo(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return xe(t.sort(_o))}}function So(t,e,i){let s,n,o,a,r=0,h=t.length-1;i?(e>=t[r].pos&&e<=t[h].pos&&({lo:r,hi:h}=ge(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[h])):(e>=t[r].time&&e<=t[h].time&&({lo:r,hi:h}=ge(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[h]));const l=n-s;return l?o+(a-o)*(e-s)/l:o}ko.id="time",ko.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Po extends ko{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=So(e,this.min),this._tableRange=So(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,h,l;for(o=0,a=t.length;o<a;++o)h=t[o],h>=e&&h<=i&&s.push(h);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)l=s[o+1],r=s[o-1],h=s[o],Math.round((l+r)/2)!==h&&n.push({time:h,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(So(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return So(this._table,i*this._tableRange+this._minPos,!0)}}Po.id="timeseries",Po.defaults=ko.defaults},408:function(t,e,i){"use strict";var s=i(32),n=i(54),o=i(76),a=i(12),r=i(409),h=[],l=h.sort,c=a((function(){h.sort(void 0)})),d=a((function(){h.sort(null)})),u=r("sort");s({target:"Array",proto:!0,forced:c||!d||!u},{sort:function(t){return void 0===t?l.call(o(this)):l.call(o(this),n(t))}})},409:function(t,e,i){"use strict";var s=i(12);t.exports=function(t,e){var i=[][t];return!!i&&s((function(){i.call(null,e||function(){throw 1},1)}))}},410:function(t,e,i){var s=i(28);t.exports=function(t){if("number"!=typeof t&&"Number"!=s(t))throw TypeError("Incorrect invocation");return+t}},411:function(t,e,i){"use strict";var s=i(47),n=i(30);t.exports="".repeat||function(t){var e=String(n(this)),i="",o=s(t);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(i+=e);return i}},412:function(t,e,i){"use strict";i.d(e,"a",(function(){return f}));var s=i(0),n=i.n(s),o=i(388);function a(t,e){"function"==typeof t?t(e):t&&(t.current=e)}function r(t,e){t.labels=e}function h(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"label";const s=[];t.datasets=e.map(e=>{const n=t.datasets.find(t=>t[i]===e[i]);return n&&e.data&&!s.includes(n)?(s.push(n),Object.assign(n,e),n):{...e}})}function l(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"label";const i={labels:[],datasets:[]};return r(i,t.labels),h(i,t.datasets,e),i}function c(t,e){let{height:i=150,width:c=300,redraw:d=!1,datasetIdKey:u,type:f,data:g,options:p,plugins:m=[],fallbackContent:b,...x}=t;const _=Object(s.useRef)(null),y=Object(s.useRef)(),v=()=>{_.current&&(y.current=new o.d(_.current,{type:f,data:l(g,u),options:p,plugins:m}),a(e,y.current))},M=()=>{a(e,null),y.current&&(y.current.destroy(),y.current=null)};return Object(s.useEffect)(()=>{var t,e;!d&&y.current&&p&&(t=y.current,e=p,t.options={...e})},[d,p]),Object(s.useEffect)(()=>{!d&&y.current&&r(y.current.config.data,g.labels)},[d,g.labels]),Object(s.useEffect)(()=>{!d&&y.current&&g.datasets&&h(y.current.config.data,g.datasets,u)},[d,g.datasets]),Object(s.useEffect)(()=>{y.current&&(d?(M(),setTimeout(v)):y.current.update())},[d,p,g.labels,g.datasets]),Object(s.useEffect)(()=>(v(),()=>M()),[]),n.a.createElement("canvas",Object.assign({ref:_,role:"img",height:i,width:c},x),b)}const d=Object(s.forwardRef)(c);function u(t,e){return o.d.register(e),Object(s.forwardRef)((e,i)=>n.a.createElement(d,Object.assign({},e,{ref:i,type:t})))}o.f,o.b,o.i;const f=u("doughnut",o.e);o.h,o.c,o.g,o.j}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NoYXJ0LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jaGFydGpzLTIvZGlzdC9pbmRleC5qcyJdLCJuYW1lcyI6WyIkIiwidG9JbnRlZ2VyIiwidGhpc051bWJlclZhbHVlIiwicmVwZWF0IiwiZmFpbHMiLCJuYXRpdmVUb0ZpeGVkIiwidG9GaXhlZCIsImZsb29yIiwiTWF0aCIsInBvdyIsIngiLCJuIiwiYWNjIiwidGFyZ2V0IiwicHJvdG8iLCJmb3JjZWQiLCJjYWxsIiwiZnJhY3Rpb25EaWdpdHMiLCJlIiwieiIsImoiLCJrIiwibnVtYmVyIiwidGhpcyIsImZyYWN0RGlnaXRzIiwiZGF0YSIsInNpZ24iLCJyZXN1bHQiLCJtdWx0aXBseSIsImMiLCJpbmRleCIsImMyIiwiZGl2aWRlIiwiZGF0YVRvU3RyaW5nIiwicyIsInQiLCJTdHJpbmciLCJsZW5ndGgiLCJSYW5nZUVycm9yIiwieDIiLCJsb2ciLCJzbGljZSIsInJlcXVlc3RBbmltRnJhbWUiLCJ3aW5kb3ciLCJjYWxsYmFjayIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRocm90dGxlZCIsImZuIiwidGhpc0FyZyIsInVwZGF0ZUZuIiwidXBkYXRlQXJncyIsImFyZ3MiLCJBcnJheSIsInByb3RvdHlwZSIsInRpY2tpbmciLCJyZXN0IiwiYXBwbHkiLCJfdG9MZWZ0UmlnaHRDZW50ZXIiLCJhbGlnbiIsIl9hbGlnblN0YXJ0RW5kIiwic3RhcnQiLCJlbmQiLCJ1aWQiLCJpZCIsImlzTnVsbE9yVW5kZWYiLCJ2YWx1ZSIsImlzQXJyYXkiLCJ0eXBlIiwiT2JqZWN0IiwidG9TdHJpbmciLCJzdWJzdHIiLCJpc09iamVjdCIsImlzTnVtYmVyRmluaXRlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmaW5pdGVPckRlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZU9yRGVmYXVsdCIsInRvRGltZW5zaW9uIiwiZGltZW5zaW9uIiwiZW5kc1dpdGgiLCJwYXJzZUZsb2F0IiwiZWFjaCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsImkiLCJsZW4iLCJrZXlzIiwiX2VsZW1lbnRzRXF1YWwiLCJhMCIsImExIiwiaWxlbiIsInYwIiwidjEiLCJkYXRhc2V0SW5kZXgiLCJjbG9uZSQxIiwic291cmNlIiwibWFwIiwiY3JlYXRlIiwia2xlbiIsImlzVmFsaWRLZXkiLCJrZXkiLCJpbmRleE9mIiwiX21lcmdlciIsIm9wdGlvbnMiLCJ0dmFsIiwic3ZhbCIsIm1lcmdlIiwic291cmNlcyIsIm1lcmdlciIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJoYXNPd25Qcm9wZXJ0eSIsImluZGV4T2ZEb3RPckxlbmd0aCIsImlkeCIsInJlc29sdmVPYmplY3RLZXkiLCJvYmoiLCJwb3MiLCJfY2FwaXRhbGl6ZSIsInN0ciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiZGVmaW5lZCIsImlzRnVuY3Rpb24iLCJzZXRzRXF1YWwiLCJhIiwiYiIsInNpemUiLCJpdGVtIiwiaGFzIiwiUEkiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwibmljZU51bSIsInJhbmdlIiwicm91bmRlZFJhbmdlIiwicm91bmQiLCJhbG1vc3RFcXVhbHMiLCJuaWNlUmFuZ2UiLCJmcmFjdGlvbiIsImlzTnVtYmVyIiwiaXNOYU4iLCJ5IiwiZXBzaWxvbiIsImFicyIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJtaW4iLCJtYXgiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwicCIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJzcXJ0IiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwicHQxIiwicHQyIiwiX2FuZ2xlRGlmZiIsIl9ub3JtYWxpemVBbmdsZSIsIl9hbmdsZUJldHdlZW4iLCJzYW1lQW5nbGVJc0Z1bGxDaXJjbGUiLCJhbmdsZVRvU3RhcnQiLCJhbmdsZVRvRW5kIiwic3RhcnRUb0FuZ2xlIiwiZW5kVG9BbmdsZSIsIl9saW1pdFZhbHVlIiwiX2lzQmV0d2VlbiIsImF0RWRnZSIsImVsYXN0aWNJbiIsInNpbiIsImVsYXN0aWNPdXQiLCJlZmZlY3RzIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJjb3MiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJtIiwiZCIsImVhc2VJbk91dEJvdW5jZSIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJmIiwiaGV4IiwiaDEiLCJoMiIsImVxIiwiaGV4U3RyaW5nIiwidiIsInIiLCJnIiwiaXNTaG9ydCIsImxpbSIsImwiLCJoIiwicDJiIiwibjJiIiwiYjJuIiwibjJwIiwiUkdCX1JFIiwiSFVFX1JFIiwiaHNsMnJnYm4iLCJoc3YycmdibiIsImh3YjJyZ2JuIiwidyIsInJnYiIsInJnYjJoc2wiLCJjYWxsbiIsImhzbDJyZ2IiLCJodWUiLCJodWVQYXJzZSIsImV4ZWMiLCJwMSIsInAyIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJtYXAkMSIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwiT2ljZVhlIiwiYW50aXF1ZXdFdGUiLCJhcXVhIiwiYXF1YW1hclJlIiwiYXp1WSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuS2VkT21vbmQiLCJYZSIsIlhldmlUZXQiLCJiUHduIiwiYnVybHl3b29kIiwiY2FNdFhlIiwiS2FydFl1c2UiLCJLb2NUYXRlIiwiY1NPIiwiY1NuZmxvd2VyWGUiLCJjU25zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJ4WGUiLCJ4Y3lhbiIsInhnVE1uUGQiLCJ4V2F5IiwieGdZRiIsInhnWXkiLCJ4a2hha2kiLCJ4bWFnRnRhIiwieFRpdmVnWUYiLCJ4U2FuZ2UiLCJ4U2NFZCIsInhZZCIsInhzT21vbiIsInhzSGdZRiIsInhVWGUiLCJ4VVdheSIsInhVZ1l5IiwieFFlIiwieHZpVGV0IiwiZEFwcFJrIiwiZEFwc2t5WGUiLCJkaW1XYXkiLCJkaW1nWXkiLCJkb2RnZXJYZSIsImZpWWJyaWNrIiwiZmxTT3dFdGUiLCJmb1lzdFdBbiIsImZ1S3NpYSIsImdhUnNiU28iLCJnaG9zdHdFdGUiLCJnVGQiLCJnVE1uUGQiLCJXYXkiLCJnWUYiLCJnWUZMdyIsImdZeSIsImhvbmV5TXciLCJob3RwUmsiLCJSZGlhbllkIiwiUmRpZ28iLCJpdlN5Iiwia2hha2kiLCJsYXZGTXIiLCJsYXZGTXJYc2giLCJsYXduZ1lGIiwiTm1vbmNFZmZvbiIsIlpYZSIsIlpjU08iLCJaY3lhbiIsIlpnVE1uUGRMdyIsIlpXYXkiLCJaZ1lGIiwiWmdZeSIsIlpwUmsiLCJac09tb24iLCJac0hnWUYiLCJac2t5WGUiLCJaVVdheSIsIlpVZ1l5IiwiWnN0QWxYZSIsIlpMdyIsImxpbWUiLCJsaW1lZ1lGIiwibFJGIiwibWFnRnRhIiwibWFQb24iLCJWYXF1YW1hclJlIiwiVlhlIiwiVlNjRWQiLCJWcHVycE4iLCJWc0hnWUYiLCJWVVhlIiwiVnNwclJnZ1lGIiwiVlFlIiwiVnZpVGV0WWQiLCJtaWRuaWdodFhlIiwibVJ0Y1lhbSIsIm1pc3R5UHNlIiwibW9jY2FzUiIsIm5hdmFqb3dFdGUiLCJuYXZ5IiwiVGRsYWNlIiwiVGl2ZSIsIlRpdmVkQmIiLCJTYW5nZSIsIlNhbmdlWWQiLCJTY0VkIiwicE9lZ1RNblBkIiwicE9lZ1lGIiwicE9lUWUiLCJwT2V2aVRldFlkIiwicGFwYXlhd0VwIiwicEhLcHVmZiIsInBlcnUiLCJwUmsiLCJwbHVtIiwicG93TXJYZSIsInB1cnBOIiwiWWJlY2NhcHVycE4iLCJZZCIsIlBzeWJyb3duIiwiUHlPWGUiLCJzYWRkTmJQd24iLCJzT21vbiIsInNhbmR5YlB3biIsInNIZ1lGIiwic0hzaGVsbCIsInNpRm5hIiwic2lsdmVyIiwic2t5WGUiLCJVWGUiLCJVV2F5IiwiVWdZeSIsInNub3ciLCJzcHJSZ2dZRiIsInN0QWxYZSIsInRhbiIsInRlTyIsInRFc3ROIiwidG9tYXRvIiwiUWUiLCJ2aVRldCIsIkpIdCIsIndFdGUiLCJ3RXRlc21va2UiLCJMdyIsIkx3Z1lGIiwibmFtZXMkMSIsIm5hbWVQYXJzZSIsInVucGFja2VkIiwidGtleXMiLCJvayIsIm5rIiwicmVwbGFjZSIsInBhcnNlSW50IiwidW5wYWNrIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIm1vZEhTTCIsInJhdGlvIiwidG1wIiwiY2xvbmUiLCJhc3NpZ24iLCJmcm9tT2JqZWN0IiwiaW5wdXQiLCJmdW5jdGlvblBhcnNlIiwicmdiUGFyc2UiLCJDb2xvciIsInJldCIsIl9yZ2IiLCJfdmFsaWQiLCJoc2xTdHJpbmciLCJjb2xvciIsIndlaWdodCIsIm1lIiwiYzEiLCJ3MiIsIncxIiwidmFsIiwiZGVnIiwicm90YXRlIiwiaW5kZXhfZXNtIiwiaXNQYXR0ZXJuT3JHcmFkaWVudCIsIkNhbnZhc0dyYWRpZW50IiwiQ2FudmFzUGF0dGVybiIsImdldEhvdmVyQ29sb3IiLCJzYXR1cmF0ZSIsImRhcmtlbiIsIm92ZXJyaWRlcyIsImdldFNjb3BlJDEiLCJub2RlIiwic3BsaXQiLCJyb290Iiwic2NvcGUiLCJ2YWx1ZXMiLCJkZWZhdWx0cyIsIl9kZXNjcmlwdG9ycyIsImFuaW1hdGlvbiIsInVuZGVmaW5lZCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiZGF0YXNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwiY29udGV4dCIsImNoYXJ0IiwicGxhdGZvcm0iLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwiZWxlbWVudHMiLCJldmVudHMiLCJmb250IiwiZmFtaWx5Iiwic3R5bGUiLCJsaW5lSGVpZ2h0IiwiaG92ZXIiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImN0eCIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckNvbG9yIiwiaW5kZXhBeGlzIiwiaW50ZXJhY3Rpb24iLCJtb2RlIiwiaW50ZXJzZWN0IiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsIm9uSG92ZXIiLCJvbkNsaWNrIiwicGFyc2luZyIsInBsdWdpbnMiLCJyZXNwb25zaXZlIiwic2NhbGUiLCJzY2FsZXMiLCJzaG93TGluZSIsImRyYXdBY3RpdmVFbGVtZW50c09uVG9wIiwiZGVzY3JpYmUiLCJuYW1lIiwidGFyZ2V0U2NvcGUiLCJ0YXJnZXROYW1lIiwic2NvcGVPYmplY3QiLCJ0YXJnZXRTY29wZU9iamVjdCIsInByaXZhdGVOYW1lIiwiZGVmaW5lUHJvcGVydGllcyIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImxvY2FsIiwiX3NjcmlwdGFibGUiLCJzdGFydHNXaXRoIiwiX2luZGV4YWJsZSIsIl9mYWxsYmFjayIsIl9tZWFzdXJlVGV4dCIsImdjIiwibG9uZ2VzdCIsInN0cmluZyIsInRleHRXaWR0aCIsIm1lYXN1cmVUZXh0Iiwid2lkdGgiLCJwdXNoIiwiX2xvbmdlc3RUZXh0IiwiYXJyYXlPZlRoaW5ncyIsImNhY2hlIiwiZ2FyYmFnZUNvbGxlY3QiLCJzYXZlIiwiamxlbiIsInRoaW5nIiwibmVzdGVkVGhpbmciLCJyZXN0b3JlIiwiZ2NMZW4iLCJzcGxpY2UiLCJfYWxpZ25QaXhlbCIsInBpeGVsIiwiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJoYWxmV2lkdGgiLCJjbGVhckNhbnZhcyIsImNhbnZhcyIsImdldENvbnRleHQiLCJyZXNldFRyYW5zZm9ybSIsImNsZWFyUmVjdCIsImhlaWdodCIsImRyYXdQb2ludCIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwiY29ybmVyUmFkaXVzIiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwicmFkIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiYXJjIiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwiU1FSVDFfMiIsInJlY3QiLCJmaWxsIiwiYm9yZGVyV2lkdGgiLCJzdHJva2UiLCJfaXNQb2ludEluQXJlYSIsInBvaW50IiwiYXJlYSIsIm1hcmdpbiIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImNsaXBBcmVhIiwiY2xpcCIsInVuY2xpcEFyZWEiLCJfc3RlcHBlZExpbmVUbyIsInByZXZpb3VzIiwiZmxpcCIsIm1pZHBvaW50IiwiX2JlemllckN1cnZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY3AxeCIsImNwMngiLCJjcDF5IiwiY3AyeSIsInJlbmRlclRleHQiLCJ0ZXh0Iiwib3B0cyIsImxpbmVzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VDb2xvciIsImxpbmUiLCJ0cmFuc2xhdGlvbiIsImZpbGxTdHlsZSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInNldFJlbmRlck9wdHMiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZVRleHQiLCJtYXhXaWR0aCIsImZpbGxUZXh0IiwiZGVjb3JhdGVUZXh0Iiwic3RyaWtldGhyb3VnaCIsInVuZGVybGluZSIsIm1ldHJpY3MiLCJhY3R1YWxCb3VuZGluZ0JveExlZnQiLCJhY3R1YWxCb3VuZGluZ0JveFJpZ2h0IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJ5RGVjb3JhdGlvbiIsImRlY29yYXRpb25XaWR0aCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiUmVnRXhwIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJwcm9wIiwidG9UUkJMIiwidG9UUkJMQ29ybmVycyIsInRvUGFkZGluZyIsInRvRm9udCIsImZhbGxiYWNrIiwiY29uc29sZSIsIndhcm4iLCJ0b0ZvbnRTdHJpbmciLCJyZXNvbHZlIiwiaW5wdXRzIiwiaW5mbyIsImNhY2hlYWJsZSIsImNyZWF0ZUNvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiX2xvb2t1cCIsInRhYmxlIiwiY21wIiwibWlkIiwiaGkiLCJsbyIsIl9sb29rdXBCeUtleSIsIl9ybG9va3VwQnlLZXkiLCJhcnJheUV2ZW50cyIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsInN0dWIiLCJfY2hhcnRqcyIsImxpc3RlbmVycyIsImZvckVhY2giLCJfYXJyYXlVbmlxdWUiLCJpdGVtcyIsInNldCIsIlNldCIsImFkZCIsImZyb20iLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJnZXRUYXJnZXQiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJvdmVycmlkZSIsIlByb3h5IiwiZGVsZXRlUHJvcGVydHkiLCJfa2V5cyIsImdldCIsIl9jYWNoZWQiLCJwcm94eSIsInByZWZpeCIsInJlYWRLZXkiLCJuZWVkc1N1YlJlc29sdmVyIiwiY3JlYXRlU3ViUmVzb2x2ZXIiLCJfcmVzb2x2ZVdpdGhQcmVmaXhlcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJnZXRQcm90b3R5cGVPZiIsImdldEtleXNGcm9tQWxsU2NvcGVzIiwiaW5jbHVkZXMiLCJvd25LZXlzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiX2F0dGFjaENvbnRleHQiLCJzdWJQcm94eSIsImRlc2NyaXB0b3JEZWZhdWx0cyIsIl9wcm94eSIsIl9jb250ZXh0IiwiX3N1YlByb3h5IiwiX3N0YWNrIiwic2V0Q29udGV4dCIsInJlY2VpdmVyIiwiZGVzY3JpcHRvcnMiLCJpc1NjcmlwdGFibGUiLCJFcnJvciIsImpvaW4iLCJkZWxldGUiLCJfcmVzb2x2ZVNjcmlwdGFibGUiLCJpc0luZGV4YWJsZSIsImFyciIsImZpbHRlciIsInJlc29sdmVyIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwiY29uZmlndXJhYmxlIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwiY29uc3RydWN0b3IiLCJyZXNvbHZlRmFsbGJhY2siLCJnZXRTY29wZSIsInBhcmVudCIsImFkZFNjb3BlcyIsInBhcmVudFNjb3BlcyIsInBhcmVudEZhbGxiYWNrIiwiYWxsU2NvcGVzIiwiYWRkU2NvcGVzRnJvbUtleSIsInN1YkdldFRhcmdldCIsInJlc29sdmVLZXlzRnJvbUFsbFNjb3BlcyIsIkVQU0lMT04iLCJnZXRQb2ludCIsInBvaW50cyIsInNraXAiLCJnZXRWYWx1ZUF4aXMiLCJzcGxpbmVDdXJ2ZSIsImZpcnN0UG9pbnQiLCJtaWRkbGVQb2ludCIsImFmdGVyUG9pbnQiLCJjdXJyZW50IiwibmV4dCIsImQwMSIsImQxMiIsInMwMSIsInMxMiIsImZhIiwiZmIiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwidmFsdWVBeGlzIiwicG9pbnRzTGVuIiwiZGVsdGFLIiwibUsiLCJwb2ludEJlZm9yZSIsInBvaW50Q3VycmVudCIsInBvaW50QWZ0ZXIiLCJzbG9wZURlbHRhIiwiYWxwaGFLIiwiYmV0YUsiLCJ0YXVLIiwic3F1YXJlZE1hZ25pdHVkZSIsIm1vbm90b25lQWRqdXN0IiwiZGVsdGEiLCJpUGl4ZWwiLCJ2UGl4ZWwiLCJtb25vdG9uZUNvbXB1dGUiLCJjYXBDb250cm9sUG9pbnQiLCJwdCIsIl91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIiwibG9vcCIsImNvbnRyb2xQb2ludHMiLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJwcmV2IiwidGVuc2lvbiIsImNhcEJlemllclBvaW50cyIsImluQXJlYSIsImluQXJlYVByZXYiLCJpbkFyZWFOZXh0IiwiX2lzRG9tU3VwcG9ydGVkIiwiZG9jdW1lbnQiLCJfZ2V0UGFyZW50Tm9kZSIsImRvbU5vZGUiLCJwYXJlbnROb2RlIiwiaG9zdCIsInBhcnNlTWF4U3R5bGUiLCJzdHlsZVZhbHVlIiwicGFyZW50UHJvcGVydHkiLCJ2YWx1ZUluUGl4ZWxzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsZW1lbnQiLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbmVkU3R5bGUiLCJzdHlsZXMiLCJzdWZmaXgiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwiZXZ0IiwiYm9yZGVyQm94IiwiYm94U2l6aW5nIiwicGFkZGluZ3MiLCJib3JkZXJzIiwiYm94IiwibmF0aXZlIiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwic2hhZG93Um9vdCIsInVzZU9mZnNldFBvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJjbGllbnRZIiwiZ2V0Q2FudmFzUG9zaXRpb24iLCJyb3VuZDEiLCJnZXRNYXhpbXVtU2l6ZSIsImJiV2lkdGgiLCJiYkhlaWdodCIsImFzcGVjdFJhdGlvIiwibWFyZ2lucyIsIm1heEhlaWdodCIsImNvbnRhaW5lclNpemUiLCJjb250YWluZXIiLCJjb250YWluZXJTdHlsZSIsImNvbnRhaW5lckJvcmRlciIsImNvbnRhaW5lclBhZGRpbmciLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbnRhaW5lclNpemUiLCJyZXRpbmFTY2FsZSIsImZvcmNlUmF0aW8iLCJmb3JjZVN0eWxlIiwicGl4ZWxSYXRpbyIsImRldmljZUhlaWdodCIsImRldmljZVdpZHRoIiwic2V0VHJhbnNmb3JtIiwic3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyIsInBhc3NpdmVTdXBwb3J0ZWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWRVc2VkU2l6ZSIsImVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFN0eWxlIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJjcDEiLCJjcDIiLCJpbnRsQ2FjaGUiLCJNYXAiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJsb2NhbGUiLCJjYWNoZUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtYXR0ZXIiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZ2V0TnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiZ2V0UnRsQWRhcHRlciIsInJ0bCIsInJlY3RYIiwieFBsdXMiLCJsZWZ0Rm9yTHRyIiwiaXRlbVdpZHRoIiwiZ2V0UmlnaHRUb0xlZnRBZGFwdGVyIiwiX2l0ZW1XaWR0aCIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInNldFByb3BlcnR5IiwicHJldlRleHREaXJlY3Rpb24iLCJyZXN0b3JlVGV4dERpcmVjdGlvbiIsInByb3BlcnR5Rm4iLCJiZXR3ZWVuIiwiY29tcGFyZSIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZVNlZ21lbnQiLCJjb3VudCIsIl9ib3VuZFNlZ21lbnQiLCJzZWdtZW50IiwiYm91bmRzIiwic3RhcnRCb3VuZCIsImVuZEJvdW5kIiwiZ2V0U2VnbWVudCIsInByZXZWYWx1ZSIsImluc2lkZSIsInN1YlN0YXJ0Iiwic2hvdWxkU3RhcnQiLCJzaG91bGRTdG9wIiwiX2JvdW5kU2VnbWVudHMiLCJzZWdtZW50cyIsInN1YiIsInNwbGl0QnlTdHlsZXMiLCJzZWdtZW50T3B0aW9ucyIsImNoYXJ0Q29udGV4dCIsIl9jaGFydCIsImJhc2VTdHlsZSIsInJlYWRTdHlsZSIsIl9kYXRhc2V0SW5kZXgiLCJwcmV2U3R5bGUiLCJhZGRTdHlsZSIsInN0IiwiZGlyIiwicDAiLCJwMERhdGFJbmRleCIsInAxRGF0YUluZGV4Iiwic3R5bGVDaGFuZ2VkIiwiZG9TcGxpdEJ5U3R5bGVzIiwiYm9yZGVyQ2FwU3R5bGUiLCJib3JkZXJEYXNoIiwiYm9yZGVyRGFzaE9mZnNldCIsImJvcmRlckpvaW5TdHlsZSIsImFuaW1hdG9yIiwiX3JlcXVlc3QiLCJfY2hhcnRzIiwiX3J1bm5pbmciLCJfbGFzdERhdGUiLCJhbmltcyIsImRhdGUiLCJjYWxsYmFja3MiLCJudW1TdGVwcyIsImR1cmF0aW9uIiwiaW5pdGlhbCIsImN1cnJlbnRTdGVwIiwiX3VwZGF0ZSIsIl9yZWZyZXNoIiwiRGF0ZSIsIm5vdyIsInJlbWFpbmluZyIsInJ1bm5pbmciLCJkcmF3IiwiX2FjdGl2ZSIsIl90b3RhbCIsInRpY2siLCJwb3AiLCJfbm90aWZ5IiwiY2hhcnRzIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsImV2ZW50IiwiY2IiLCJfZ2V0QW5pbXMiLCJyZWR1Y2UiLCJjdXIiLCJfZHVyYXRpb24iLCJjYW5jZWwiLCJpbnRlcnBvbGF0b3JzIiwiYm9vbGVhbiIsInRvIiwiZmFjdG9yIiwiYzAiLCJ2YWxpZCIsIm1peCIsImNmZyIsImN1cnJlbnRWYWx1ZSIsIl9mbiIsIl9lYXNpbmciLCJlYXNpbmciLCJfc3RhcnQiLCJkZWxheSIsIl9sb29wIiwiX3RhcmdldCIsIl9wcm9wIiwiX2Zyb20iLCJfdG8iLCJfcHJvbWlzZXMiLCJlbGFwc2VkIiwicmVtYWluIiwicHJvbWlzZXMiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzb2x2ZWQiLCJtZXRob2QiLCJjb2xvcnMiLCJwcm9wZXJ0aWVzIiwibnVtYmVycyIsImFjdGl2ZSIsInJlc2l6ZSIsInNob3ciLCJhbmltYXRpb25zIiwidmlzaWJsZSIsImhpZGUiLCJjb25maWciLCJfcHJvcGVydGllcyIsImNvbmZpZ3VyZSIsImFuaW1hdGVkUHJvcHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib3B0aW9uIiwibmV3T3B0aW9ucyIsIiRzaGFyZWQiLCIkYW5pbWF0aW9ucyIsInJlc29sdmVUYXJnZXRPcHRpb25zIiwiX2NyZWF0ZUFuaW1hdGlvbnMiLCJhbmltIiwid2FpdCIsImFsbCIsImF3YWl0QWxsIiwidGhlbiIsIl9hbmltYXRlT3B0aW9ucyIsInVwZGF0ZSIsInNjYWxlQ2xpcCIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImFwcGx5U3RhY2siLCJzdGFjayIsImRzSW5kZXgiLCJzaW5nbGVNb2RlIiwib3RoZXJWYWx1ZSIsImlzU3RhY2tlZCIsIm1ldGEiLCJzdGFja2VkIiwiZ2V0T3JDcmVhdGVTdGFjayIsInN0YWNrcyIsInN0YWNrS2V5IiwiaW5kZXhWYWx1ZSIsInN1YlN0YWNrIiwiZ2V0TGFzdEluZGV4SW5TdGFjayIsInZTY2FsZSIsInBvc2l0aXZlIiwiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCJ1cGRhdGVTdGFja3MiLCJjb250cm9sbGVyIiwicGFyc2VkIiwiX2NhY2hlZE1ldGEiLCJfc3RhY2tzIiwiaVNjYWxlIiwiaUF4aXMiLCJheGlzIiwidkF4aXMiLCJpbmRleFNjYWxlIiwidmFsdWVTY2FsZSIsImdldFN0YWNrS2V5IiwiX3RvcCIsIl9ib3R0b20iLCJnZXRGaXJzdFNjYWxlSWQiLCJzaGlmdCIsImNsZWFyU3RhY2tzIiwiX3BhcnNlZCIsImlzRGlyZWN0VXBkYXRlTW9kZSIsImNsb25lSWZOb3RTaGFyZWQiLCJjYWNoZWQiLCJzaGFyZWQiLCJfY3R4IiwiX2NhY2hlZERhdGFPcHRzIiwiZ2V0TWV0YSIsIl90eXBlIiwiX3BhcnNpbmciLCJfZGF0YSIsIl9vYmplY3REYXRhIiwiX3NoYXJlZE9wdGlvbnMiLCJfZHJhd1N0YXJ0IiwiX2RyYXdDb3VudCIsImVuYWJsZU9wdGlvblNoYXJpbmciLCIkY29udGV4dCIsIl9zeW5jTGlzdCIsImluaXRpYWxpemUiLCJsaW5rU2NhbGVzIiwiX3N0YWNrZWQiLCJhZGRFbGVtZW50cyIsImRhdGFzZXQiLCJnZXREYXRhc2V0IiwiY2hvb3NlSWQiLCJ4aWQiLCJ4QXhpc0lEIiwieWlkIiwieUF4aXNJRCIsInJpZCIsInJBeGlzSUQiLCJpaWQiLCJpQXhpc0lEIiwidmlkIiwidkF4aXNJRCIsInhTY2FsZSIsImdldFNjYWxlRm9ySWQiLCJ5U2NhbGUiLCJyU2NhbGUiLCJnZXREYXRhc2V0TWV0YSIsInNjYWxlSUQiLCJhZGF0YSIsImNvbnZlcnRPYmplY3REYXRhVG9BcnJheSIsImlzRXh0ZW5zaWJsZSIsImRlZmluZVByb3BlcnR5IiwiYmFzZSIsIm9iamVjdCIsIl9kYXRhQ2hlY2siLCJkYXRhc2V0RWxlbWVudFR5cGUiLCJyZXNldE5ld0VsZW1lbnRzIiwic3RhY2tDaGFuZ2VkIiwib2xkU3RhY2tlZCIsIl9yZXN5bmNFbGVtZW50cyIsInNjb3BlS2V5cyIsImRhdGFzZXRTY29wZUtleXMiLCJnZXRPcHRpb25TY29wZXMiLCJjcmVhdGVSZXNvbHZlciIsInNvcnRlZCIsIl9zb3J0ZWQiLCJwYXJzZUFycmF5RGF0YSIsInBhcnNlT2JqZWN0RGF0YSIsInBhcnNlUHJpbWl0aXZlRGF0YSIsImlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2IiwibGFiZWxzIiwiZ2V0TGFiZWxzIiwic2luZ2xlU2NhbGUiLCJwYXJzZSIsInhBeGlzS2V5IiwieUF4aXNLZXkiLCJwYXJzZWRWYWx1ZSIsIk5hTiIsImNhblN0YWNrIiwib3RoZXJTY2FsZSIsIl9nZXRPdGhlclNjYWxlIiwiaGlkZGVuIiwiY3JlYXRlU3RhY2siLCJORUdBVElWRV9JTkZJTklUWSIsIm90aGVyTWluIiwib3RoZXJNYXgiLCJtaW5EZWZpbmVkIiwibWF4RGVmaW5lZCIsImdldFVzZXJCb3VuZHMiLCJfc2tpcCIsInVwZGF0ZVJhbmdlRnJvbVBhcnNlZCIsImdldFBhcnNlZCIsImxhYmVsIiwiZ2V0TGFiZWxGb3JWYWx1ZSIsIl9jbGlwIiwiZGlzYWJsZWQiLCJ0b0NsaXAiLCJkZWZhdWx0Q2xpcCIsImdldE1heE92ZXJmbG93IiwiY2hhcnRBcmVhIiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJyYXciLCJjcmVhdGVEYXRhQ29udGV4dCIsImNyZWF0ZURhdGFzZXRDb250ZXh0IiwiX3Jlc29sdmVFbGVtZW50T3B0aW9ucyIsImRhdGFFbGVtZW50VHlwZSIsImVsZW1lbnRUeXBlIiwic2hhcmluZyIsImRhdGFzZXRFbGVtZW50U2NvcGVLZXlzIiwibmFtZXMiLCJyZXNvbHZlTmFtZWRPcHRpb25zIiwiZnJlZXplIiwidHJhbnNpdGlvbiIsImRhdGFzZXRBbmltYXRpb25TY29wZUtleXMiLCJzaGFyZWRPcHRpb25zIiwiX2FuaW1hdGlvbnNEaXNhYmxlZCIsIl9yZXNvbHZlQW5pbWF0aW9ucyIsImdldFNoYXJlZE9wdGlvbnMiLCJfc2V0U3R5bGUiLCJhcmcxIiwiYXJnMiIsIm51bU1ldGEiLCJudW1EYXRhIiwiX2luc2VydEVsZW1lbnRzIiwiX3JlbW92ZUVsZW1lbnRzIiwibW92ZSIsInVwZGF0ZUVsZW1lbnRzIiwicmVtb3ZlZCIsIl9kYXRhQ2hhbmdlcyIsImFyZ3VtZW50cyIsIl9zeW5jIiwibmV3Q291bnQiLCJjb21wdXRlTWluU2FtcGxlU2l6ZSIsIl9jYWNoZSIsIiRiYXIiLCJ2aXNpYmxlTWV0YXMiLCJjb25jYXQiLCJnZXRBbGxQYXJzZWRWYWx1ZXMiLCJzb3J0IiwiZ2V0QWxsU2NhbGVWYWx1ZXMiLCJjdXJyIiwiX2xlbmd0aCIsInVwZGF0ZU1pbkFuZFByZXYiLCJnZXRQaXhlbEZvclZhbHVlIiwidGlja3MiLCJnZXRQaXhlbEZvclRpY2siLCJwYXJzZVZhbHVlIiwiZW50cnkiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJiYXJTdGFydCIsImJhckVuZCIsIl9jdXN0b20iLCJwYXJzZUZsb2F0QmFyIiwicGFyc2VBcnJheU9yUHJpbWl0aXZlIiwiaXNGbG9hdEJhciIsImN1c3RvbSIsInNldEJvcmRlclNraXBwZWQiLCJlZGdlIiwiYm9yZGVyU2tpcHBlZCIsImhvcml6b250YWwiLCJib3JkZXJQcm9wcyIsImVuYWJsZUJvcmRlclJhZGl1cyIsInBhcnNlRWRnZSIsIm9yaWciLCJ2MiIsInN0YXJ0RW5kIiwic2V0SW5mbGF0ZUFtb3VudCIsImluZmxhdGVBbW91bnQiLCJpQXhpc0tleSIsInZBeGlzS2V5Iiwic3VwZXIiLCJiYXJzIiwicmVzZXQiLCJnZXRCYXNlUGl4ZWwiLCJpc0hvcml6b250YWwiLCJydWxlciIsIl9nZXRSdWxlciIsImZpcnN0T3B0cyIsImluY2x1ZGVPcHRpb25zIiwidXBkYXRlU2hhcmVkT3B0aW9ucyIsInZwaXhlbHMiLCJoZWFkIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsInVwZGF0ZUVsZW1lbnQiLCJsYXN0IiwiZ3JvdXBlZCIsIl9nZXRTdGFja3MiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJfZ2V0U3RhY2tDb3VudCIsImNhdGVnb3J5UGVyY2VudGFnZSIsImJhclBlcmNlbnRhZ2UiLCJiYXNlVmFsdWUiLCJtaW5CYXJMZW5ndGgiLCJhY3R1YWxCYXNlIiwiZmxvYXRpbmciLCJnZXREYXRhVmlzaWJpbGl0eSIsImJhclNpZ24iLCJoYWxmR3JpZCIsImdldExpbmVXaWR0aEZvclZhbHVlIiwic2tpcE51bGwiLCJtYXhCYXJUaGlja25lc3MiLCJJbmZpbml0eSIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwiX2dldFN0YWNrSW5kZXgiLCJyZWN0cyIsIl9pbmRleF8iLCJvZmZzZXQiLCJncmlkIiwiX3ZhbHVlXyIsImJlZ2luQXRaZXJvIiwiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwidG9vbHRpcCIsInRpdGxlIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImdldHRlciIsImNpcmN1bWZlcmVuY2UiLCJpc0RhdGFzZXRWaXNpYmxlIiwiX2dldFJvdGF0aW9uIiwiX2dldENpcmN1bWZlcmVuY2UiLCJhcmNzIiwic3BhY2luZyIsImdldE1heEJvcmRlcldpZHRoIiwiZ2V0TWF4T2Zmc2V0IiwibWF4U2l6ZSIsImN1dG91dCIsImNoYXJ0V2VpZ2h0IiwiX2dldFJpbmdXZWlnaHQiLCJfZ2V0Um90YXRpb25FeHRlbnRzIiwicmF0aW9YIiwicmF0aW9ZIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJjYWxjTWF4IiwiY2FsY01pbiIsIm1heFgiLCJtYXhZIiwibWluWCIsIm1pblkiLCJnZXRSYXRpb0FuZE9mZnNldCIsIm1heFJhZGl1cyIsInJhZGl1c0xlbmd0aCIsIl9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsIiwidG90YWwiLCJjYWxjdWxhdGVUb3RhbCIsIl9nZXRSaW5nV2VpZ2h0T2Zmc2V0IiwiYW5pbWF0ZVJvdGF0ZSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJhbmltYXRpb25PcHRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJhbmltYXRlU2NhbGUiLCJfY2lyY3VtZmVyZW5jZSIsIm1ldGFEYXRhIiwiYm9yZGVyQWxpZ24iLCJob3ZlckJvcmRlcldpZHRoIiwiaG92ZXJPZmZzZXQiLCJyaW5nV2VpZ2h0T2Zmc2V0IiwibGVnZW5kIiwibGVnZW5kSXRlbSIsInRvZ2dsZURhdGFWaXNpYmlsaXR5IiwidG9vbHRpcEl0ZW0iLCJkYXRhTGFiZWwiLCJmb3JtYXR0ZWRWYWx1ZSIsIl9kYXRhc2V0IiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwicG9pbnRDb3VudCIsImdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJfc2NhbGVSYW5nZXMiLCJuZXdSYW5nZXMiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwiY2hhbmdlZCIsInNjYWxlUmFuZ2VzQ2hhbmdlZCIsIl9kZWNpbWF0ZWQiLCJhbmltYXRlZCIsIm1heEdhcExlbmd0aCIsImRpcmVjdFVwZGF0ZSIsInByZXZQYXJzZWQiLCJudWxsRGF0YSIsInN0b3AiLCJib3JkZXIiLCJsYXN0UG9pbnQiLCJ1cGRhdGVDb250cm9sUG9pbnRzIiwiX3VwZGF0ZVJhZGl1cyIsIm1pblNpemUiLCJjdXRvdXRQZXJjZW50YWdlIiwiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZGF0YXNldFN0YXJ0QW5nbGUiLCJnZXRJbmRleEFuZ2xlIiwiZGVmYXVsdEFuZ2xlIiwiY291bnRWaXNpYmxlRWxlbWVudHMiLCJfY29tcHV0ZUFuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJhbmdsZUxpbmVzIiwiZGlzcGxheSIsImNpcmN1bGFyIiwicG9pbnRMYWJlbHMiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIlNjYXR0ZXJDb250cm9sbGVyIiwiRGF0ZUFkYXB0ZXIiLCJ0aW1lc3RhbXAiLCJhbW91bnQiLCJ1bml0Iiwid2Vla2RheSIsIm1lbWJlcnMiLCJhZGFwdGVycyIsIl9kYXRlIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImxvb2t1cE1ldGhvZCIsIl9yZXZlcnNlUGl4ZWxzIiwiZ2V0UmFuZ2UiLCJvcHRpbWl6ZWRFdmFsdWF0ZUl0ZW1zIiwicG9zaXRpb24iLCJoYW5kbGVyIiwiZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcyIsImdldEludGVyc2VjdEl0ZW1zIiwidXNlRmluYWxQb3NpdGlvbiIsIl9taW5QYWRkaW5nIiwiaW5SYW5nZSIsImdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyIsImRpc3RhbmNlTWV0cmljIiwidXNlWCIsInVzZVkiLCJkZWx0YVgiLCJkZWx0YVkiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJtaW5EaXN0YW5jZSIsImdldENlbnRlclBvaW50IiwiZ2V0TmVhcmVzdEl0ZW1zIiwiZ2V0UHJvcHMiLCJnZXROZWFyZXN0UmFkaWFsSXRlbXMiLCJnZXRBeGlzSXRlbXMiLCJyYW5nZU1ldGhvZCIsImludGVyc2VjdHNJdGVtIiwiZXZhbHVhdGVBbGxWaXNpYmxlSXRlbXMiLCJJbnRlcmFjdGlvbiIsIm1vZGVzIiwibmVhcmVzdCIsIlNUQVRJQ19QT1NJVElPTlMiLCJmaWx0ZXJCeVBvc2l0aW9uIiwiZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzIiwic29ydEJ5V2VpZ2h0Iiwic2V0TGF5b3V0RGltcyIsImxheW91dHMiLCJwYXJhbXMiLCJ3cmFwIiwic3RhY2tXZWlnaHQiLCJwbGFjZWQiLCJidWlsZFN0YWNrcyIsInZCb3hNYXhXaWR0aCIsImhCb3hNYXhIZWlnaHQiLCJsYXlvdXQiLCJmdWxsU2l6ZSIsImF2YWlsYWJsZVdpZHRoIiwiYXZhaWxhYmxlSGVpZ2h0IiwiZ2V0Q29tYmluZWRNYXgiLCJtYXhQYWRkaW5nIiwidXBkYXRlTWF4UGFkZGluZyIsImJveFBhZGRpbmciLCJ1cGRhdGVEaW1zIiwiZ2V0UGFkZGluZyIsIm5ld1dpZHRoIiwib3V0ZXJXaWR0aCIsIm5ld0hlaWdodCIsIm91dGVySGVpZ2h0Iiwid2lkdGhDaGFuZ2VkIiwiaGVpZ2h0Q2hhbmdlZCIsInNhbWUiLCJvdGhlciIsImdldE1hcmdpbnMiLCJtYXJnaW5Gb3JQb3NpdGlvbnMiLCJmaXRCb3hlcyIsImJveGVzIiwicmVmaXRCb3hlcyIsInJlZml0Iiwic2V0Qm94RGltcyIsInBsYWNlQm94ZXMiLCJ1c2VyUGFkZGluZyIsInBhZGRpbmciLCJhdXRvUGFkZGluZyIsIl9sYXllcnMiLCJsYXlvdXRJdGVtIiwibWluUGFkZGluZyIsImxheW91dEJveGVzIiwid3JhcEJveGVzIiwiY2VudGVySG9yaXpvbnRhbCIsImNlbnRlclZlcnRpY2FsIiwibGVmdEFuZFRvcCIsInJpZ2h0QW5kQm90dG9tIiwidmVydGljYWwiLCJidWlsZExheW91dEJveGVzIiwidmVydGljYWxCb3hlcyIsImhvcml6b250YWxCb3hlcyIsImJlZm9yZUxheW91dCIsInZpc2libGVWZXJ0aWNhbEJveENvdW50IiwidXBkYXRlUG9zIiwiY2hhbmdlIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsIkJhc2ljUGxhdGZvcm0iLCJFVkVOVF9UWVBFUyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVybGVhdmUiLCJwb2ludGVyb3V0IiwiaXNOdWxsT3JFbXB0eSIsImV2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZSIsInJlbW92ZUxpc3RlbmVyIiwibm9kZUxpc3RDb250YWlucyIsIm5vZGVMaXN0IiwiY29udGFpbnMiLCJjcmVhdGVBdHRhY2hPYnNlcnZlciIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImVudHJpZXMiLCJ0cmlnZ2VyIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY3JlYXRlRGV0YWNoT2JzZXJ2ZXIiLCJkcnBMaXN0ZW5pbmdDaGFydHMiLCJvbGREZXZpY2VQaXhlbFJhdGlvIiwib25XaW5kb3dSZXNpemUiLCJkcHIiLCJjcmVhdGVSZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsInJlbGVhc2VPYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJ1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzIiwiY3JlYXRlUHJveHlBbmRMaXN0ZW4iLCJmcm9tTmF0aXZlRXZlbnQiLCJhZGRMaXN0ZW5lciIsInJlbmRlckhlaWdodCIsImdldEF0dHJpYnV0ZSIsInJlbmRlcldpZHRoIiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsImluaXRDYW52YXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJwcm94aWVzIiwiJHByb3hpZXMiLCJhdHRhY2giLCJkZXRhY2giLCJpc0Nvbm5lY3RlZCIsImZpbmFsIiwiZGVmYXVsdFJvdXRlcyIsImZvcm1hdHRlcnMiLCJ0aWNrVmFsdWUiLCJub3RhdGlvbiIsIm1heFRpY2siLCJjYWxjdWxhdGVEZWx0YSIsImxvZ0RlbHRhIiwibnVtRGVjaW1hbCIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsIm51bWVyaWMiLCJUaWNrcyIsImF1dG9Ta2lwIiwidGlja09wdHMiLCJ0aWNrc0xpbWl0IiwibWF4VGlja3NMaW1pdCIsInRpY2tMZW5ndGgiLCJfdGlja1NpemUiLCJtYXhTY2FsZSIsIm1heENoYXJ0IiwiX21heExlbmd0aCIsImRldGVybWluZU1heFRpY2tzIiwibWFqb3JJbmRpY2VzIiwibWFqb3IiLCJlbmFibGVkIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJuZXdUaWNrcyIsImNlaWwiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImRpZmYiLCJnZXRFdmVuU3BhY2luZyIsImZhY3RvcnMiLCJfZmFjdG9yaXplIiwiY2FsY3VsYXRlU3BhY2luZyIsImF2Z01ham9yU3BhY2luZyIsIm1ham9yU3RhcnQiLCJtYWpvckVuZCIsImdyYWNlIiwiZHJhd0JvcmRlciIsImRyYXdPbkNoYXJ0QXJlYSIsImRyYXdUaWNrcyIsInRpY2tXaWR0aCIsInRpY2tDb2xvciIsIm1pblJvdGF0aW9uIiwibWF4Um90YXRpb24iLCJtaXJyb3IiLCJ0ZXh0U3Ryb2tlV2lkdGgiLCJ0ZXh0U3Ryb2tlQ29sb3IiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwiY3Jvc3NBbGlnbiIsInNob3dMYWJlbEJhY2tkcm9wIiwiYmFja2Ryb3BDb2xvciIsImJhY2tkcm9wUGFkZGluZyIsInJvdXRlIiwib2Zmc2V0RnJvbUVkZ2UiLCJzYW1wbGUiLCJudW1JdGVtcyIsImluY3JlbWVudCIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJvZmZzZXRHcmlkTGluZXMiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiZ2V0VGlja01hcmtMZW5ndGgiLCJnZXRUaXRsZUhlaWdodCIsInRpdGxlQWxpZ24iLCJyZXZlcnNlQWxpZ24iLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX2xvbmdlc3RUZXh0Q2FjaGUiLCJfdXNlck1heCIsIl91c2VyTWluIiwiX3N1Z2dlc3RlZE1heCIsIl9zdWdnZXN0ZWRNaW4iLCJfdGlja3NMZW5ndGgiLCJfYm9yZGVyVmFsdWUiLCJfZGF0YUxpbWl0c0NhY2hlZCIsInN1Z2dlc3RlZE1pbiIsInN1Z2dlc3RlZE1heCIsIm1ldGFzIiwiZ2V0TWluTWF4IiwieExhYmVscyIsInlMYWJlbHMiLCJiZWZvcmVVcGRhdGUiLCJzYW1wbGVTaXplIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsIm1pbm1heCIsImtlZXBaZXJvIiwiX2FkZEdyYWNlIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJzdGFydFBpeGVsIiwiZW5kUGl4ZWwiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwibm90aWZ5UGx1Z2lucyIsIl9jYWxsSG9va3MiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsIm51bVRpY2tzIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiZ2VuZXJhdGVUaWNrTGFiZWxzIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiY2FjaGVzIiwid2lkdGhzIiwiaGVpZ2h0cyIsInRpY2tGb250IiwiZm9udFN0cmluZyIsIm5lc3RlZExhYmVsIiwid2lkZXN0TGFiZWxTaXplIiwiaGlnaGVzdExhYmVsU2l6ZSIsIl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zIiwidmFsdWVBdCIsImRlY2ltYWwiLCJnZXRCYXNlVmFsdWUiLCJjcmVhdGVUaWNrQ29udGV4dCIsIm9wdGlvblRpY2tzIiwicm90IiwidGlja3NMZW5ndGgiLCJ0bCIsImJvcmRlck9wdHMiLCJheGlzV2lkdGgiLCJheGlzSGFsZldpZHRoIiwiYWxpZ25Cb3JkZXJWYWx1ZSIsImJvcmRlclZhbHVlIiwiYWxpZ25lZExpbmVWYWx1ZSIsInR4MSIsInR5MSIsInR4MiIsInR5MiIsIngxIiwieTEiLCJ5MiIsInBvc2l0aW9uQXhpc0lEIiwibGltaXQiLCJzdGVwIiwib3B0c0F0SW5kZXgiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsImJhY2tkcm9wIiwibGFiZWxQYWRkaW5nIiwiZmlsbFJlY3QiLCJmaW5kSW5kZXgiLCJfY29tcHV0ZUdyaWRMaW5lSXRlbXMiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJsYXN0TGluZVdpZHRoIiwiX2NvbXB1dGVMYWJlbEFyZWEiLCJfY29tcHV0ZUxhYmVsSXRlbXMiLCJ0aXRsZVgiLCJ0aXRsZVkiLCJ0aXRsZUFyZ3MiLCJkcmF3QmFja2dyb3VuZCIsImRyYXdHcmlkIiwiZHJhd1RpdGxlIiwiZHJhd0xhYmVscyIsInR6IiwiZ3oiLCJheGlzSUQiLCJmb250U2l6ZSIsImlzUHJvdG90eXBlT2YiLCJwYXJlbnRTY29wZSIsImlzSUNoYXJ0Q29tcG9uZW50IiwicmVnaXN0ZXIiLCJpdGVtRGVmYXVsdHMiLCJyb3V0ZXMiLCJwcm9wZXJ0eVBhcnRzIiwic291cmNlTmFtZSIsInNvdXJjZVNjb3BlIiwicGFydHMiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsImNvbnRyb2xsZXJzIiwiX3R5cGVkUmVnaXN0cmllcyIsIl9lYWNoIiwiX2dldCIsInR5cGVkUmVnaXN0cnkiLCJhcmciLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiaXNGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwicmVnaXN0cnkiLCJjb21wb25lbnQiLCJjYW1lbE1ldGhvZCIsIl9pbml0IiwiaG9vayIsIl9jcmVhdGVEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJwbHVnaW4iLCJjYW5jZWxhYmxlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImdldFBsdWdpbiIsImFsbFBsdWdpbnMiLCJnZXRPcHRzIiwicGx1Z2luT3B0cyIsImNyZWF0ZURlc2NyaXB0b3JzIiwicHJldmlvdXNEZXNjcmlwdG9ycyIsInNvbWUiLCJwbHVnaW5TY29wZUtleXMiLCJnZXRJbmRleEF4aXMiLCJkYXRhc2V0RGVmYXVsdHMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJmaXJzdElEcyIsInNjYWxlQ29uZiIsImVycm9yIiwiZGVmYXVsdElkIiwiZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyIsImRlZmF1bHRTY2FsZU9wdGlvbnMiLCJkZWZhdWx0SUQiLCJnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEIiwibWVyZ2VTY2FsZUNvbmZpZyIsImluaXREYXRhIiwia2V5Q2FjaGUiLCJrZXlzQ2FjaGVkIiwiY2FjaGVkS2V5cyIsImdlbmVyYXRlIiwiYWRkSWZGb3VuZCIsIl9jb25maWciLCJpbml0Q29uZmlnIiwiX3Njb3BlQ2FjaGUiLCJfcmVzb2x2ZXJDYWNoZSIsImNsZWFyQ2FjaGUiLCJjbGVhciIsImRhdGFzZXRUeXBlIiwiYWRkaXRpb25hbE9wdGlvblNjb3BlcyIsIm1haW5TY29wZSIsInJlc2V0Q2FjaGUiLCJrZXlMaXN0cyIsIl9jYWNoZWRTY29wZXMiLCJzdWJQcmVmaXhlcyIsImdldFJlc29sdmVyIiwiaGFzRnVuY3Rpb24iLCJuZWVkQ29udGV4dCIsInJlc29sdmVyQ2FjaGUiLCJLTk9XTl9QT1NJVElPTlMiLCJwb3NpdGlvbklzSG9yaXpvbnRhbCIsImNvbXBhcmUyTGV2ZWwiLCJsMSIsImwyIiwib25BbmltYXRpb25zQ29tcGxldGUiLCJhbmltYXRpb25PcHRpb25zIiwib25Db21wbGV0ZSIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvblByb2dyZXNzIiwiZ2V0Q2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnN0YW5jZXMiLCJnZXRDaGFydCIsIm1vdmVOdW1lcmljS2V5cyIsImludEtleSIsInVzZXJDb25maWciLCJpbml0aWFsQ2FudmFzIiwiZXhpc3RpbmdDaGFydCIsImNoYXJ0T3B0aW9uU2NvcGVzIiwiT2Zmc2NyZWVuQ2FudmFzIiwiX2RldGVjdFBsYXRmb3JtIiwidXBkYXRlQ29uZmlnIiwiYWNxdWlyZUNvbnRleHQiLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwicmVzaXplRGVsYXkiLCJsaXN0ZW4iLCJfaW5pdGlhbGl6ZSIsImJpbmRFdmVudHMiLCJfcmVzaXplQmVmb3JlRHJhdyIsIl9yZXNpemUiLCJuZXdTaXplIiwibmV3UmF0aW8iLCJvblJlc2l6ZSIsInJlbmRlciIsImF4aXNPcHRpb25zIiwic2NhbGVPcHRzIiwidXBkYXRlZCIsImlzUmFkaWFsIiwiZHBvc2l0aW9uIiwiZHR5cGUiLCJzY2FsZVR5cGUiLCJnZXRTY2FsZSIsImluaXQiLCJoYXNVcGRhdGVkIiwiYWRkQm94IiwiX2Rlc3Ryb3lEYXRhc2V0TWV0YSIsIm5ld0NvbnRyb2xsZXJzIiwiX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzIiwib3JkZXIiLCJ1cGRhdGVJbmRleCIsIkNvbnRyb2xsZXJDbGFzcyIsImdldENvbnRyb2xsZXIiLCJnZXRFbGVtZW50IiwiX3VwZGF0ZU1ldGFzZXRzIiwiX3Jlc2V0RWxlbWVudHMiLCJhbmltc0Rpc2FibGVkIiwiX3VwZGF0ZVNjYWxlcyIsIl9jaGVja0V2ZW50QmluZGluZ3MiLCJfdXBkYXRlSGlkZGVuSW5kaWNlcyIsImludmFsaWRhdGUiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJidWlsZE9yVXBkYXRlRWxlbWVudHMiLCJfdXBkYXRlTGF5b3V0IiwiX3VwZGF0ZURhdGFzZXRzIiwiX2V2ZW50SGFuZGxlciIsIl91cGRhdGVIb3ZlclN0eWxlcyIsInJlbW92ZUJveCIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJidWlsZE9yVXBkYXRlU2NhbGVzIiwiZXhpc3RpbmdFdmVudHMiLCJuZXdFdmVudHMiLCJ1bmJpbmRFdmVudHMiLCJjaGFuZ2VzIiwiX2dldFVuaWZvcm1EYXRhQ2hhbmdlcyIsImRhdGFzZXRDb3VudCIsIm1ha2VTZXQiLCJjaGFuZ2VTZXQiLCJub0FyZWEiLCJfaWR4IiwiX3VwZGF0ZURhdGFzZXQiLCJsYXllcnMiLCJfZHJhd0RhdGFzZXRzIiwiX2RyYXdEYXRhc2V0IiwidXNlQ2xpcCIsInNldERhdGFzZXRWaXNpYmlsaXR5IiwiX3VwZGF0ZVZpc2liaWxpdHkiLCJfZGVzdHJveSIsInJlbW92ZSIsIl9zdG9wIiwicmVsZWFzZUNvbnRleHQiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiX2FkZCIsIl9yZW1vdmUiLCJkZXRhY2hlZCIsImlzQXR0YWNoZWQiLCJhY3RpdmVFbGVtZW50cyIsImxhc3RBY3RpdmUiLCJub3RpZnkiLCJyZXBsYXkiLCJob3Zlck9wdGlvbnMiLCJkZWFjdGl2YXRlZCIsImFjdGl2YXRlZCIsInVwZGF0ZUhvdmVyU3R5bGUiLCJpbkNoYXJ0QXJlYSIsImV2ZW50RmlsdGVyIiwiX2hhbmRsZUV2ZW50IiwiX2dldEFjdGl2ZUVsZW1lbnRzIiwiaXNDbGljayIsIl9pc0NsaWNrRXZlbnQiLCJsYXN0RXZlbnQiLCJkZXRlcm1pbmVMYXN0RXZlbnQiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJjbGlwQXJjIiwicGl4ZWxNYXJnaW4iLCJhbmdsZU1hcmdpbiIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJhbmdsZURlbHRhIiwibyIsImJvcmRlclJhZGl1cyIsImhhbGZUaGlja25lc3MiLCJpbm5lckxpbWl0IiwiY29tcHV0ZU91dGVyTGltaXQiLCJvdXRlckFyY0xpbWl0Iiwib3V0ZXJTdGFydCIsIm91dGVyRW5kIiwiaW5uZXJTdGFydCIsImlubmVyRW5kIiwiclRoZXRhVG9YWSIsInRoZXRhIiwicGF0aEFyYyIsImlubmVyUiIsInNwYWNpbmdPZmZzZXQiLCJhbHBoYSIsImF2Tm9nU3BhY2luZ1JhZGl1cyIsImFuZ2xlT2Zmc2V0Iiwib3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzIiwib3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyIsIm91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwib3V0ZXJFbmRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzIiwiaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyIsImlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJFbmRBZGp1c3RlZEFuZ2xlIiwicENlbnRlciIsInA0IiwicDgiLCJpbm5lciIsImxpbmVKb2luIiwiZnVsbENpcmNsZXMiLCJkcmF3RnVsbENpcmNsZUJvcmRlcnMiLCJ2ZXJzaW9uIiwidW5yZWdpc3RlciIsImNoYXJ0WCIsImNoYXJ0WSIsInJBZGp1c3QiLCJiZXR3ZWVuQW5nbGVzIiwid2l0aGluUmFkaXVzIiwiaGFsZkFuZ2xlIiwiaGFsZlJhZGl1cyIsInJhZGl1c09mZnNldCIsImRyYXdBcmMiLCJzZXRTdHlsZSIsImxpbmVDYXAiLCJwYXRoVmFycyIsInBhcmFtc1N0YXJ0IiwicGFyYW1zRW5kIiwic2VnbWVudFN0YXJ0Iiwic2VnbWVudEVuZCIsIm91dHNpZGUiLCJwYXRoU2VnbWVudCIsImxpbmVNZXRob2QiLCJzdGVwcGVkIiwiZ2V0TGluZU1ldGhvZCIsImZhc3RQYXRoU2VnbWVudCIsInByZXZYIiwibGFzdFkiLCJhdmdYIiwiY291bnRYIiwicG9pbnRJbmRleCIsImRyYXdYIiwidHJ1bmNYIiwiX2dldFNlZ21lbnRNZXRob2QiLCJ1c2VQYXRoMkQiLCJQYXRoMkQiLCJwYXRoIiwiX3BhdGgiLCJzdHJva2VQYXRoV2l0aENhY2hlIiwic2VnbWVudE1ldGhvZCIsInN0cm9rZVBhdGhEaXJlY3QiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJmaW5kU3RhcnRBbmRFbmQiLCJzb2xpZFNlZ21lbnRzIiwiX2NvbXB1dGVTZWdtZW50cyIsIl9pbnRlcnBvbGF0ZSIsIl9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kIiwiaW50ZXJwb2xhdGVkIiwiaW5SYW5nZSQxIiwiaGl0UmFkaXVzIiwibW91c2VYIiwibW91c2VZIiwiaG92ZXJSYWRpdXMiLCJnZXRCYXJCb3VuZHMiLCJiYXIiLCJoYWxmIiwic2tpcE9yTGltaXQiLCJib3VuZGluZ1JlY3RzIiwibWF4VyIsIm1heEgiLCJwYXJzZUJvcmRlcldpZHRoIiwibWF4UiIsImVuYWJsZUJvcmRlciIsInBhcnNlQm9yZGVyUmFkaXVzIiwib3V0ZXIiLCJza2lwWCIsInNraXBZIiwiYWRkTm9ybWFsUmVjdFBhdGgiLCJpbmZsYXRlUmVjdCIsInJlZlJlY3QiLCJhZGRSZWN0UGF0aCIsIldlYWtNYXAiLCJwb3NpdGlvbmVycyIsImhhc1ZhbHVlIiwidG9vbHRpcFBvc2l0aW9uIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwidHAiLCJwdXNoT3JDb25jYXQiLCJ0b1B1c2giLCJzcGxpdE5ld2xpbmVzIiwiY3JlYXRlVG9vbHRpcEl0ZW0iLCJnZXRMYWJlbEFuZFZhbHVlIiwiZ2V0VG9vbHRpcFNpemUiLCJib2R5IiwiZm9vdGVyIiwiYm94V2lkdGgiLCJib3hIZWlnaHQiLCJib2R5Rm9udCIsInRpdGxlRm9udCIsImZvb3RlckZvbnQiLCJ0aXRsZUxpbmVDb3VudCIsImZvb3RlckxpbmVDb3VudCIsImJvZHlMaW5lSXRlbUNvdW50IiwiY29tYmluZWRCb2R5TGVuZ3RoIiwiYm9keUl0ZW0iLCJiZWZvcmUiLCJhZnRlciIsImJlZm9yZUJvZHkiLCJhZnRlckJvZHkiLCJ0aXRsZVNwYWNpbmciLCJ0aXRsZU1hcmdpbkJvdHRvbSIsImRpc3BsYXlDb2xvcnMiLCJib2R5U3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlclNwYWNpbmciLCJ3aWR0aFBhZGRpbmciLCJtYXhMaW5lV2lkdGgiLCJkZXRlcm1pbmVYQWxpZ24iLCJ5QWxpZ24iLCJjaGFydFdpZHRoIiwieEFsaWduIiwiY2FyZXQiLCJjYXJldFNpemUiLCJjYXJldFBhZGRpbmciLCJkb2VzTm90Rml0V2l0aEFsaWduIiwiZGV0ZXJtaW5lQWxpZ25tZW50IiwiZGV0ZXJtaW5lWUFsaWduIiwiZ2V0QmFja2dyb3VuZFBvaW50IiwiYWxpZ25tZW50IiwicGFkZGluZ0FuZFNpemUiLCJhbGlnblgiLCJhbGlnblkiLCJnZXRBbGlnbmVkWCIsImdldEJlZm9yZUFmdGVyQm9keUxpbmVzIiwib3ZlcnJpZGVDYWxsYmFja3MiLCJvcGFjaXR5IiwiX2V2ZW50UG9zaXRpb24iLCJfc2l6ZSIsIl9jYWNoZWRBbmltYXRpb25zIiwiX3Rvb2x0aXBJdGVtcyIsImRhdGFQb2ludHMiLCJjYXJldFgiLCJjYXJldFkiLCJsYWJlbENvbG9ycyIsImxhYmVsUG9pbnRTdHlsZXMiLCJsYWJlbFRleHRDb2xvcnMiLCJ0b29sdGlwSXRlbXMiLCJiZWZvcmVUaXRsZSIsImFmdGVyVGl0bGUiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJiZWZvcmVMYWJlbCIsImFmdGVyTGFiZWwiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImxhYmVsVGV4dENvbG9yIiwiX2NyZWF0ZUl0ZW1zIiwiZ2V0VGl0bGUiLCJnZXRCZWZvcmVCb2R5IiwiZ2V0Qm9keSIsImdldEFmdGVyQm9keSIsImdldEZvb3RlciIsInBvc2l0aW9uQW5kU2l6ZSIsImJhY2tncm91bmRQb2ludCIsImV4dGVybmFsIiwidG9vbHRpcFBvaW50IiwiY2FyZXRQb3NpdGlvbiIsImdldENhcmV0UG9zaXRpb24iLCJ4MyIsInkzIiwicHRYIiwicHRZIiwicnRsSGVscGVyIiwidGl0bGVDb2xvciIsImNvbG9yWCIsInJ0bENvbG9yWCIsInlPZmZTZXQiLCJjb2xvclkiLCJ1c2VQb2ludFN0eWxlIiwiZHJhd09wdGlvbnMiLCJtdWx0aUtleUJhY2tncm91bmQiLCJvdXRlclgiLCJpbm5lclgiLCJzdHJva2VSZWN0IiwiYm9keUFsaWduIiwiYm9keUxpbmVIZWlnaHQiLCJ4TGluZVBhZGRpbmciLCJmaWxsTGluZU9mVGV4dCIsImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwidGV4dENvbG9yIiwiYm9keUNvbG9yIiwiX2RyYXdDb2xvckJveCIsImZvb3RlckFsaWduIiwiZm9vdGVyQ29sb3IiLCJ0b29sdGlwU2l6ZSIsImRyYXdDYXJldCIsInF1YWRyYXRpY0N1cnZlVG8iLCJhbmltWCIsImFuaW1ZIiwiX3VwZGF0ZUFuaW1hdGlvblRhcmdldCIsImhhc1Rvb2x0aXBDb250ZW50IiwiZ2xvYmFsQWxwaGEiLCJ0ZXh0RGlyZWN0aW9uIiwiZHJhd0JvZHkiLCJkcmF3Rm9vdGVyIiwicG9zaXRpb25DaGFuZ2VkIiwiX3Bvc2l0aW9uQ2hhbmdlZCIsIl9pZ25vcmVSZXBsYXlFdmVudHMiLCJmaW5kT3JBZGRMYWJlbCIsImFkZGVkTGFiZWxzIiwidW5zaGlmdCIsImFkZElmU3RyaW5nIiwibGFzdEluZGV4T2YiLCJfc3RhcnRWYWx1ZSIsIl92YWx1ZVJhbmdlIiwiX2FkZGVkTGFiZWxzIiwiYWRkZWQiLCJnZXREZWNpbWFsRm9yUGl4ZWwiLCJnZW5lcmF0ZVRpY2tzJDEiLCJnZW5lcmF0aW9uT3B0aW9ucyIsImRhdGFSYW5nZSIsInByZWNpc2lvbiIsIm1heFRpY2tzIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsIm1heFNwYWNlcyIsInJtaW4iLCJybWF4IiwiY291bnREZWZpbmVkIiwibWluU3BhY2luZyIsIm5pY2VNaW4iLCJuaWNlTWF4IiwibnVtU3BhY2VzIiwicm91bmRlZCIsImFsbW9zdFdob2xlIiwiZGVjaW1hbFBsYWNlcyIsInJlbGF0aXZlTGFiZWxTaXplIiwiX2VuZFZhbHVlIiwic2V0TWluIiwic2V0TWF4IiwibWluU2lnbiIsIm1heFNpZ24iLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdldFRpY2tMaW1pdCIsIl9tYXhEaWdpdHMiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwiaXNNYWpvciIsInRpY2tWYWwiLCJfemVybyIsImV4cCIsImVuZEV4cCIsImVuZFNpZ25pZmljYW5kIiwic2lnbmlmaWNhbmQiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MiLCJnZXRUaWNrQmFja2Ryb3BIZWlnaHQiLCJkZXRlcm1pbmVMaW1pdHMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJfcGFkZGluZyIsImxpbWl0cyIsInZhbHVlQ291bnQiLCJfcG9pbnRMYWJlbHMiLCJwb2ludExhYmVsT3B0cyIsImFkZGl0aW9uYWxBbmdsZSIsImNlbnRlclBvaW50TGFiZWxzIiwiZ2V0UG9pbnRMYWJlbENvbnRleHQiLCJnZXRQb2ludFBvc2l0aW9uIiwiZHJhd2luZ0FyZWEiLCJwbEZvbnQiLCJ0ZXh0U2l6ZSIsInVwZGF0ZUxpbWl0cyIsInNldENlbnRlclBvaW50IiwiX3BvaW50TGFiZWxJdGVtcyIsImV4dHJhIiwib3V0ZXJEaXN0YW5jZSIsInBvaW50TGFiZWxQb3NpdGlvbiIsInlGb3JBbmdsZSIsImdldFRleHRBbGlnbkZvckFuZ2xlIiwibGVmdEZvclRleHRBbGlnbiIsImJ1aWxkUG9pbnRMYWJlbEl0ZW1zIiwiaExpbWl0cyIsInZMaW1pdHMiLCJwYXRoUmFkaXVzTGluZSIsImxhYmVsQ291bnQiLCJsb2dhcml0aG1pYyIsImxlZnRNb3ZlbWVudCIsInJpZ2h0TW92ZW1lbnQiLCJ0b3BNb3ZlbWVudCIsImJvdHRvbU1vdmVtZW50Iiwic2NhbGluZ0ZhY3RvciIsInNjYWxlZERpc3RhbmNlIiwicG9pbnRMYWJlbCIsImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJhbmltYXRlIiwiSU5URVJWQUxTIiwibWlsbGlzZWNvbmQiLCJjb21tb24iLCJzdGVwcyIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJkYXkiLCJ3ZWVrIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsIlVOSVRTIiwic29ydGVyIiwiYWRhcHRlciIsIl9hZGFwdGVyIiwicGFyc2VyIiwiaXNvV2Vla2RheSIsIl9wYXJzZU9wdHMiLCJzdGFydE9mIiwiZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyIsIm1pblVuaXQiLCJjYXBhY2l0eSIsImludGVydmFsIiwiYWRkVGljayIsInRpbWUiLCJ0aW1lc3RhbXBzIiwidGlja3NGcm9tVGltZXN0YW1wcyIsIm1ham9yVW5pdCIsInNldE1ham9yVGlja3MiLCJfdW5pdCIsIl9tYWpvclVuaXQiLCJfb2Zmc2V0cyIsIl9ub3JtYWxpemVkIiwiZGlzcGxheUZvcm1hdHMiLCJmb3JtYXRzIiwibm9ybWFsaXplZCIsIl9hcHBseUJvdW5kcyIsIl9nZXRMYWJlbEJvdW5kcyIsImVuZE9mIiwiZ2V0TGFiZWxUaW1lc3RhbXBzIiwidGltZU9wdHMiLCJfZ2VuZXJhdGUiLCJfZmlsdGVyQmV0d2VlbiIsIl9nZXRMYWJlbENhcGFjaXR5IiwiZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmciLCJkZXRlcm1pbmVNYWpvclVuaXQiLCJpbml0T2Zmc2V0cyIsImdldERlY2ltYWxGb3JWYWx1ZSIsImhhc1dlZWtkYXkiLCJnZXREYXRhVGltZXN0YW1wcyIsInRvb2x0aXBGb3JtYXQiLCJkYXRldGltZSIsIm1pbm9yRm9ybWF0IiwibWFqb3JGb3JtYXQiLCJfdGlja0Zvcm1hdEZ1bmN0aW9uIiwib2Zmc2V0cyIsInRpY2tzT3B0cyIsInRpY2tMYWJlbFdpZHRoIiwiY29zUm90YXRpb24iLCJzaW5Sb3RhdGlvbiIsInRpY2tGb250U2l6ZSIsImV4YW1wbGVUaW1lIiwiZXhhbXBsZUxhYmVsIiwiX2dldExhYmVsU2l6ZSIsImludGVycG9sYXRlIiwicHJldlNvdXJjZSIsIm5leHRTb3VyY2UiLCJwcmV2VGFyZ2V0IiwibmV4dFRhcmdldCIsInNwYW4iLCJUaW1lU2VyaWVzU2NhbGUiLCJfdGFibGUiLCJfbWluUG9zIiwiX3RhYmxlUmFuZ2UiLCJfZ2V0VGltZXN0YW1wc0ZvclRhYmxlIiwiYnVpbGRMb29rdXBUYWJsZSIsImFGdW5jdGlvbiIsInRvT2JqZWN0IiwiYXJyYXlNZXRob2RJc1N0cmljdCIsInRlc3QiLCJuYXRpdmVTb3J0IiwiRkFJTFNfT05fVU5ERUZJTkVEIiwiRkFJTFNfT05fTlVMTCIsIlNUUklDVF9NRVRIT0QiLCJjb21wYXJlZm4iLCJtb2R1bGUiLCJleHBvcnRzIiwiTUVUSE9EX05BTUUiLCJhcmd1bWVudCIsImNsYXNzb2YiLCJUeXBlRXJyb3IiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwicmVmb3J3YXJkUmVmIiwicmVmIiwic2V0TGFiZWxzIiwiY3VycmVudERhdGEiLCJuZXh0TGFiZWxzIiwic2V0RGF0YXNldHMiLCJuZXh0RGF0YXNldHMiLCJkYXRhc2V0SWRLZXkiLCJhZGRlZERhdGFzZXRzIiwibmV4dERhdGFzZXQiLCJjdXJyZW50RGF0YXNldCIsImZpbmQiLCJjbG9uZURhdGEiLCJuZXh0RGF0YSIsIkNoYXJ0Q29tcG9uZW50IiwicGFyYW0iLCJyZWRyYXciLCJmYWxsYmFja0NvbnRlbnQiLCJjYW52YXNSZWYiLCJjaGFydFJlZiIsInJlbmRlckNoYXJ0IiwiZGVzdHJveUNoYXJ0IiwiZGVzdHJveSIsIm5leHRPcHRpb25zIiwiY3JlYXRlRWxlbWVudCIsInJvbGUiLCJDaGFydCIsImNyZWF0ZVR5cGVkQ2hhcnQiLCJyZWdpc3RlcmFibGVzIiwiRG91Z2hudXQiXSwibWFwcGluZ3MiOiIwRkFDQSxJQUFJQSxFQUFJLEVBQVEsSUFDWkMsRUFBWSxFQUFRLElBQ3BCQyxFQUFrQixFQUFRLEtBQzFCQyxFQUFTLEVBQVEsS0FDakJDLEVBQVEsRUFBUSxJQUVoQkMsRUFBZ0IsR0FBSUMsUUFDcEJDLEVBQVFDLEtBQUtELE1BRWJFLEVBQU0sU0FBVUMsRUFBR0MsRUFBR0MsR0FDeEIsT0FBYSxJQUFORCxFQUFVQyxFQUFNRCxFQUFJLEdBQU0sRUFB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RWxELENBQ0N1d0MsRUFDQTMxRSxFQUFLb2xDLFNBRVQsb0JBQVUsTUFDRHV3QyxHQUFVRyxFQUFTem5ELFNBQVdydUIsRUFBS3FkLFVBQ3BDMjNELEVBQVljLEVBQVN6bkQsUUFBUXNQLE9BQU8zOUIsS0FBTUEsRUFBS3FkLFNBQVU2M0QsSUFFOUQsQ0FDQ1MsRUFDQTMxRSxFQUFLcWQsV0FFVCxvQkFBVSxLQUNEeTRELEVBQVN6bkQsVUFDVnNuRCxHQUNBSyxJQUNBNWhCLFdBQVcyaEIsSUFFWEQsRUFBU3puRCxRQUFRdVEsV0FFdEIsQ0FDQysyQyxFQUNBNXdFLEVBQ0EvRSxFQUFLb2xDLE9BQ0xwbEMsRUFBS3FkLFdBRVQsb0JBQVUsS0FDTjA0RCxJQUNPLElBQUlDLEtBRVosSUFDa0IsSUFBTUcsY0FBYyxTQUFVeHpFLE9BQU9tWSxPQUFPLENBQzdEODVELElBQUtpQixFQUNMTyxLQUFNLE1BQ05yMEQsT0FBUUEsRUFDUnRCLE1BQU9BLEdBQ1J1RyxHQUFRNHVELEdBRWYsTUFBTVMsRUFBc0IscUJBQVdaLEdBRXZDLFNBQVNhLEVBQWlCNXpFLEVBQU02ekUsR0FFNUIsT0FEQSxJQUFRdnBCLFNBQVN1cEIsR0FDSSxvQkFBZixDQUEwQixDQUFDdnZELEVBQU80dEQsSUFBb0IsSUFBTXVCLGNBQWNFLEVBQU8xekUsT0FBT21ZLE9BQU8sR0FBSWtNLEVBQU8sQ0FDeEc0dEQsSUFBS0EsRUFDTGx5RSxLQUFNQSxNQUlvQyxJQUNGLElBQ0ksSUFGeEQsTUFHTTh6RSxFQUEyQkYsRUFBaUIsV0FBWSxLQUNFLElBQ04sSUFDTixJQUNRIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZVRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG5cbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG52YXIgRk9SQ0VEID0gbmF0aXZlVG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIG5hdGl2ZVRvRml4ZWQuY2FsbCh7fSk7XG59KTtcblxuLy8gYE51bWJlci5wcm90b3R5cGUudG9GaXhlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZml4ZWRcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgc2lnbiA9ICcnO1xuICAgIHZhciByZXN1bHQgPSAnMCc7XG4gICAgdmFyIGUsIHosIGosIGs7XG5cbiAgICB2YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgYzIgPSBjO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCA2KSB7XG4gICAgICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBjMiAlIDFlNztcbiAgICAgICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICAgICAgdmFyIGluZGV4ID0gNjtcbiAgICAgIHZhciBjID0gMDtcbiAgICAgIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICAgICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBmbG9vcihjIC8gbik7XG4gICAgICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZGF0YVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluZGV4ID0gNjtcbiAgICAgIHZhciBzID0gJyc7XG4gICAgICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgICAgIGlmIChzICE9PSAnJyB8fCBpbmRleCA9PT0gMCB8fCBkYXRhW2luZGV4XSAhPT0gMCkge1xuICAgICAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaW5kZXhdKTtcbiAgICAgICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKCcwJywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgICAgIH1cbiAgICAgIH0gcmV0dXJuIHM7XG4gICAgfTtcblxuICAgIGlmIChmcmFjdERpZ2l0cyA8IDAgfHwgZnJhY3REaWdpdHMgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcignSW5jb3JyZWN0IGZyYWN0aW9uIGRpZ2l0cycpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAobnVtYmVyICE9IG51bWJlcikgcmV0dXJuICdOYU4nO1xuICAgIGlmIChudW1iZXIgPD0gLTFlMjEgfHwgbnVtYmVyID49IDFlMjEpIHJldHVybiBTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICByZXN1bHQgPSBkYXRhVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQuY2FsbCgnMCcsIGZyYWN0RGlnaXRzIC0gaykgKyByZXN1bHRcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgayAtIGZyYWN0RGlnaXRzKSArICcuJyArIHJlc3VsdC5zbGljZShrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLyohXG4gKiBDaGFydC5qcyB2My43LjBcbiAqIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnXG4gKiAoYykgMjAyMSBDaGFydC5qcyBDb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5mdW5jdGlvbiBmb250U3RyaW5nKHBpeGVsU2l6ZSwgZm9udFN0eWxlLCBmb250RmFtaWx5KSB7XG4gIHJldHVybiBmb250U3R5bGUgKyAnICcgKyBwaXhlbFNpemUgKyAncHggJyArIGZvbnRGYW1pbHk7XG59XG5jb25zdCByZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG59KCkpO1xuZnVuY3Rpb24gdGhyb3R0bGVkKGZuLCB0aGlzQXJnLCB1cGRhdGVGbikge1xuICBjb25zdCB1cGRhdGVBcmdzID0gdXBkYXRlRm4gfHwgKChhcmdzKSA9PiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKSk7XG4gIGxldCB0aWNraW5nID0gZmFsc2U7XG4gIGxldCBhcmdzID0gW107XG4gIHJldHVybiBmdW5jdGlvbiguLi5yZXN0KSB7XG4gICAgYXJncyA9IHVwZGF0ZUFyZ3MocmVzdCk7XG4gICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpID0+IHtcbiAgICAgICAgdGlja2luZyA9IGZhbHNlO1xuICAgICAgICBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCBkZWxheSkge1xuICBsZXQgdGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBkZWxheSwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsYXk7XG4gIH07XG59XG5jb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pID0+IGFsaWduID09PSAnc3RhcnQnID8gJ2xlZnQnIDogYWxpZ24gPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuY29uc3QgX2FsaWduU3RhcnRFbmQgPSAoYWxpZ24sIHN0YXJ0LCBlbmQpID0+IGFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbmNvbnN0IF90ZXh0WCA9IChhbGlnbiwgbGVmdCwgcmlnaHQsIHJ0bCkgPT4ge1xuICBjb25zdCBjaGVjayA9IHJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHJldHVybiBhbGlnbiA9PT0gY2hlY2sgPyByaWdodCA6IGFsaWduID09PSAnY2VudGVyJyA/IChsZWZ0ICsgcmlnaHQpIC8gMiA6IGxlZnQ7XG59O1xuXG5mdW5jdGlvbiBub29wKCkge31cbmNvbnN0IHVpZCA9IChmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZCsrO1xuICB9O1xufSgpKTtcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWYodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh0eXBlLnN1YnN0cigwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc3Vic3RyKC02KSA9PT0gJ0FycmF5XScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5jb25zdCBpc051bWJlckZpbml0ZSA9ICh2YWx1ZSkgPT4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpICYmIGlzRmluaXRlKCt2YWx1ZSk7XG5mdW5jdGlvbiBmaW5pdGVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5mdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbikgPT5cbiAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID9cbiAgICBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMFxuICAgIDogdmFsdWUgLyBkaW1lbnNpb247XG5jb25zdCB0b0RpbWVuc2lvbiA9ICh2YWx1ZSwgZGltZW5zaW9uKSA9PlxuICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmVuZHNXaXRoKCclJykgP1xuICAgIHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uXG4gICAgOiArdmFsdWU7XG5mdW5jdGlvbiBjYWxsYmFjayhmbiwgYXJncywgdGhpc0FyZykge1xuICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gIGxldCBpLCBsZW4sIGtleXM7XG4gIGlmIChpc0FycmF5KGxvb3BhYmxlKSkge1xuICAgIGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobG9vcGFibGUpKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcbiAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gIGxldCBpLCBpbGVuLCB2MCwgdjE7XG4gIGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhMC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2MCA9IGEwW2ldO1xuICAgIHYxID0gYTFbaV07XG4gICAgaWYgKHYwLmRhdGFzZXRJbmRleCAhPT0gdjEuZGF0YXNldEluZGV4IHx8IHYwLmluZGV4ICE9PSB2MS5pbmRleCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNsb25lJDEoc291cmNlKSB7XG4gIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICByZXR1cm4gc291cmNlLm1hcChjbG9uZSQxKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrID0gMDtcbiAgICBmb3IgKDsgayA8IGtsZW47ICsraykge1xuICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUkMShzb3VyY2Vba2V5c1trXV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICByZXR1cm4gWydfX3Byb3RvX18nLCAncHJvdG90eXBlJywgJ2NvbnN0cnVjdG9yJ10uaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbmZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2UodHZhbCwgc3ZhbCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0W2tleV0gPSBjbG9uZSQxKHN2YWwpO1xuICB9XG59XG5mdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBjb25zdCBzb3VyY2VzID0gaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogW3NvdXJjZV07XG4gIGNvbnN0IGlsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgbWVyZ2VyID0gb3B0aW9ucy5tZXJnZXIgfHwgX21lcmdlcjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGZvciAobGV0IGsgPSAwLCBrbGVuID0ga2V5cy5sZW5ndGg7IGsgPCBrbGVuOyArK2spIHtcbiAgICAgIG1lcmdlcihrZXlzW2tdLCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBtZXJnZUlmKHRhcmdldCwgc291cmNlKSB7XG4gIHJldHVybiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwge21lcmdlcjogX21lcmdlcklmfSk7XG59XG5mdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgfSBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSkge1xuICAgIHRhcmdldFtrZXldID0gY2xvbmUkMShzdmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlcHJlY2F0ZWQoc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICtcblx0XHRcdCdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICB9XG59XG5jb25zdCBlbXB0eVN0cmluZyA9ICcnO1xuY29uc3QgZG90ID0gJy4nO1xuZnVuY3Rpb24gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgc3RhcnQpIHtcbiAgY29uc3QgaWR4ID0ga2V5LmluZGV4T2YoZG90LCBzdGFydCk7XG4gIHJldHVybiBpZHggPT09IC0xID8ga2V5Lmxlbmd0aCA6IGlkeDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gZW1wdHlTdHJpbmcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGxldCBwb3MgPSAwO1xuICBsZXQgaWR4ID0gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgcG9zKTtcbiAgd2hpbGUgKG9iaiAmJiBpZHggPiBwb3MpIHtcbiAgICBvYmogPSBvYmpba2V5LnN1YnN0cihwb3MsIGlkeCAtIHBvcyldO1xuICAgIHBvcyA9IGlkeCArIDE7XG4gICAgaWR4ID0gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgcG9zKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5jb25zdCBkZWZpbmVkID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgc2V0c0VxdWFsID0gKGEsIGIpID0+IHtcbiAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhKSB7XG4gICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBfaXNDbGlja0V2ZW50KGUpIHtcbiAgcmV0dXJuIGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyB8fCBlLnR5cGUgPT09ICdjb250ZXh0bWVudSc7XG59XG5cbmNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIG5pY2VOdW0ocmFuZ2UpIHtcbiAgY29uc3Qgcm91bmRlZFJhbmdlID0gTWF0aC5yb3VuZChyYW5nZSk7XG4gIHJhbmdlID0gYWxtb3N0RXF1YWxzKHJhbmdlLCByb3VuZGVkUmFuZ2UsIHJhbmdlIC8gMTAwMCkgPyByb3VuZGVkUmFuZ2UgOiByYW5nZTtcbiAgY29uc3QgbmljZVJhbmdlID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAocmFuZ2UpKSk7XG4gIGNvbnN0IGZyYWN0aW9uID0gcmFuZ2UgLyBuaWNlUmFuZ2U7XG4gIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICByZXR1cm4gbmljZUZyYWN0aW9uICogbmljZVJhbmdlO1xufVxuZnVuY3Rpb24gX2ZhY3Rvcml6ZSh2YWx1ZSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3Qgc3FydCA9IE1hdGguc3FydCh2YWx1ZSk7XG4gIGxldCBpO1xuICBmb3IgKGkgPSAxOyBpIDwgc3FydDsgaSsrKSB7XG4gICAgaWYgKHZhbHVlICUgaSA9PT0gMCkge1xuICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSAvIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkge1xuICAgIHJlc3VsdC5wdXNoKHNxcnQpO1xuICB9XG4gIHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhIC0gYikucG9wKCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5mdW5jdGlvbiBhbG1vc3RFcXVhbHMoeCwgeSwgZXBzaWxvbikge1xuICByZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgY29uc3Qgcm91bmRlZCA9IE1hdGgucm91bmQoeCk7XG4gIHJldHVybiAoKHJvdW5kZWQgLSBlcHNpbG9uKSA8PSB4KSAmJiAoKHJvdW5kZWQgKyBlcHNpbG9uKSA+PSB4KTtcbn1cbmZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgdGFyZ2V0Lm1pbiA9IE1hdGgubWluKHRhcmdldC5taW4sIHZhbHVlKTtcbiAgICAgIHRhcmdldC5tYXggPSBNYXRoLm1heCh0YXJnZXQubWF4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xuICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICByZXR1cm4gcmFkaWFucyAqICgxODAgLyBQSSk7XG59XG5mdW5jdGlvbiBfZGVjaW1hbFBsYWNlcyh4KSB7XG4gIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSAxO1xuICBsZXQgcCA9IDA7XG4gIHdoaWxlIChNYXRoLnJvdW5kKHggKiBlKSAvIGUgIT09IHgpIHtcbiAgICBlICo9IDEwO1xuICAgIHArKztcbiAgfVxuICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGdldEFuZ2xlRnJvbVBvaW50KGNlbnRyZVBvaW50LCBhbmdsZVBvaW50KSB7XG4gIGNvbnN0IGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgY29uc3QgcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyID0gTWF0aC5zcXJ0KGRpc3RhbmNlRnJvbVhDZW50ZXIgKiBkaXN0YW5jZUZyb21YQ2VudGVyICsgZGlzdGFuY2VGcm9tWUNlbnRlciAqIGRpc3RhbmNlRnJvbVlDZW50ZXIpO1xuICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuICBpZiAoYW5nbGUgPCAoLTAuNSAqIFBJKSkge1xuICAgIGFuZ2xlICs9IFRBVTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFuZ2xlLFxuICAgIGRpc3RhbmNlOiByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXJcbiAgfTtcbn1cbmZ1bmN0aW9uIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwdDEsIHB0Mikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gIHJldHVybiAoYSAtIGIgKyBQSVRBVSkgJSBUQVUgLSBQSTtcbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gIHJldHVybiAoYSAlIFRBVSArIFRBVSkgJSBUQVU7XG59XG5mdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgY29uc3QgYSA9IF9ub3JtYWxpemVBbmdsZShhbmdsZSk7XG4gIGNvbnN0IHMgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gIGNvbnN0IGFuZ2xlVG9TdGFydCA9IF9ub3JtYWxpemVBbmdsZShzIC0gYSk7XG4gIGNvbnN0IGFuZ2xlVG9FbmQgPSBfbm9ybWFsaXplQW5nbGUoZSAtIGEpO1xuICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICBjb25zdCBlbmRUb0FuZ2xlID0gX25vcm1hbGl6ZUFuZ2xlKGEgLSBlKTtcbiAgcmV0dXJuIGEgPT09IHMgfHwgYSA9PT0gZSB8fCAoc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUpXG4gICAgfHwgKGFuZ2xlVG9TdGFydCA+IGFuZ2xlVG9FbmQgJiYgc3RhcnRUb0FuZ2xlIDwgZW5kVG9BbmdsZSk7XG59XG5mdW5jdGlvbiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbHVlLCAtMzI3NjgsIDMyNzY3KTtcbn1cbmZ1bmN0aW9uIF9pc0JldHdlZW4odmFsdWUsIHN0YXJ0LCBlbmQsIGVwc2lsb24gPSAxZS02KSB7XG4gIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIGVwc2lsb24gJiYgdmFsdWUgPD0gTWF0aC5tYXgoc3RhcnQsIGVuZCkgKyBlcHNpbG9uO1xufVxuXG5jb25zdCBhdEVkZ2UgPSAodCkgPT4gdCA9PT0gMCB8fCB0ID09PSAxO1xuY29uc3QgZWxhc3RpY0luID0gKHQsIHMsIHApID0+IC0oTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkpO1xuY29uc3QgZWxhc3RpY091dCA9ICh0LCBzLCBwKSA9PiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSArIDE7XG5jb25zdCBlZmZlY3RzID0ge1xuICBsaW5lYXI6IHQgPT4gdCxcbiAgZWFzZUluUXVhZDogdCA9PiB0ICogdCxcbiAgZWFzZU91dFF1YWQ6IHQgPT4gLXQgKiAodCAtIDIpLFxuICBlYXNlSW5PdXRRdWFkOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0XG4gICAgOiAtMC41ICogKCgtLXQpICogKHQgLSAyKSAtIDEpLFxuICBlYXNlSW5DdWJpYzogdCA9PiB0ICogdCAqIHQsXG4gIGVhc2VPdXRDdWJpYzogdCA9PiAodCAtPSAxKSAqIHQgKiB0ICsgMSxcbiAgZWFzZUluT3V0Q3ViaWM6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0XG4gICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpLFxuICBlYXNlSW5RdWFydDogdCA9PiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVhcnQ6IHQgPT4gLSgodCAtPSAxKSAqIHQgKiB0ICogdCAtIDEpLFxuICBlYXNlSW5PdXRRdWFydDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdCAqIHQgKiB0XG4gICAgOiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMiksXG4gIGVhc2VJblF1aW50OiB0ID0+IHQgKiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVpbnQ6IHQgPT4gKHQgLT0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSxcbiAgZWFzZUluT3V0UXVpbnQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0ICogdCAqIHRcbiAgICA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSxcbiAgZWFzZUluU2luZTogdCA9PiAtTWF0aC5jb3ModCAqIEhBTEZfUEkpICsgMSxcbiAgZWFzZU91dFNpbmU6IHQgPT4gTWF0aC5zaW4odCAqIEhBTEZfUEkpLFxuICBlYXNlSW5PdXRTaW5lOiB0ID0+IC0wLjUgKiAoTWF0aC5jb3MoUEkgKiB0KSAtIDEpLFxuICBlYXNlSW5FeHBvOiB0ID0+ICh0ID09PSAwKSA/IDAgOiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpLFxuICBlYXNlT3V0RXhwbzogdCA9PiAodCA9PT0gMSkgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIHQpICsgMSxcbiAgZWFzZUluT3V0RXhwbzogdCA9PiBhdEVkZ2UodCkgPyB0IDogdCA8IDAuNVxuICAgID8gMC41ICogTWF0aC5wb3coMiwgMTAgKiAodCAqIDIgLSAxKSlcbiAgICA6IDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKHQgKiAyIC0gMSkpICsgMiksXG4gIGVhc2VJbkNpcmM6IHQgPT4gKHQgPj0gMSkgPyB0IDogLShNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpLFxuICBlYXNlT3V0Q2lyYzogdCA9PiBNYXRoLnNxcnQoMSAtICh0IC09IDEpICogdCksXG4gIGVhc2VJbk91dENpcmM6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpXG4gICAgOiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSksXG4gIGVhc2VJbkVsYXN0aWM6IHQgPT4gYXRFZGdlKHQpID8gdCA6IGVsYXN0aWNJbih0LCAwLjA3NSwgMC4zKSxcbiAgZWFzZU91dEVsYXN0aWM6IHQgPT4gYXRFZGdlKHQpID8gdCA6IGVsYXN0aWNPdXQodCwgMC4wNzUsIDAuMyksXG4gIGVhc2VJbk91dEVsYXN0aWModCkge1xuICAgIGNvbnN0IHMgPSAwLjExMjU7XG4gICAgY29uc3QgcCA9IDAuNDU7XG4gICAgcmV0dXJuIGF0RWRnZSh0KSA/IHQgOlxuICAgICAgdCA8IDAuNVxuICAgICAgICA/IDAuNSAqIGVsYXN0aWNJbih0ICogMiwgcywgcClcbiAgICAgICAgOiAwLjUgKyAwLjUgKiBlbGFzdGljT3V0KHQgKiAyIC0gMSwgcywgcCk7XG4gIH0sXG4gIGVhc2VJbkJhY2sodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9LFxuICBlYXNlT3V0QmFjayh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuICh0IC09IDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgfSxcbiAgZWFzZUluT3V0QmFjayh0KSB7XG4gICAgbGV0IHMgPSAxLjcwMTU4O1xuICAgIGlmICgodCAvPSAwLjUpIDwgMSkge1xuICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgLSBzKSk7XG4gICAgfVxuICAgIHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCArIHMpICsgMik7XG4gIH0sXG4gIGVhc2VJbkJvdW5jZTogdCA9PiAxIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KSxcbiAgZWFzZU91dEJvdW5jZSh0KSB7XG4gICAgY29uc3QgbSA9IDcuNTYyNTtcbiAgICBjb25zdCBkID0gMi43NTtcbiAgICBpZiAodCA8ICgxIC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogdCAqIHQ7XG4gICAgfVxuICAgIGlmICh0IDwgKDIgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiAodCAtPSAoMS41IC8gZCkpICogdCArIDAuNzU7XG4gICAgfVxuICAgIGlmICh0IDwgKDIuNSAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqICh0IC09ICgyLjI1IC8gZCkpICogdCArIDAuOTM3NTtcbiAgICB9XG4gICAgcmV0dXJuIG0gKiAodCAtPSAoMi42MjUgLyBkKSkgKiB0ICsgMC45ODQzNzU7XG4gIH0sXG4gIGVhc2VJbk91dEJvdW5jZTogdCA9PiAodCA8IDAuNSlcbiAgICA/IGVmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNVxuICAgIDogZWZmZWN0cy5lYXNlT3V0Qm91bmNlKHQgKiAyIC0gMSkgKiAwLjUgKyAwLjUsXG59O1xuXG4vKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMS45XG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjAgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmNvbnN0IG1hcCA9IHswOiAwLCAxOiAxLCAyOiAyLCAzOiAzLCA0OiA0LCA1OiA1LCA2OiA2LCA3OiA3LCA4OiA4LCA5OiA5LCBBOiAxMCwgQjogMTEsIEM6IDEyLCBEOiAxMywgRTogMTQsIEY6IDE1LCBhOiAxMCwgYjogMTEsIGM6IDEyLCBkOiAxMywgZTogMTQsIGY6IDE1fTtcbmNvbnN0IGhleCA9ICcwMTIzNDU2Nzg5QUJDREVGJztcbmNvbnN0IGgxID0gKGIpID0+IGhleFtiICYgMHhGXTtcbmNvbnN0IGgyID0gKGIpID0+IGhleFsoYiAmIDB4RjApID4+IDRdICsgaGV4W2IgJiAweEZdO1xuY29uc3QgZXEgPSAoYikgPT4gKCgoYiAmIDB4RjApID4+IDQpID09PSAoYiAmIDB4RikpO1xuZnVuY3Rpb24gaXNTaG9ydCh2KSB7XG5cdHJldHVybiBlcSh2LnIpICYmIGVxKHYuZykgJiYgZXEodi5iKSAmJiBlcSh2LmEpO1xufVxuZnVuY3Rpb24gaGV4UGFyc2Uoc3RyKSB7XG5cdHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuXHR2YXIgcmV0O1xuXHRpZiAoc3RyWzBdID09PSAnIycpIHtcblx0XHRpZiAobGVuID09PSA0IHx8IGxlbiA9PT0gNSkge1xuXHRcdFx0cmV0ID0ge1xuXHRcdFx0XHRyOiAyNTUgJiBtYXBbc3RyWzFdXSAqIDE3LFxuXHRcdFx0XHRnOiAyNTUgJiBtYXBbc3RyWzJdXSAqIDE3LFxuXHRcdFx0XHRiOiAyNTUgJiBtYXBbc3RyWzNdXSAqIDE3LFxuXHRcdFx0XHRhOiBsZW4gPT09IDUgPyBtYXBbc3RyWzRdXSAqIDE3IDogMjU1XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSBpZiAobGVuID09PSA3IHx8IGxlbiA9PT0gOSkge1xuXHRcdFx0cmV0ID0ge1xuXHRcdFx0XHRyOiBtYXBbc3RyWzFdXSA8PCA0IHwgbWFwW3N0clsyXV0sXG5cdFx0XHRcdGc6IG1hcFtzdHJbM11dIDw8IDQgfCBtYXBbc3RyWzRdXSxcblx0XHRcdFx0YjogbWFwW3N0cls1XV0gPDwgNCB8IG1hcFtzdHJbNl1dLFxuXHRcdFx0XHRhOiBsZW4gPT09IDkgPyAobWFwW3N0cls3XV0gPDwgNCB8IG1hcFtzdHJbOF1dKSA6IDI1NVxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG5cdHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG5cdHJldHVybiB2XG5cdFx0PyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyAodi5hIDwgMjU1ID8gZih2LmEpIDogJycpXG5cdFx0OiB2O1xufVxuZnVuY3Rpb24gcm91bmQodikge1xuXHRyZXR1cm4gdiArIDAuNSB8IDA7XG59XG5jb25zdCBsaW0gPSAodiwgbCwgaCkgPT4gTWF0aC5tYXgoTWF0aC5taW4odiwgaCksIGwpO1xuZnVuY3Rpb24gcDJiKHYpIHtcblx0cmV0dXJuIGxpbShyb3VuZCh2ICogMi41NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuXHRyZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcblx0cmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcblx0cmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cbmNvbnN0IFJHQl9SRSA9IC9ecmdiYT9cXChcXHMqKFstKy5cXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpPyg/OltcXHMsL10rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO1xuZnVuY3Rpb24gcmdiUGFyc2Uoc3RyKSB7XG5cdGNvbnN0IG0gPSBSR0JfUkUuZXhlYyhzdHIpO1xuXHRsZXQgYSA9IDI1NTtcblx0bGV0IHIsIGcsIGI7XG5cdGlmICghbSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAobVs3XSAhPT0gcikge1xuXHRcdGNvbnN0IHYgPSArbVs3XTtcblx0XHRhID0gMjU1ICYgKG1bOF0gPyBwMmIodikgOiB2ICogMjU1KTtcblx0fVxuXHRyID0gK21bMV07XG5cdGcgPSArbVszXTtcblx0YiA9ICttWzVdO1xuXHRyID0gMjU1ICYgKG1bMl0gPyBwMmIocikgOiByKTtcblx0ZyA9IDI1NSAmIChtWzRdID8gcDJiKGcpIDogZyk7XG5cdGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGIpO1xuXHRyZXR1cm4ge1xuXHRcdHI6IHIsXG5cdFx0ZzogZyxcblx0XHRiOiBiLFxuXHRcdGE6IGFcblx0fTtcbn1cbmZ1bmN0aW9uIHJnYlN0cmluZyh2KSB7XG5cdHJldHVybiB2ICYmIChcblx0XHR2LmEgPCAyNTVcblx0XHRcdD8gYHJnYmEoJHt2LnJ9LCAke3YuZ30sICR7di5ifSwgJHtiMm4odi5hKX0pYFxuXHRcdFx0OiBgcmdiKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0pYFxuXHQpO1xufVxuY29uc3QgSFVFX1JFID0gL14oaHNsYT98aHdifGhzdilcXChcXHMqKFstKy5lXFxkXSspKD86ZGVnKT9bXFxzLF0rKFstKy5lXFxkXSspJVtcXHMsXSsoWy0rLmVcXGRdKyklKD86W1xccyxdKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIGhzbDJyZ2JuKGgsIHMsIGwpIHtcblx0Y29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cdGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcblx0cmV0dXJuIFtmKDApLCBmKDgpLCBmKDQpXTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2JuKGgsIHMsIHYpIHtcblx0Y29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gNjApICUgNikgPT4gdiAtIHYgKiBzICogTWF0aC5tYXgoTWF0aC5taW4oaywgNCAtIGssIDEpLCAwKTtcblx0cmV0dXJuIFtmKDUpLCBmKDMpLCBmKDEpXTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2JuKGgsIHcsIGIpIHtcblx0Y29uc3QgcmdiID0gaHNsMnJnYm4oaCwgMSwgMC41KTtcblx0bGV0IGk7XG5cdGlmICh3ICsgYiA+IDEpIHtcblx0XHRpID0gMSAvICh3ICsgYik7XG5cdFx0dyAqPSBpO1xuXHRcdGIgKj0gaTtcblx0fVxuXHRmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0cmdiW2ldICo9IDEgLSB3IC0gYjtcblx0XHRyZ2JbaV0gKz0gdztcblx0fVxuXHRyZXR1cm4gcmdiO1xufVxuZnVuY3Rpb24gcmdiMmhzbCh2KSB7XG5cdGNvbnN0IHJhbmdlID0gMjU1O1xuXHRjb25zdCByID0gdi5yIC8gcmFuZ2U7XG5cdGNvbnN0IGcgPSB2LmcgLyByYW5nZTtcblx0Y29uc3QgYiA9IHYuYiAvIHJhbmdlO1xuXHRjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcblx0Y29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG5cdGNvbnN0IGwgPSAobWF4ICsgbWluKSAvIDI7XG5cdGxldCBoLCBzLCBkO1xuXHRpZiAobWF4ICE9PSBtaW4pIHtcblx0XHRkID0gbWF4IC0gbWluO1xuXHRcdHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcblx0XHRoID0gbWF4ID09PSByXG5cdFx0XHQ/ICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMClcblx0XHRcdDogbWF4ID09PSBnXG5cdFx0XHRcdD8gKGIgLSByKSAvIGQgKyAyXG5cdFx0XHRcdDogKHIgLSBnKSAvIGQgKyA0O1xuXHRcdGggPSBoICogNjAgKyAwLjU7XG5cdH1cblx0cmV0dXJuIFtoIHwgMCwgcyB8fCAwLCBsXTtcbn1cbmZ1bmN0aW9uIGNhbGxuKGYsIGEsIGIsIGMpIHtcblx0cmV0dXJuIChcblx0XHRBcnJheS5pc0FycmF5KGEpXG5cdFx0XHQ/IGYoYVswXSwgYVsxXSwgYVsyXSlcblx0XHRcdDogZihhLCBiLCBjKVxuXHQpLm1hcChuMmIpO1xufVxuZnVuY3Rpb24gaHNsMnJnYihoLCBzLCBsKSB7XG5cdHJldHVybiBjYWxsbihoc2wycmdibiwgaCwgcywgbCk7XG59XG5mdW5jdGlvbiBod2IycmdiKGgsIHcsIGIpIHtcblx0cmV0dXJuIGNhbGxuKGh3YjJyZ2JuLCBoLCB3LCBiKTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2IoaCwgcywgdikge1xuXHRyZXR1cm4gY2FsbG4oaHN2MnJnYm4sIGgsIHMsIHYpO1xufVxuZnVuY3Rpb24gaHVlKGgpIHtcblx0cmV0dXJuIChoICUgMzYwICsgMzYwKSAlIDM2MDtcbn1cbmZ1bmN0aW9uIGh1ZVBhcnNlKHN0cikge1xuXHRjb25zdCBtID0gSFVFX1JFLmV4ZWMoc3RyKTtcblx0bGV0IGEgPSAyNTU7XG5cdGxldCB2O1xuXHRpZiAoIW0pIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKG1bNV0gIT09IHYpIHtcblx0XHRhID0gbVs2XSA/IHAyYigrbVs1XSkgOiBuMmIoK21bNV0pO1xuXHR9XG5cdGNvbnN0IGggPSBodWUoK21bMl0pO1xuXHRjb25zdCBwMSA9ICttWzNdIC8gMTAwO1xuXHRjb25zdCBwMiA9ICttWzRdIC8gMTAwO1xuXHRpZiAobVsxXSA9PT0gJ2h3YicpIHtcblx0XHR2ID0gaHdiMnJnYihoLCBwMSwgcDIpO1xuXHR9IGVsc2UgaWYgKG1bMV0gPT09ICdoc3YnKSB7XG5cdFx0diA9IGhzdjJyZ2IoaCwgcDEsIHAyKTtcblx0fSBlbHNlIHtcblx0XHR2ID0gaHNsMnJnYihoLCBwMSwgcDIpO1xuXHR9XG5cdHJldHVybiB7XG5cdFx0cjogdlswXSxcblx0XHRnOiB2WzFdLFxuXHRcdGI6IHZbMl0sXG5cdFx0YTogYVxuXHR9O1xufVxuZnVuY3Rpb24gcm90YXRlKHYsIGRlZykge1xuXHR2YXIgaCA9IHJnYjJoc2wodik7XG5cdGhbMF0gPSBodWUoaFswXSArIGRlZyk7XG5cdGggPSBoc2wycmdiKGgpO1xuXHR2LnIgPSBoWzBdO1xuXHR2LmcgPSBoWzFdO1xuXHR2LmIgPSBoWzJdO1xufVxuZnVuY3Rpb24gaHNsU3RyaW5nKHYpIHtcblx0aWYgKCF2KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IGEgPSByZ2IyaHNsKHYpO1xuXHRjb25zdCBoID0gYVswXTtcblx0Y29uc3QgcyA9IG4ycChhWzFdKTtcblx0Y29uc3QgbCA9IG4ycChhWzJdKTtcblx0cmV0dXJuIHYuYSA8IDI1NVxuXHRcdD8gYGhzbGEoJHtofSwgJHtzfSUsICR7bH0lLCAke2Iybih2LmEpfSlgXG5cdFx0OiBgaHNsKCR7aH0sICR7c30lLCAke2x9JSlgO1xufVxuY29uc3QgbWFwJDEgPSB7XG5cdHg6ICdkYXJrJyxcblx0WjogJ2xpZ2h0Jyxcblx0WTogJ3JlJyxcblx0WDogJ2JsdScsXG5cdFc6ICdncicsXG5cdFY6ICdtZWRpdW0nLFxuXHRVOiAnc2xhdGUnLFxuXHRBOiAnZWUnLFxuXHRUOiAnb2wnLFxuXHRTOiAnb3InLFxuXHRCOiAncmEnLFxuXHRDOiAnbGF0ZWcnLFxuXHREOiAnaWdodHMnLFxuXHRSOiAnaW4nLFxuXHRROiAndHVycXVvaXMnLFxuXHRFOiAnaGknLFxuXHRQOiAncm8nLFxuXHRPOiAnYWwnLFxuXHROOiAnbGUnLFxuXHRNOiAnZGUnLFxuXHRMOiAneWVsbG8nLFxuXHRGOiAnZW4nLFxuXHRLOiAnY2gnLFxuXHRHOiAnYXJrcycsXG5cdEg6ICdlYScsXG5cdEk6ICdpZ2h0ZycsXG5cdEo6ICd3aCdcbn07XG5jb25zdCBuYW1lcyA9IHtcblx0T2ljZVhlOiAnZjBmOGZmJyxcblx0YW50aXF1ZXdFdGU6ICdmYWViZDcnLFxuXHRhcXVhOiAnZmZmZicsXG5cdGFxdWFtYXJSZTogJzdmZmZkNCcsXG5cdGF6dVk6ICdmMGZmZmYnLFxuXHRiZWlnZTogJ2Y1ZjVkYycsXG5cdGJpc3F1ZTogJ2ZmZTRjNCcsXG5cdGJsYWNrOiAnMCcsXG5cdGJsYW5LZWRPbW9uZDogJ2ZmZWJjZCcsXG5cdFhlOiAnZmYnLFxuXHRYZXZpVGV0OiAnOGEyYmUyJyxcblx0YlB3bjogJ2E1MmEyYScsXG5cdGJ1cmx5d29vZDogJ2RlYjg4NycsXG5cdGNhTXRYZTogJzVmOWVhMCcsXG5cdEthcnRZdXNlOiAnN2ZmZjAwJyxcblx0S29jVGF0ZTogJ2QyNjkxZScsXG5cdGNTTzogJ2ZmN2Y1MCcsXG5cdGNTbmZsb3dlclhlOiAnNjQ5NWVkJyxcblx0Y1Nuc2lsazogJ2ZmZjhkYycsXG5cdGNyaW1zb246ICdkYzE0M2MnLFxuXHRjeWFuOiAnZmZmZicsXG5cdHhYZTogJzhiJyxcblx0eGN5YW46ICc4YjhiJyxcblx0eGdUTW5QZDogJ2I4ODYwYicsXG5cdHhXYXk6ICdhOWE5YTknLFxuXHR4Z1lGOiAnNjQwMCcsXG5cdHhnWXk6ICdhOWE5YTknLFxuXHR4a2hha2k6ICdiZGI3NmInLFxuXHR4bWFnRnRhOiAnOGIwMDhiJyxcblx0eFRpdmVnWUY6ICc1NTZiMmYnLFxuXHR4U2FuZ2U6ICdmZjhjMDAnLFxuXHR4U2NFZDogJzk5MzJjYycsXG5cdHhZZDogJzhiMDAwMCcsXG5cdHhzT21vbjogJ2U5OTY3YScsXG5cdHhzSGdZRjogJzhmYmM4ZicsXG5cdHhVWGU6ICc0ODNkOGInLFxuXHR4VVdheTogJzJmNGY0ZicsXG5cdHhVZ1l5OiAnMmY0ZjRmJyxcblx0eFFlOiAnY2VkMScsXG5cdHh2aVRldDogJzk0MDBkMycsXG5cdGRBcHBSazogJ2ZmMTQ5MycsXG5cdGRBcHNreVhlOiAnYmZmZicsXG5cdGRpbVdheTogJzY5Njk2OScsXG5cdGRpbWdZeTogJzY5Njk2OScsXG5cdGRvZGdlclhlOiAnMWU5MGZmJyxcblx0ZmlZYnJpY2s6ICdiMjIyMjInLFxuXHRmbFNPd0V0ZTogJ2ZmZmFmMCcsXG5cdGZvWXN0V0FuOiAnMjI4YjIyJyxcblx0ZnVLc2lhOiAnZmYwMGZmJyxcblx0Z2FSc2JTbzogJ2RjZGNkYycsXG5cdGdob3N0d0V0ZTogJ2Y4ZjhmZicsXG5cdGdUZDogJ2ZmZDcwMCcsXG5cdGdUTW5QZDogJ2RhYTUyMCcsXG5cdFdheTogJzgwODA4MCcsXG5cdGdZRjogJzgwMDAnLFxuXHRnWUZMdzogJ2FkZmYyZicsXG5cdGdZeTogJzgwODA4MCcsXG5cdGhvbmV5TXc6ICdmMGZmZjAnLFxuXHRob3RwUms6ICdmZjY5YjQnLFxuXHRSZGlhbllkOiAnY2Q1YzVjJyxcblx0UmRpZ286ICc0YjAwODInLFxuXHRpdlN5OiAnZmZmZmYwJyxcblx0a2hha2k6ICdmMGU2OGMnLFxuXHRsYXZGTXI6ICdlNmU2ZmEnLFxuXHRsYXZGTXJYc2g6ICdmZmYwZjUnLFxuXHRsYXduZ1lGOiAnN2NmYzAwJyxcblx0Tm1vbmNFZmZvbjogJ2ZmZmFjZCcsXG5cdFpYZTogJ2FkZDhlNicsXG5cdFpjU086ICdmMDgwODAnLFxuXHRaY3lhbjogJ2UwZmZmZicsXG5cdFpnVE1uUGRMdzogJ2ZhZmFkMicsXG5cdFpXYXk6ICdkM2QzZDMnLFxuXHRaZ1lGOiAnOTBlZTkwJyxcblx0WmdZeTogJ2QzZDNkMycsXG5cdFpwUms6ICdmZmI2YzEnLFxuXHRac09tb246ICdmZmEwN2EnLFxuXHRac0hnWUY6ICcyMGIyYWEnLFxuXHRac2t5WGU6ICc4N2NlZmEnLFxuXHRaVVdheTogJzc3ODg5OScsXG5cdFpVZ1l5OiAnNzc4ODk5Jyxcblx0WnN0QWxYZTogJ2IwYzRkZScsXG5cdFpMdzogJ2ZmZmZlMCcsXG5cdGxpbWU6ICdmZjAwJyxcblx0bGltZWdZRjogJzMyY2QzMicsXG5cdGxSRjogJ2ZhZjBlNicsXG5cdG1hZ0Z0YTogJ2ZmMDBmZicsXG5cdG1hUG9uOiAnODAwMDAwJyxcblx0VmFxdWFtYXJSZTogJzY2Y2RhYScsXG5cdFZYZTogJ2NkJyxcblx0VlNjRWQ6ICdiYTU1ZDMnLFxuXHRWcHVycE46ICc5MzcwZGInLFxuXHRWc0hnWUY6ICczY2IzNzEnLFxuXHRWVVhlOiAnN2I2OGVlJyxcblx0VnNwclJnZ1lGOiAnZmE5YScsXG5cdFZRZTogJzQ4ZDFjYycsXG5cdFZ2aVRldFlkOiAnYzcxNTg1Jyxcblx0bWlkbmlnaHRYZTogJzE5MTk3MCcsXG5cdG1SdGNZYW06ICdmNWZmZmEnLFxuXHRtaXN0eVBzZTogJ2ZmZTRlMScsXG5cdG1vY2Nhc1I6ICdmZmU0YjUnLFxuXHRuYXZham93RXRlOiAnZmZkZWFkJyxcblx0bmF2eTogJzgwJyxcblx0VGRsYWNlOiAnZmRmNWU2Jyxcblx0VGl2ZTogJzgwODAwMCcsXG5cdFRpdmVkQmI6ICc2YjhlMjMnLFxuXHRTYW5nZTogJ2ZmYTUwMCcsXG5cdFNhbmdlWWQ6ICdmZjQ1MDAnLFxuXHRTY0VkOiAnZGE3MGQ2Jyxcblx0cE9lZ1RNblBkOiAnZWVlOGFhJyxcblx0cE9lZ1lGOiAnOThmYjk4Jyxcblx0cE9lUWU6ICdhZmVlZWUnLFxuXHRwT2V2aVRldFlkOiAnZGI3MDkzJyxcblx0cGFwYXlhd0VwOiAnZmZlZmQ1Jyxcblx0cEhLcHVmZjogJ2ZmZGFiOScsXG5cdHBlcnU6ICdjZDg1M2YnLFxuXHRwUms6ICdmZmMwY2InLFxuXHRwbHVtOiAnZGRhMGRkJyxcblx0cG93TXJYZTogJ2IwZTBlNicsXG5cdHB1cnBOOiAnODAwMDgwJyxcblx0WWJlY2NhcHVycE46ICc2NjMzOTknLFxuXHRZZDogJ2ZmMDAwMCcsXG5cdFBzeWJyb3duOiAnYmM4ZjhmJyxcblx0UHlPWGU6ICc0MTY5ZTEnLFxuXHRzYWRkTmJQd246ICc4YjQ1MTMnLFxuXHRzT21vbjogJ2ZhODA3MicsXG5cdHNhbmR5YlB3bjogJ2Y0YTQ2MCcsXG5cdHNIZ1lGOiAnMmU4YjU3Jyxcblx0c0hzaGVsbDogJ2ZmZjVlZScsXG5cdHNpRm5hOiAnYTA1MjJkJyxcblx0c2lsdmVyOiAnYzBjMGMwJyxcblx0c2t5WGU6ICc4N2NlZWInLFxuXHRVWGU6ICc2YTVhY2QnLFxuXHRVV2F5OiAnNzA4MDkwJyxcblx0VWdZeTogJzcwODA5MCcsXG5cdHNub3c6ICdmZmZhZmEnLFxuXHRzcHJSZ2dZRjogJ2ZmN2YnLFxuXHRzdEFsWGU6ICc0NjgyYjQnLFxuXHR0YW46ICdkMmI0OGMnLFxuXHR0ZU86ICc4MDgwJyxcblx0dEVzdE46ICdkOGJmZDgnLFxuXHR0b21hdG86ICdmZjYzNDcnLFxuXHRRZTogJzQwZTBkMCcsXG5cdHZpVGV0OiAnZWU4MmVlJyxcblx0Skh0OiAnZjVkZWIzJyxcblx0d0V0ZTogJ2ZmZmZmZicsXG5cdHdFdGVzbW9rZTogJ2Y1ZjVmNScsXG5cdEx3OiAnZmZmZjAwJyxcblx0THdnWUY6ICc5YWNkMzInXG59O1xuZnVuY3Rpb24gdW5wYWNrKCkge1xuXHRjb25zdCB1bnBhY2tlZCA9IHt9O1xuXHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmFtZXMpO1xuXHRjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCQxKTtcblx0bGV0IGksIGosIGssIG9rLCBuaztcblx0Zm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRvayA9IG5rID0ga2V5c1tpXTtcblx0XHRmb3IgKGogPSAwOyBqIDwgdGtleXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGsgPSB0a2V5c1tqXTtcblx0XHRcdG5rID0gbmsucmVwbGFjZShrLCBtYXAkMVtrXSk7XG5cdFx0fVxuXHRcdGsgPSBwYXJzZUludChuYW1lc1tva10sIDE2KTtcblx0XHR1bnBhY2tlZFtua10gPSBbayA+PiAxNiAmIDB4RkYsIGsgPj4gOCAmIDB4RkYsIGsgJiAweEZGXTtcblx0fVxuXHRyZXR1cm4gdW5wYWNrZWQ7XG59XG5sZXQgbmFtZXMkMTtcbmZ1bmN0aW9uIG5hbWVQYXJzZShzdHIpIHtcblx0aWYgKCFuYW1lcyQxKSB7XG5cdFx0bmFtZXMkMSA9IHVucGFjaygpO1xuXHRcdG5hbWVzJDEudHJhbnNwYXJlbnQgPSBbMCwgMCwgMCwgMF07XG5cdH1cblx0Y29uc3QgYSA9IG5hbWVzJDFbc3RyLnRvTG93ZXJDYXNlKCldO1xuXHRyZXR1cm4gYSAmJiB7XG5cdFx0cjogYVswXSxcblx0XHRnOiBhWzFdLFxuXHRcdGI6IGFbMl0sXG5cdFx0YTogYS5sZW5ndGggPT09IDQgPyBhWzNdIDogMjU1XG5cdH07XG59XG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcblx0aWYgKHYpIHtcblx0XHRsZXQgdG1wID0gcmdiMmhzbCh2KTtcblx0XHR0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcblx0XHR0bXAgPSBoc2wycmdiKHRtcCk7XG5cdFx0di5yID0gdG1wWzBdO1xuXHRcdHYuZyA9IHRtcFsxXTtcblx0XHR2LmIgPSB0bXBbMl07XG5cdH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG5cdHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuXHR2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcblx0XHRcdHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcblx0XHRcdGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG5cdFx0XHRcdHYuYSA9IG4yYihpbnB1dFszXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcblx0XHR2LmEgPSBuMmIodi5hKTtcblx0fVxuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG5cdGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcblx0XHRyZXR1cm4gcmdiUGFyc2Uoc3RyKTtcblx0fVxuXHRyZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcblx0Y29uc3RydWN0b3IoaW5wdXQpIHtcblx0XHRpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuXHRcdFx0cmV0dXJuIGlucHV0O1xuXHRcdH1cblx0XHRjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuXHRcdGxldCB2O1xuXHRcdGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0diA9IGZyb21PYmplY3QoaW5wdXQpO1xuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcblx0XHR9XG5cdFx0dGhpcy5fcmdiID0gdjtcblx0XHR0aGlzLl92YWxpZCA9ICEhdjtcblx0fVxuXHRnZXQgdmFsaWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbGlkO1xuXHR9XG5cdGdldCByZ2IoKSB7XG5cdFx0dmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuXHRcdGlmICh2KSB7XG5cdFx0XHR2LmEgPSBiMm4odi5hKTtcblx0XHR9XG5cdFx0cmV0dXJuIHY7XG5cdH1cblx0c2V0IHJnYihvYmopIHtcblx0XHR0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG5cdH1cblx0cmdiU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdGhpcy5fcmdiO1xuXHR9XG5cdGhleFN0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHRoaXMuX3JnYjtcblx0fVxuXHRoc2xTdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB0aGlzLl9yZ2I7XG5cdH1cblx0bWl4KGNvbG9yLCB3ZWlnaHQpIHtcblx0XHRjb25zdCBtZSA9IHRoaXM7XG5cdFx0aWYgKGNvbG9yKSB7XG5cdFx0XHRjb25zdCBjMSA9IG1lLnJnYjtcblx0XHRcdGNvbnN0IGMyID0gY29sb3IucmdiO1xuXHRcdFx0bGV0IHcyO1xuXHRcdFx0Y29uc3QgcCA9IHdlaWdodCA9PT0gdzIgPyAwLjUgOiB3ZWlnaHQ7XG5cdFx0XHRjb25zdCB3ID0gMiAqIHAgLSAxO1xuXHRcdFx0Y29uc3QgYSA9IGMxLmEgLSBjMi5hO1xuXHRcdFx0Y29uc3QgdzEgPSAoKHcgKiBhID09PSAtMSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG5cdFx0XHR3MiA9IDEgLSB3MTtcblx0XHRcdGMxLnIgPSAweEZGICYgdzEgKiBjMS5yICsgdzIgKiBjMi5yICsgMC41O1xuXHRcdFx0YzEuZyA9IDB4RkYgJiB3MSAqIGMxLmcgKyB3MiAqIGMyLmcgKyAwLjU7XG5cdFx0XHRjMS5iID0gMHhGRiAmIHcxICogYzEuYiArIHcyICogYzIuYiArIDAuNTtcblx0XHRcdGMxLmEgPSBwICogYzEuYSArICgxIC0gcCkgKiBjMi5hO1xuXHRcdFx0bWUucmdiID0gYzE7XG5cdFx0fVxuXHRcdHJldHVybiBtZTtcblx0fVxuXHRjbG9uZSgpIHtcblx0XHRyZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcblx0fVxuXHRhbHBoYShhKSB7XG5cdFx0dGhpcy5fcmdiLmEgPSBuMmIoYSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0Y2xlYXJlcihyYXRpbykge1xuXHRcdGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcblx0XHRyZ2IuYSAqPSAxIC0gcmF0aW87XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0Z3JleXNjYWxlKCkge1xuXHRcdGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcblx0XHRjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG5cdFx0cmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdG9wYXF1ZXIocmF0aW8pIHtcblx0XHRjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG5cdFx0cmdiLmEgKj0gMSArIHJhdGlvO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdG5lZ2F0ZSgpIHtcblx0XHRjb25zdCB2ID0gdGhpcy5fcmdiO1xuXHRcdHYuciA9IDI1NSAtIHYucjtcblx0XHR2LmcgPSAyNTUgLSB2Lmc7XG5cdFx0di5iID0gMjU1IC0gdi5iO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGxpZ2h0ZW4ocmF0aW8pIHtcblx0XHRtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0ZGFya2VuKHJhdGlvKSB7XG5cdFx0bW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRzYXR1cmF0ZShyYXRpbykge1xuXHRcdG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRkZXNhdHVyYXRlKHJhdGlvKSB7XG5cdFx0bW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRyb3RhdGUoZGVnKSB7XG5cdFx0cm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuZnVuY3Rpb24gaW5kZXhfZXNtKGlucHV0KSB7XG5cdHJldHVybiBuZXcgQ29sb3IoaW5wdXQpO1xufVxuXG5jb25zdCBpc1BhdHRlcm5PckdyYWRpZW50ID0gKHZhbHVlKSA9PiB2YWx1ZSBpbnN0YW5jZW9mIENhbnZhc0dyYWRpZW50IHx8IHZhbHVlIGluc3RhbmNlb2YgQ2FudmFzUGF0dGVybjtcbmZ1bmN0aW9uIGNvbG9yKHZhbHVlKSB7XG4gIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogaW5kZXhfZXNtKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEhvdmVyQ29sb3IodmFsdWUpIHtcbiAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpXG4gICAgPyB2YWx1ZVxuICAgIDogaW5kZXhfZXNtKHZhbHVlKS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLmhleFN0cmluZygpO1xufVxuXG5jb25zdCBvdmVycmlkZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gZ2V0U2NvcGUkMShub2RlLCBrZXkpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gIGZvciAobGV0IGkgPSAwLCBuID0ga2V5cy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjb25zdCBrID0ga2V5c1tpXTtcbiAgICBub2RlID0gbm9kZVtrXSB8fCAobm9kZVtrXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBzY29wZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgJycpLCBzY29wZSk7XG59XG5jbGFzcyBEZWZhdWx0cyB7XG4gIGNvbnN0cnVjdG9yKF9kZXNjcmlwdG9ycykge1xuICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgdGhpcy5ib3JkZXJDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgdGhpcy5kYXRhc2V0cyA9IHt9O1xuICAgIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyA9IChjb250ZXh0KSA9PiBjb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICB0aGlzLmVsZW1lbnRzID0ge307XG4gICAgdGhpcy5ldmVudHMgPSBbXG4gICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICdtb3VzZW91dCcsXG4gICAgICAnY2xpY2snLFxuICAgICAgJ3RvdWNoc3RhcnQnLFxuICAgICAgJ3RvdWNobW92ZSdcbiAgICBdO1xuICAgIHRoaXMuZm9udCA9IHtcbiAgICAgIGZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuICAgICAgc2l6ZTogMTIsXG4gICAgICBzdHlsZTogJ25vcm1hbCcsXG4gICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICB3ZWlnaHQ6IG51bGxcbiAgICB9O1xuICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICB0aGlzLmhvdmVyQmFja2dyb3VuZENvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcik7XG4gICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKTtcbiAgICB0aGlzLmhvdmVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgIHRoaXMuaW5kZXhBeGlzID0gJ3gnO1xuICAgIHRoaXMuaW50ZXJhY3Rpb24gPSB7XG4gICAgICBtb2RlOiAnbmVhcmVzdCcsXG4gICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICB9O1xuICAgIHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gICAgdGhpcy5vbkhvdmVyID0gbnVsbDtcbiAgICB0aGlzLm9uQ2xpY2sgPSBudWxsO1xuICAgIHRoaXMucGFyc2luZyA9IHRydWU7XG4gICAgdGhpcy5wbHVnaW5zID0ge307XG4gICAgdGhpcy5yZXNwb25zaXZlID0gdHJ1ZTtcbiAgICB0aGlzLnNjYWxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgdGhpcy5zaG93TGluZSA9IHRydWU7XG4gICAgdGhpcy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRydWU7XG4gICAgdGhpcy5kZXNjcmliZShfZGVzY3JpcHRvcnMpO1xuICB9XG4gIHNldChzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldCh0aGlzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICBnZXQoc2NvcGUpIHtcbiAgICByZXR1cm4gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gIH1cbiAgZGVzY3JpYmUoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQoZGVzY3JpcHRvcnMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIG92ZXJyaWRlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KG92ZXJyaWRlcywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgcm91dGUoc2NvcGUsIG5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKSB7XG4gICAgY29uc3Qgc2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgICBjb25zdCB0YXJnZXRTY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgdGFyZ2V0U2NvcGUpO1xuICAgIGNvbnN0IHByaXZhdGVOYW1lID0gJ18nICsgbmFtZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY29wZU9iamVjdCwge1xuICAgICAgW3ByaXZhdGVOYW1lXToge1xuICAgICAgICB2YWx1ZTogc2NvcGVPYmplY3RbbmFtZV0sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgW25hbWVdOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBjb25zdCBsb2NhbCA9IHRoaXNbcHJpdmF0ZU5hbWVdO1xuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNjb3BlT2JqZWN0W3RhcmdldE5hbWVdO1xuICAgICAgICAgIGlmIChpc09iamVjdChsb2NhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQsIGxvY2FsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KGxvY2FsLCB0YXJnZXQpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbnZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cyh7XG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gIW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdldmVudHMnLFxuICBob3Zlcjoge1xuICAgIF9mYWxsYmFjazogJ2ludGVyYWN0aW9uJ1xuICB9LFxuICBpbnRlcmFjdGlvbjoge1xuICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRvRm9udFN0cmluZyhmb250KSB7XG4gIGlmICghZm9udCB8fCBpc051bGxPclVuZGVmKGZvbnQuc2l6ZSkgfHwgaXNOdWxsT3JVbmRlZihmb250LmZhbWlseSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gKGZvbnQuc3R5bGUgPyBmb250LnN0eWxlICsgJyAnIDogJycpXG5cdFx0KyAoZm9udC53ZWlnaHQgPyBmb250LndlaWdodCArICcgJyA6ICcnKVxuXHRcdCsgZm9udC5zaXplICsgJ3B4ICdcblx0XHQrIGZvbnQuZmFtaWx5O1xufVxuZnVuY3Rpb24gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHN0cmluZykge1xuICBsZXQgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddO1xuICBpZiAoIXRleHRXaWR0aCkge1xuICAgIHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuICAgIGdjLnB1c2goc3RyaW5nKTtcbiAgfVxuICBpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuICAgIGxvbmdlc3QgPSB0ZXh0V2lkdGg7XG4gIH1cbiAgcmV0dXJuIGxvbmdlc3Q7XG59XG5mdW5jdGlvbiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LCBhcnJheU9mVGhpbmdzLCBjYWNoZSkge1xuICBjYWNoZSA9IGNhY2hlIHx8IHt9O1xuICBsZXQgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuICBsZXQgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0IHx8IFtdO1xuICBpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuICAgIGRhdGEgPSBjYWNoZS5kYXRhID0ge307XG4gICAgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IFtdO1xuICAgIGNhY2hlLmZvbnQgPSBmb250O1xuICB9XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gZm9udDtcbiAgbGV0IGxvbmdlc3QgPSAwO1xuICBjb25zdCBpbGVuID0gYXJyYXlPZlRoaW5ncy5sZW5ndGg7XG4gIGxldCBpLCBqLCBqbGVuLCB0aGluZywgbmVzdGVkVGhpbmc7XG4gIGZvciAoaSA9IDA7IGkgPCBpbGVuOyBpKyspIHtcbiAgICB0aGluZyA9IGFycmF5T2ZUaGluZ3NbaV07XG4gICAgaWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgaXNBcnJheSh0aGluZykgIT09IHRydWUpIHtcbiAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0aGluZykpIHtcbiAgICAgIGZvciAoaiA9IDAsIGpsZW4gPSB0aGluZy5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgICAgbmVzdGVkVGhpbmcgPSB0aGluZ1tqXTtcbiAgICAgICAgaWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkobmVzdGVkVGhpbmcpKSB7XG4gICAgICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBuZXN0ZWRUaGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY3R4LnJlc3RvcmUoKTtcbiAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICBpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBnY0xlbjsgaSsrKSB7XG4gICAgICBkZWxldGUgZGF0YVtnY1tpXV07XG4gICAgfVxuICAgIGdjLnNwbGljZSgwLCBnY0xlbik7XG4gIH1cbiAgcmV0dXJuIGxvbmdlc3Q7XG59XG5mdW5jdGlvbiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIHdpZHRoKSB7XG4gIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbztcbiAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggIT09IDAgPyBNYXRoLm1heCh3aWR0aCAvIDIsIDAuNSkgOiAwO1xuICByZXR1cm4gTWF0aC5yb3VuZCgocGl4ZWwgLSBoYWxmV2lkdGgpICogZGV2aWNlUGl4ZWxSYXRpbykgLyBkZXZpY2VQaXhlbFJhdGlvICsgaGFsZldpZHRoO1xufVxuZnVuY3Rpb24gY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpIHtcbiAgY3R4ID0gY3R4IHx8IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBjdHguc2F2ZSgpO1xuICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgeCwgeSkge1xuICBsZXQgdHlwZSwgeE9mZnNldCwgeU9mZnNldCwgc2l6ZSwgY29ybmVyUmFkaXVzO1xuICBjb25zdCBzdHlsZSA9IG9wdGlvbnMucG9pbnRTdHlsZTtcbiAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uO1xuICBjb25zdCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cztcbiAgbGV0IHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuICBpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuICAgIHR5cGUgPSBzdHlsZS50b1N0cmluZygpO1xuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdJykge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgICBjdHgucm90YXRlKHJhZCk7XG4gICAgICBjdHguZHJhd0ltYWdlKHN0eWxlLCAtc3R5bGUud2lkdGggLyAyLCAtc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIHN3aXRjaCAoc3R5bGUpIHtcbiAgZGVmYXVsdDpcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgVEFVKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICBjb3JuZXJSYWRpdXMgPSByYWRpdXMgKiAwLjUxNjtcbiAgICBzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICBjdHguYXJjKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG4gICAgY3R4LmFyYyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gSEFMRl9QSSwgcmFkKTtcbiAgICBjdHguYXJjKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQsIHJhZCArIEhBTEZfUEkpO1xuICAgIGN0eC5hcmMoeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3QnOlxuICAgIGlmICghcm90YXRpb24pIHtcbiAgICAgIHNpemUgPSBNYXRoLlNRUlQxXzIgKiByYWRpdXM7XG4gICAgICBjdHgucmVjdCh4IC0gc2l6ZSwgeSAtIHNpemUsIDIgKiBzaXplLCAyICogc2l6ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gIGNhc2UgJ3JlY3RSb3QnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2Nyb3NzUm90JzpcbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgY2FzZSAnY3Jvc3MnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnc3Rhcic6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnbGluZSc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnZGFzaCc6XG4gICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLmNvcyhyYWQpICogcmFkaXVzLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG4gICAgYnJlYWs7XG4gIH1cbiAgY3R4LmZpbGwoKTtcbiAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBfaXNQb2ludEluQXJlYShwb2ludCwgYXJlYSwgbWFyZ2luKSB7XG4gIG1hcmdpbiA9IG1hcmdpbiB8fCAwLjU7XG4gIHJldHVybiAhYXJlYSB8fCAocG9pbnQgJiYgcG9pbnQueCA+IGFyZWEubGVmdCAtIG1hcmdpbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIG1hcmdpbiAmJlxuXHRcdHBvaW50LnkgPiBhcmVhLnRvcCAtIG1hcmdpbiAmJiBwb2ludC55IDwgYXJlYS5ib3R0b20gKyBtYXJnaW4pO1xufVxuZnVuY3Rpb24gY2xpcEFyZWEoY3R4LCBhcmVhKSB7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB1bmNsaXBBcmVhKGN0eCkge1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gX3N0ZXBwZWRMaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwLCBtb2RlKSB7XG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICB9XG4gIGlmIChtb2RlID09PSAnbWlkZGxlJykge1xuICAgIGNvbnN0IG1pZHBvaW50ID0gKHByZXZpb3VzLnggKyB0YXJnZXQueCkgLyAyLjA7XG4gICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgcHJldmlvdXMueSk7XG4gICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgdGFyZ2V0LnkpO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09ICdhZnRlcicgIT09ICEhZmxpcCkge1xuICAgIGN0eC5saW5lVG8ocHJldmlvdXMueCwgdGFyZ2V0LnkpO1xuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHByZXZpb3VzLnkpO1xuICB9XG4gIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIF9iZXppZXJDdXJ2ZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCkge1xuICBpZiAoIXByZXZpb3VzKSB7XG4gICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgfVxuICBjdHguYmV6aWVyQ3VydmVUbyhcbiAgICBmbGlwID8gcHJldmlvdXMuY3AxeCA6IHByZXZpb3VzLmNwMngsXG4gICAgZmxpcCA/IHByZXZpb3VzLmNwMXkgOiBwcmV2aW91cy5jcDJ5LFxuICAgIGZsaXAgPyB0YXJnZXQuY3AyeCA6IHRhcmdldC5jcDF4LFxuICAgIGZsaXAgPyB0YXJnZXQuY3AyeSA6IHRhcmdldC5jcDF5LFxuICAgIHRhcmdldC54LFxuICAgIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIHJlbmRlclRleHQoY3R4LCB0ZXh0LCB4LCB5LCBmb250LCBvcHRzID0ge30pIHtcbiAgY29uc3QgbGluZXMgPSBpc0FycmF5KHRleHQpID8gdGV4dCA6IFt0ZXh0XTtcbiAgY29uc3Qgc3Ryb2tlID0gb3B0cy5zdHJva2VXaWR0aCA+IDAgJiYgb3B0cy5zdHJva2VDb2xvciAhPT0gJyc7XG4gIGxldCBpLCBsaW5lO1xuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IGZvbnQuc3RyaW5nO1xuICBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cyk7XG4gIGZvciAoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICBpZiAob3B0cy5zdHJva2VDb2xvcikge1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLnN0cm9rZUNvbG9yO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMuc3Ryb2tlV2lkdGgpKSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoO1xuICAgICAgfVxuICAgICAgY3R4LnN0cm9rZVRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgfVxuICAgIGN0eC5maWxsVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKTtcbiAgICB5ICs9IGZvbnQubGluZUhlaWdodDtcbiAgfVxuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpIHtcbiAgaWYgKG9wdHMudHJhbnNsYXRpb24pIHtcbiAgICBjdHgudHJhbnNsYXRlKG9wdHMudHJhbnNsYXRpb25bMF0sIG9wdHMudHJhbnNsYXRpb25bMV0pO1xuICB9XG4gIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnJvdGF0aW9uKSkge1xuICAgIGN0eC5yb3RhdGUob3B0cy5yb3RhdGlvbik7XG4gIH1cbiAgaWYgKG9wdHMuY29sb3IpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcbiAgfVxuICBpZiAob3B0cy50ZXh0QWxpZ24pIHtcbiAgICBjdHgudGV4dEFsaWduID0gb3B0cy50ZXh0QWxpZ247XG4gIH1cbiAgaWYgKG9wdHMudGV4dEJhc2VsaW5lKSB7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9IG9wdHMudGV4dEJhc2VsaW5lO1xuICB9XG59XG5mdW5jdGlvbiBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKSB7XG4gIGlmIChvcHRzLnN0cmlrZXRocm91Z2ggfHwgb3B0cy51bmRlcmxpbmUpIHtcbiAgICBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KGxpbmUpO1xuICAgIGNvbnN0IGxlZnQgPSB4IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveExlZnQ7XG4gICAgY29uc3QgcmlnaHQgPSB4ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveFJpZ2h0O1xuICAgIGNvbnN0IHRvcCA9IHkgLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50O1xuICAgIGNvbnN0IGJvdHRvbSA9IHkgKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcbiAgICBjb25zdCB5RGVjb3JhdGlvbiA9IG9wdHMuc3RyaWtldGhyb3VnaCA/ICh0b3AgKyBib3R0b20pIC8gMiA6IGJvdHRvbTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0cy5kZWNvcmF0aW9uV2lkdGggfHwgMjtcbiAgICBjdHgubW92ZVRvKGxlZnQsIHlEZWNvcmF0aW9uKTtcbiAgICBjdHgubGluZVRvKHJpZ2h0LCB5RGVjb3JhdGlvbik7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gIGNvbnN0IHt4LCB5LCB3LCBoLCByYWRpdXN9ID0gcmVjdDtcbiAgY3R4LmFyYyh4ICsgcmFkaXVzLnRvcExlZnQsIHkgKyByYWRpdXMudG9wTGVmdCwgcmFkaXVzLnRvcExlZnQsIC1IQUxGX1BJLCBQSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCk7XG4gIGN0eC5hcmMoeCArIHJhZGl1cy5ib3R0b21MZWZ0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0LCByYWRpdXMuYm90dG9tTGVmdCwgUEksIEhBTEZfUEksIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCk7XG4gIGN0eC5hcmMoeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCByYWRpdXMuYm90dG9tUmlnaHQsIEhBTEZfUEksIDAsIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy50b3BSaWdodCwgeSArIHJhZGl1cy50b3BSaWdodCwgcmFkaXVzLnRvcFJpZ2h0LCAwLCAtSEFMRl9QSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHJhZGl1cy50b3BMZWZ0LCB5KTtcbn1cblxuY29uc3QgTElORV9IRUlHSFQgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHwoXFxkKyg/OlxcLlxcZCspPykocHh8ZW18JSk/KSQvKTtcbmNvbnN0IEZPTlRfU1RZTEUgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHxpdGFsaWN8aW5pdGlhbHxpbmhlcml0fHVuc2V0fChvYmxpcXVlKCAtP1swLTldP1swLTldZGVnKT8pKSQvKTtcbmZ1bmN0aW9uIHRvTGluZUhlaWdodCh2YWx1ZSwgc2l6ZSkge1xuICBjb25zdCBtYXRjaGVzID0gKCcnICsgdmFsdWUpLm1hdGNoKExJTkVfSEVJR0hUKTtcbiAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgcmV0dXJuIHNpemUgKiAxLjI7XG4gIH1cbiAgdmFsdWUgPSArbWF0Y2hlc1syXTtcbiAgc3dpdGNoIChtYXRjaGVzWzNdKSB7XG4gIGNhc2UgJ3B4JzpcbiAgICByZXR1cm4gdmFsdWU7XG4gIGNhc2UgJyUnOlxuICAgIHZhbHVlIC89IDEwMDtcbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc2l6ZSAqIHZhbHVlO1xufVxuY29uc3QgbnVtYmVyT3JaZXJvID0gdiA9PiArdiB8fCAwO1xuZnVuY3Rpb24gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHByb3BzKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBjb25zdCBvYmpQcm9wcyA9IGlzT2JqZWN0KHByb3BzKTtcbiAgY29uc3Qga2V5cyA9IG9ialByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpIDogcHJvcHM7XG4gIGNvbnN0IHJlYWQgPSBpc09iamVjdCh2YWx1ZSlcbiAgICA/IG9ialByb3BzXG4gICAgICA/IHByb3AgPT4gdmFsdWVPckRlZmF1bHQodmFsdWVbcHJvcF0sIHZhbHVlW3Byb3BzW3Byb3BdXSlcbiAgICAgIDogcHJvcCA9PiB2YWx1ZVtwcm9wXVxuICAgIDogKCkgPT4gdmFsdWU7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKSB7XG4gICAgcmV0W3Byb3BdID0gbnVtYmVyT3JaZXJvKHJlYWQocHJvcCkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0b1RSQkwodmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCB7dG9wOiAneScsIHJpZ2h0OiAneCcsIGJvdHRvbTogJ3knLCBsZWZ0OiAneCd9KTtcbn1cbmZ1bmN0aW9uIHRvVFJCTENvcm5lcnModmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbJ3RvcExlZnQnLCAndG9wUmlnaHQnLCAnYm90dG9tTGVmdCcsICdib3R0b21SaWdodCddKTtcbn1cbmZ1bmN0aW9uIHRvUGFkZGluZyh2YWx1ZSkge1xuICBjb25zdCBvYmogPSB0b1RSQkwodmFsdWUpO1xuICBvYmoud2lkdGggPSBvYmoubGVmdCArIG9iai5yaWdodDtcbiAgb2JqLmhlaWdodCA9IG9iai50b3AgKyBvYmouYm90dG9tO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gdG9Gb250KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmYWxsYmFjayA9IGZhbGxiYWNrIHx8IGRlZmF1bHRzLmZvbnQ7XG4gIGxldCBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zaXplLCBmYWxsYmFjay5zaXplKTtcbiAgaWYgKHR5cGVvZiBzaXplID09PSAnc3RyaW5nJykge1xuICAgIHNpemUgPSBwYXJzZUludChzaXplLCAxMCk7XG4gIH1cbiAgbGV0IHN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zdHlsZSwgZmFsbGJhY2suc3R5bGUpO1xuICBpZiAoc3R5bGUgJiYgISgnJyArIHN0eWxlKS5tYXRjaChGT05UX1NUWUxFKSkge1xuICAgIGNvbnNvbGUud2FybignSW52YWxpZCBmb250IHN0eWxlIHNwZWNpZmllZDogXCInICsgc3R5bGUgKyAnXCInKTtcbiAgICBzdHlsZSA9ICcnO1xuICB9XG4gIGNvbnN0IGZvbnQgPSB7XG4gICAgZmFtaWx5OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZhbWlseSwgZmFsbGJhY2suZmFtaWx5KSxcbiAgICBsaW5lSGVpZ2h0OiB0b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBmYWxsYmFjay5saW5lSGVpZ2h0KSwgc2l6ZSksXG4gICAgc2l6ZSxcbiAgICBzdHlsZSxcbiAgICB3ZWlnaHQ6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMud2VpZ2h0LCBmYWxsYmFjay53ZWlnaHQpLFxuICAgIHN0cmluZzogJydcbiAgfTtcbiAgZm9udC5zdHJpbmcgPSB0b0ZvbnRTdHJpbmcoZm9udCk7XG4gIHJldHVybiBmb250O1xufVxuZnVuY3Rpb24gcmVzb2x2ZShpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG4gIGxldCBjYWNoZWFibGUgPSB0cnVlO1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdmFsdWUgPSBpbnB1dHNbaV07XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcbiAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZVtpbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpbmZvICYmICFjYWNoZWFibGUpIHtcbiAgICAgICAgaW5mby5jYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9hZGRHcmFjZShtaW5tYXgsIGdyYWNlLCBiZWdpbkF0WmVybykge1xuICBjb25zdCB7bWluLCBtYXh9ID0gbWlubWF4O1xuICBjb25zdCBjaGFuZ2UgPSB0b0RpbWVuc2lvbihncmFjZSwgKG1heCAtIG1pbikgLyAyKTtcbiAgY29uc3Qga2VlcFplcm8gPSAodmFsdWUsIGFkZCkgPT4gYmVnaW5BdFplcm8gJiYgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgKyBhZGQ7XG4gIHJldHVybiB7XG4gICAgbWluOiBrZWVwWmVybyhtaW4sIC1NYXRoLmFicyhjaGFuZ2UpKSxcbiAgICBtYXg6IGtlZXBaZXJvKG1heCwgY2hhbmdlKVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChwYXJlbnRDb250ZXh0LCBjb250ZXh0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGFyZW50Q29udGV4dCksIGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gIGNtcCA9IGNtcCB8fCAoKGluZGV4KSA9PiB0YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gIGxldCBsbyA9IDA7XG4gIGxldCBtaWQ7XG4gIHdoaWxlIChoaSAtIGxvID4gMSkge1xuICAgIG1pZCA9IChsbyArIGhpKSA+PiAxO1xuICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgbG8gPSBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpID0gbWlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge2xvLCBoaX07XG59XG5jb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA8IHZhbHVlKTtcbmNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG5mdW5jdGlvbiBfZmlsdGVyQmV0d2Vlbih2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbikge1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCkge1xuICAgIGVuZC0tO1xuICB9XG4gIHJldHVybiBzdGFydCA+IDAgfHwgZW5kIDwgdmFsdWVzLmxlbmd0aFxuICAgID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcbmZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZToge1xuICAgICAgbGlzdGVuZXJzOiBbbGlzdGVuZXJdXG4gICAgfVxuICB9KTtcbiAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICBjb25zdCBiYXNlID0gYXJyYXlba2V5XTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gIGNvbnN0IHN0dWIgPSBhcnJheS5fY2hhcnRqcztcbiAgaWYgKCFzdHViKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgfSk7XG4gIGRlbGV0ZSBhcnJheS5fY2hhcnRqcztcbn1cbmZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgc2V0LmFkZChpdGVtc1tpXSk7XG4gIH1cbiAgaWYgKHNldC5zaXplID09PSBpbGVuKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gWycnXSwgcm9vdFNjb3BlcyA9IHNjb3BlcywgZmFsbGJhY2ssIGdldFRhcmdldCA9ICgpID0+IHNjb3Blc1swXSkge1xuICBpZiAoIWRlZmluZWQoZmFsbGJhY2spKSB7XG4gICAgZmFsbGJhY2sgPSBfcmVzb2x2ZSgnX2ZhbGxiYWNrJywgc2NvcGVzKTtcbiAgfVxuICBjb25zdCBjYWNoZSA9IHtcbiAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgX2NhY2hlYWJsZTogdHJ1ZSxcbiAgICBfc2NvcGVzOiBzY29wZXMsXG4gICAgX3Jvb3RTY29wZXM6IHJvb3RTY29wZXMsXG4gICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICBfZ2V0VGFyZ2V0OiBnZXRUYXJnZXQsXG4gICAgb3ZlcnJpZGU6IChzY29wZSkgPT4gX2NyZWF0ZVJlc29sdmVyKFtzY29wZSwgLi4uc2NvcGVzXSwgcHJlZml4ZXMsIHJvb3RTY29wZXMsIGZhbGxiYWNrKSxcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICBkZWxldGUgc2NvcGVzWzBdW3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsXG4gICAgICAgICgpID0+IF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgIH0sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fc2NvcGVzWzBdLCBwcm9wKTtcbiAgICB9LFxuICAgIGdldFByb3RvdHlwZU9mKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgIH0sXG4gICAgb3duS2V5cyh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0YXJnZXQuX3N0b3JhZ2UgfHwgKHRhcmdldC5fc3RvcmFnZSA9IGdldFRhcmdldCgpKTtcbiAgICAgIHRhcmdldFtwcm9wXSA9IHN0b3JhZ2VbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2F0dGFjaENvbnRleHQocHJveHksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgY29uc3QgY2FjaGUgPSB7XG4gICAgX2NhY2hlYWJsZTogZmFsc2UsXG4gICAgX3Byb3h5OiBwcm94eSxcbiAgICBfY29udGV4dDogY29udGV4dCxcbiAgICBfc3ViUHJveHk6IHN1YlByb3h5LFxuICAgIF9zdGFjazogbmV3IFNldCgpLFxuICAgIF9kZXNjcmlwdG9yczogX2Rlc2NyaXB0b3JzKHByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIHNldENvbnRleHQ6IChjdHgpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5LCBjdHgsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIG92ZXJyaWRlOiAoc2NvcGUpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5Lm92ZXJyaWRlKHNjb3BlKSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSBwcm94eVtwcm9wXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCxcbiAgICAgICAgKCkgPT4gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSk7XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Ll9kZXNjcmlwdG9ycy5hbGxLZXlzXG4gICAgICAgID8gUmVmbGVjdC5oYXMocHJveHksIHByb3ApID8ge2VudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0gOiB1bmRlZmluZWRcbiAgICAgICAgOiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBnZXRQcm90b3R5cGVPZigpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHByb3h5KTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBvd25LZXlzKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwcm94eSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgcHJveHlbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2Rlc2NyaXB0b3JzKHByb3h5LCBkZWZhdWx0cyA9IHtzY3JpcHRhYmxlOiB0cnVlLCBpbmRleGFibGU6IHRydWV9KSB7XG4gIGNvbnN0IHtfc2NyaXB0YWJsZSA9IGRlZmF1bHRzLnNjcmlwdGFibGUsIF9pbmRleGFibGUgPSBkZWZhdWx0cy5pbmRleGFibGUsIF9hbGxLZXlzID0gZGVmYXVsdHMuYWxsS2V5c30gPSBwcm94eTtcbiAgcmV0dXJuIHtcbiAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICBzY3JpcHRhYmxlOiBfc2NyaXB0YWJsZSxcbiAgICBpbmRleGFibGU6IF9pbmRleGFibGUsXG4gICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCkgPT4gX3NjcmlwdGFibGUsXG4gICAgaXNJbmRleGFibGU6IGlzRnVuY3Rpb24oX2luZGV4YWJsZSkgPyBfaW5kZXhhYmxlIDogKCkgPT4gX2luZGV4YWJsZVxuICB9O1xufVxuY29uc3QgcmVhZEtleSA9IChwcmVmaXgsIG5hbWUpID0+IHByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSAmJiBwcm9wICE9PSAnYWRhcHRlcnMnICYmXG4gIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsIHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuZnVuY3Rpb24gX2NhY2hlZCh0YXJnZXQsIHByb3AsIHJlc29sdmUpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IHJlc29sdmUoKTtcbiAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzfSA9IHRhcmdldDtcbiAgbGV0IHZhbHVlID0gX3Byb3h5W3Byb3BdO1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICB9XG4gIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgIHZhbHVlID0gX2F0dGFjaENvbnRleHQodmFsdWUsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9zdGFja30gPSB0YXJnZXQ7XG4gIGlmIChfc3RhY2suaGFzKHByb3ApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZWN1cnNpb24gZGV0ZWN0ZWQ6ICcgKyBBcnJheS5mcm9tKF9zdGFjaykuam9pbignLT4nKSArICctPicgKyBwcm9wKTtcbiAgfVxuICBfc3RhY2suYWRkKHByb3ApO1xuICB2YWx1ZSA9IHZhbHVlKF9jb250ZXh0LCBfc3ViUHJveHkgfHwgcmVjZWl2ZXIpO1xuICBfc3RhY2suZGVsZXRlKHByb3ApO1xuICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGNyZWF0ZVN1YlJlc29sdmVyKF9wcm94eS5fc2NvcGVzLCBfcHJveHksIHByb3AsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGlzSW5kZXhhYmxlKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnN9ID0gdGFyZ2V0O1xuICBpZiAoZGVmaW5lZChfY29udGV4dC5pbmRleCkgJiYgaXNJbmRleGFibGUocHJvcCkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlW19jb250ZXh0LmluZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZVswXSkpIHtcbiAgICBjb25zdCBhcnIgPSB2YWx1ZTtcbiAgICBjb25zdCBzY29wZXMgPSBfcHJveHkuX3Njb3Blcy5maWx0ZXIocyA9PiBzICE9PSBhcnIpO1xuICAgIHZhbHVlID0gW107XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUZhbGxiYWNrKGZhbGxiYWNrLCBwcm9wLCB2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjayhwcm9wLCB2YWx1ZSkgOiBmYWxsYmFjaztcbn1cbmNvbnN0IGdldFNjb3BlID0gKGtleSwgcGFyZW50KSA9PiBrZXkgPT09IHRydWUgPyBwYXJlbnRcbiAgOiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IHJlc29sdmVPYmplY3RLZXkocGFyZW50LCBrZXkpIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gYWRkU2NvcGVzKHNldCwgcGFyZW50U2NvcGVzLCBrZXksIHBhcmVudEZhbGxiYWNrLCB2YWx1ZSkge1xuICBmb3IgKGNvbnN0IHBhcmVudCBvZiBwYXJlbnRTY29wZXMpIHtcbiAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKGtleSwgcGFyZW50KTtcbiAgICBpZiAoc2NvcGUpIHtcbiAgICAgIHNldC5hZGQoc2NvcGUpO1xuICAgICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2soc2NvcGUuX2ZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0ga2V5ICYmIGZhbGxiYWNrICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzY29wZSA9PT0gZmFsc2UgJiYgZGVmaW5lZChwYXJlbnRGYWxsYmFjaykgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHJvb3RTY29wZXMgPSByZXNvbHZlci5fcm9vdFNjb3BlcztcbiAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2socmVzb2x2ZXIuX2ZhbGxiYWNrLCBwcm9wLCB2YWx1ZSk7XG4gIGNvbnN0IGFsbFNjb3BlcyA9IFsuLi5wYXJlbnRTY29wZXMsIC4uLnJvb3RTY29wZXNdO1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIHNldC5hZGQodmFsdWUpO1xuICBsZXQga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgcHJvcCwgZmFsbGJhY2sgfHwgcHJvcCwgdmFsdWUpO1xuICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0gcHJvcCkge1xuICAgIGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfY3JlYXRlUmVzb2x2ZXIoQXJyYXkuZnJvbShzZXQpLCBbJyddLCByb290U2NvcGVzLCBmYWxsYmFjayxcbiAgICAoKSA9PiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrLCBpdGVtKSB7XG4gIHdoaWxlIChrZXkpIHtcbiAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgaWYgKCEocHJvcCBpbiBwYXJlbnQpKSB7XG4gICAgcGFyZW50W3Byb3BdID0ge307XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgcHJveHkpIHtcbiAgbGV0IHZhbHVlO1xuICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcykge1xuICAgIHZhbHVlID0gX3Jlc29sdmUocmVhZEtleShwcmVmaXgsIHByb3ApLCBzY29wZXMpO1xuICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpXG4gICAgICAgID8gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBwcm94eSwgcHJvcCwgdmFsdWUpXG4gICAgICAgIDogdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfcmVzb2x2ZShrZXksIHNjb3Blcykge1xuICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgIGlmICghc2NvcGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgbGV0IGtleXMgPSB0YXJnZXQuX2tleXM7XG4gIGlmICgha2V5cykge1xuICAgIGtleXMgPSB0YXJnZXQuX2tleXMgPSByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXModGFyZ2V0Ll9zY29wZXMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcihrID0+ICFrLnN0YXJ0c1dpdGgoJ18nKSkpIHtcbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cblxuY29uc3QgRVBTSUxPTiA9IE51bWJlci5FUFNJTE9OIHx8IDFlLTE0O1xuY29uc3QgZ2V0UG9pbnQgPSAocG9pbnRzLCBpKSA9PiBpIDwgcG9pbnRzLmxlbmd0aCAmJiAhcG9pbnRzW2ldLnNraXAgJiYgcG9pbnRzW2ldO1xuY29uc3QgZ2V0VmFsdWVBeGlzID0gKGluZGV4QXhpcykgPT4gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZShmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuICBjb25zdCBwcmV2aW91cyA9IGZpcnN0UG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogZmlyc3RQb2ludDtcbiAgY29uc3QgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuICBjb25zdCBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuICBjb25zdCBkMDEgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoY3VycmVudCwgcHJldmlvdXMpO1xuICBjb25zdCBkMTIgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMobmV4dCwgY3VycmVudCk7XG4gIGxldCBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcbiAgbGV0IHMxMiA9IGQxMiAvIChkMDEgKyBkMTIpO1xuICBzMDEgPSBpc05hTihzMDEpID8gMCA6IHMwMTtcbiAgczEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG4gIGNvbnN0IGZhID0gdCAqIHMwMTtcbiAgY29uc3QgZmIgPSB0ICogczEyO1xuICByZXR1cm4ge1xuICAgIHByZXZpb3VzOiB7XG4gICAgICB4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfSxcbiAgICBuZXh0OiB7XG4gICAgICB4OiBjdXJyZW50LnggKyBmYiAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSArIGZiICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKSB7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBhbHBoYUssIGJldGFLLCB0YXVLLCBzcXVhcmVkTWFnbml0dWRlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW4gLSAxOyArK2kpIHtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCB8fCAhcG9pbnRBZnRlcikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbG1vc3RFcXVhbHMoZGVsdGFLW2ldLCAwLCBFUFNJTE9OKSkge1xuICAgICAgbUtbaV0gPSBtS1tpICsgMV0gPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGFscGhhSyA9IG1LW2ldIC8gZGVsdGFLW2ldO1xuICAgIGJldGFLID0gbUtbaSArIDFdIC8gZGVsdGFLW2ldO1xuICAgIHNxdWFyZWRNYWduaXR1ZGUgPSBNYXRoLnBvdyhhbHBoYUssIDIpICsgTWF0aC5wb3coYmV0YUssIDIpO1xuICAgIGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0YXVLID0gMyAvIE1hdGguc3FydChzcXVhcmVkTWFnbml0dWRlKTtcbiAgICBtS1tpXSA9IGFscGhhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgbUtbaSArIDFdID0gYmV0YUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICB9XG59XG5mdW5jdGlvbiBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgZGVsdGEsIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSkge1xuICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgaVBpeGVsID0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgY29uc3QgdlBpeGVsID0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc107XG4gICAgaWYgKHBvaW50QmVmb3JlKSB7XG4gICAgICBkZWx0YSA9IChpUGl4ZWwgLSBwb2ludEJlZm9yZVtpbmRleEF4aXNdKSAvIDM7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7aW5kZXhBeGlzfWBdID0gaVBpeGVsIC0gZGVsdGE7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7dmFsdWVBeGlzfWBdID0gdlBpeGVsIC0gZGVsdGEgKiBtS1tpXTtcbiAgICB9XG4gICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgIGRlbHRhID0gKHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIGlQaXhlbCkgLyAzO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke2luZGV4QXhpc31gXSA9IGlQaXhlbCArIGRlbHRhO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCArIGRlbHRhICogbUtbaV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCBkZWx0YUsgPSBBcnJheShwb2ludHNMZW4pLmZpbGwoMCk7XG4gIGNvbnN0IG1LID0gQXJyYXkocG9pbnRzTGVuKTtcbiAgbGV0IGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG4gICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgY29uc3Qgc2xvcGVEZWx0YSA9IHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgZGVsdGFLW2ldID0gc2xvcGVEZWx0YSAhPT0gMCA/IChwb2ludEFmdGVyW3ZhbHVlQXhpc10gLSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXSkgLyBzbG9wZURlbHRhIDogMDtcbiAgICB9XG4gICAgbUtbaV0gPSAhcG9pbnRCZWZvcmUgPyBkZWx0YUtbaV1cbiAgICAgIDogIXBvaW50QWZ0ZXIgPyBkZWx0YUtbaSAtIDFdXG4gICAgICA6IChzaWduKGRlbHRhS1tpIC0gMV0pICE9PSBzaWduKGRlbHRhS1tpXSkpID8gMFxuICAgICAgOiAoZGVsdGFLW2kgLSAxXSArIGRlbHRhS1tpXSkgLyAyO1xuICB9XG4gIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSyk7XG4gIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMpO1xufVxuZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG59XG5mdW5jdGlvbiBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKSB7XG4gIGxldCBpLCBpbGVuLCBwb2ludCwgaW5BcmVhLCBpbkFyZWFQcmV2O1xuICBsZXQgaW5BcmVhTmV4dCA9IF9pc1BvaW50SW5BcmVhKHBvaW50c1swXSwgYXJlYSk7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaW5BcmVhUHJldiA9IGluQXJlYTtcbiAgICBpbkFyZWEgPSBpbkFyZWFOZXh0O1xuICAgIGluQXJlYU5leHQgPSBpIDwgaWxlbiAtIDEgJiYgX2lzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXSwgYXJlYSk7XG4gICAgaWYgKCFpbkFyZWEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICBpZiAoaW5BcmVhUHJldikge1xuICAgICAgcG9pbnQuY3AxeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AxeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgICBpZiAoaW5BcmVhTmV4dCkge1xuICAgICAgcG9pbnQuY3AyeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AyeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMocG9pbnRzLCBvcHRpb25zLCBhcmVhLCBsb29wLCBpbmRleEF4aXMpIHtcbiAgbGV0IGksIGlsZW4sIHBvaW50LCBjb250cm9sUG9pbnRzO1xuICBpZiAob3B0aW9ucy5zcGFuR2Fwcykge1xuICAgIHBvaW50cyA9IHBvaW50cy5maWx0ZXIoKHB0KSA9PiAhcHQuc2tpcCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBwcmV2ID0gbG9vcCA/IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gOiBwb2ludHNbMF07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29udHJvbFBvaW50cyA9IHNwbGluZUN1cnZlKFxuICAgICAgICBwcmV2LFxuICAgICAgICBwb2ludCxcbiAgICAgICAgcG9pbnRzW01hdGgubWluKGkgKyAxLCBpbGVuIC0gKGxvb3AgPyAwIDogMSkpICUgaWxlbl0sXG4gICAgICAgIG9wdGlvbnMudGVuc2lvblxuICAgICAgKTtcbiAgICAgIHBvaW50LmNwMXggPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLng7XG4gICAgICBwb2ludC5jcDF5ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy55O1xuICAgICAgcG9pbnQuY3AyeCA9IGNvbnRyb2xQb2ludHMubmV4dC54O1xuICAgICAgcG9pbnQuY3AyeSA9IGNvbnRyb2xQb2ludHMubmV4dC55O1xuICAgICAgcHJldiA9IHBvaW50O1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5jYXBCZXppZXJQb2ludHMpIHtcbiAgICBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXNEb21TdXBwb3J0ZWQoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gX2dldFBhcmVudE5vZGUoZG9tTm9kZSkge1xuICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50ICYmIHBhcmVudC50b1N0cmluZygpID09PSAnW29iamVjdCBTaGFkb3dSb290XScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuZnVuY3Rpb24gcGFyc2VNYXhTdHlsZShzdHlsZVZhbHVlLCBub2RlLCBwYXJlbnRQcm9wZXJ0eSkge1xuICBsZXQgdmFsdWVJblBpeGVscztcbiAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlSW5QaXhlbHMgPSBwYXJzZUludChzdHlsZVZhbHVlLCAxMCk7XG4gICAgaWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgdmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWVJblBpeGVscztcbn1cbmNvbnN0IGdldENvbXB1dGVkU3R5bGUgPSAoZWxlbWVudCkgPT4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xufVxuY29uc3QgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbmZ1bmN0aW9uIGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZXMsIHN0eWxlLCBzdWZmaXgpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHN1ZmZpeCA9IHN1ZmZpeCA/ICctJyArIHN1ZmZpeCA6ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTtcbiAgICByZXN1bHRbcG9zXSA9IHBhcnNlRmxvYXQoc3R5bGVzW3N0eWxlICsgJy0nICsgcG9zICsgc3VmZml4XSkgfHwgMDtcbiAgfVxuICByZXN1bHQud2lkdGggPSByZXN1bHQubGVmdCArIHJlc3VsdC5yaWdodDtcbiAgcmVzdWx0LmhlaWdodCA9IHJlc3VsdC50b3AgKyByZXN1bHQuYm90dG9tO1xuICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgdXNlT2Zmc2V0UG9zID0gKHgsIHksIHRhcmdldCkgPT4gKHggPiAwIHx8IHkgPiAwKSAmJiAoIXRhcmdldCB8fCAhdGFyZ2V0LnNoYWRvd1Jvb3QpO1xuZnVuY3Rpb24gZ2V0Q2FudmFzUG9zaXRpb24oZXZ0LCBjYW52YXMpIHtcbiAgY29uc3QgZSA9IGV2dC5uYXRpdmUgfHwgZXZ0O1xuICBjb25zdCB0b3VjaGVzID0gZS50b3VjaGVzO1xuICBjb25zdCBzb3VyY2UgPSB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID8gdG91Y2hlc1swXSA6IGU7XG4gIGNvbnN0IHtvZmZzZXRYLCBvZmZzZXRZfSA9IHNvdXJjZTtcbiAgbGV0IGJveCA9IGZhbHNlO1xuICBsZXQgeCwgeTtcbiAgaWYgKHVzZU9mZnNldFBvcyhvZmZzZXRYLCBvZmZzZXRZLCBlLnRhcmdldCkpIHtcbiAgICB4ID0gb2Zmc2V0WDtcbiAgICB5ID0gb2Zmc2V0WTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHggPSBzb3VyY2UuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICB5ID0gc291cmNlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICBib3ggPSB0cnVlO1xuICB9XG4gIHJldHVybiB7eCwgeSwgYm94fTtcbn1cbmZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZXZ0LCBjaGFydCkge1xuICBjb25zdCB7Y2FudmFzLCBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpb30gPSBjaGFydDtcbiAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gIGNvbnN0IGJvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnO1xuICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICBjb25zdCB7eCwgeSwgYm94fSA9IGdldENhbnZhc1Bvc2l0aW9uKGV2dCwgY2FudmFzKTtcbiAgY29uc3QgeE9mZnNldCA9IHBhZGRpbmdzLmxlZnQgKyAoYm94ICYmIGJvcmRlcnMubGVmdCk7XG4gIGNvbnN0IHlPZmZzZXQgPSBwYWRkaW5ncy50b3AgKyAoYm94ICYmIGJvcmRlcnMudG9wKTtcbiAgbGV0IHt3aWR0aCwgaGVpZ2h0fSA9IGNoYXJ0O1xuICBpZiAoYm9yZGVyQm94KSB7XG4gICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IE1hdGgucm91bmQoKHggLSB4T2Zmc2V0KSAvIHdpZHRoICogY2FudmFzLndpZHRoIC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pLFxuICAgIHk6IE1hdGgucm91bmQoKHkgLSB5T2Zmc2V0KSAvIGhlaWdodCAqIGNhbnZhcy5oZWlnaHQgLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbylcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lclNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGxldCBtYXhXaWR0aCwgbWF4SGVpZ2h0O1xuICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgIHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpO1xuICAgICAgY29uc3QgY29udGFpbmVyQm9yZGVyID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgICBjb25zdCBjb250YWluZXJQYWRkaW5nID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAncGFkZGluZycpO1xuICAgICAgd2lkdGggPSByZWN0LndpZHRoIC0gY29udGFpbmVyUGFkZGluZy53aWR0aCAtIGNvbnRhaW5lckJvcmRlci53aWR0aDtcbiAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0IC0gY29udGFpbmVyUGFkZGluZy5oZWlnaHQgLSBjb250YWluZXJCb3JkZXIuaGVpZ2h0O1xuICAgICAgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heFdpZHRoLCBjb250YWluZXIsICdjbGllbnRXaWR0aCcpO1xuICAgICAgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhIZWlnaHQsIGNvbnRhaW5lciwgJ2NsaWVudEhlaWdodCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBtYXhXaWR0aDogbWF4V2lkdGggfHwgSU5GSU5JVFksXG4gICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHQgfHwgSU5GSU5JVFlcbiAgfTtcbn1cbmNvbnN0IHJvdW5kMSA9IHYgPT4gTWF0aC5yb3VuZCh2ICogMTApIC8gMTA7XG5mdW5jdGlvbiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgY29uc3QgbWFyZ2lucyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ21hcmdpbicpO1xuICBjb25zdCBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4V2lkdGgsIGNhbnZhcywgJ2NsaWVudFdpZHRoJykgfHwgSU5GSU5JVFk7XG4gIGNvbnN0IG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4SGVpZ2h0LCBjYW52YXMsICdjbGllbnRIZWlnaHQnKSB8fCBJTkZJTklUWTtcbiAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGdldENvbnRhaW5lclNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCk7XG4gIGxldCB7d2lkdGgsIGhlaWdodH0gPSBjb250YWluZXJTaXplO1xuICBpZiAoc3R5bGUuYm94U2l6aW5nID09PSAnY29udGVudC1ib3gnKSB7XG4gICAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgIHdpZHRoIC09IHBhZGRpbmdzLndpZHRoICsgYm9yZGVycy53aWR0aDtcbiAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gIH1cbiAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCAtIG1hcmdpbnMud2lkdGgpO1xuICBoZWlnaHQgPSBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQgLSBtYXJnaW5zLmhlaWdodCk7XG4gIHdpZHRoID0gcm91bmQxKE1hdGgubWluKHdpZHRoLCBtYXhXaWR0aCwgY29udGFpbmVyU2l6ZS5tYXhXaWR0aCkpO1xuICBoZWlnaHQgPSByb3VuZDEoTWF0aC5taW4oaGVpZ2h0LCBtYXhIZWlnaHQsIGNvbnRhaW5lclNpemUubWF4SGVpZ2h0KSk7XG4gIGlmICh3aWR0aCAmJiAhaGVpZ2h0KSB7XG4gICAgaGVpZ2h0ID0gcm91bmQxKHdpZHRoIC8gMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfTtcbn1cbmZ1bmN0aW9uIHJldGluYVNjYWxlKGNoYXJ0LCBmb3JjZVJhdGlvLCBmb3JjZVN0eWxlKSB7XG4gIGNvbnN0IHBpeGVsUmF0aW8gPSBmb3JjZVJhdGlvIHx8IDE7XG4gIGNvbnN0IGRldmljZUhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0ICogcGl4ZWxSYXRpbyk7XG4gIGNvbnN0IGRldmljZVdpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCAqIHBpeGVsUmF0aW8pO1xuICBjaGFydC5oZWlnaHQgPSBkZXZpY2VIZWlnaHQgLyBwaXhlbFJhdGlvO1xuICBjaGFydC53aWR0aCA9IGRldmljZVdpZHRoIC8gcGl4ZWxSYXRpbztcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBpZiAoY2FudmFzLnN0eWxlICYmIChmb3JjZVN0eWxlIHx8ICghY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSkpIHtcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7Y2hhcnQuaGVpZ2h0fXB4YDtcbiAgICBjYW52YXMuc3R5bGUud2lkdGggPSBgJHtjaGFydC53aWR0aH1weGA7XG4gIH1cbiAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBwaXhlbFJhdGlvXG4gICAgICB8fCBjYW52YXMuaGVpZ2h0ICE9PSBkZXZpY2VIZWlnaHRcbiAgICAgIHx8IGNhbnZhcy53aWR0aCAhPT0gZGV2aWNlV2lkdGgpIHtcbiAgICBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgY2FudmFzLmhlaWdodCA9IGRldmljZUhlaWdodDtcbiAgICBjYW52YXMud2lkdGggPSBkZXZpY2VXaWR0aDtcbiAgICBjaGFydC5jdHguc2V0VHJhbnNmb3JtKHBpeGVsUmF0aW8sIDAsIDAsIHBpeGVsUmF0aW8sIDAsIDApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSAoZnVuY3Rpb24oKSB7XG4gIGxldCBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGdldCBwYXNzaXZlKCkge1xuICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbiAgcmV0dXJuIHBhc3NpdmVTdXBwb3J0ZWQ7XG59KCkpO1xuZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHkpO1xuICBjb25zdCBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG4gIHJldHVybiBtYXRjaGVzID8gK21hdGNoZXNbMV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9wb2ludEluTGluZShwMSwgcDIsIHQsIG1vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgeTogcDEueSArIHQgKiAocDIueSAtIHAxLnkpXG4gIH07XG59XG5mdW5jdGlvbiBfc3RlcHBlZEludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgIHk6IG1vZGUgPT09ICdtaWRkbGUnID8gdCA8IDAuNSA/IHAxLnkgOiBwMi55XG4gICAgOiBtb2RlID09PSAnYWZ0ZXInID8gdCA8IDEgPyBwMS55IDogcDIueVxuICAgIDogdCA+IDAgPyBwMi55IDogcDEueVxuICB9O1xufVxuZnVuY3Rpb24gX2JlemllckludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gIGNvbnN0IGNwMSA9IHt4OiBwMS5jcDJ4LCB5OiBwMS5jcDJ5fTtcbiAgY29uc3QgY3AyID0ge3g6IHAyLmNwMXgsIHk6IHAyLmNwMXl9O1xuICBjb25zdCBhID0gX3BvaW50SW5MaW5lKHAxLCBjcDEsIHQpO1xuICBjb25zdCBiID0gX3BvaW50SW5MaW5lKGNwMSwgY3AyLCB0KTtcbiAgY29uc3QgYyA9IF9wb2ludEluTGluZShjcDIsIHAyLCB0KTtcbiAgY29uc3QgZCA9IF9wb2ludEluTGluZShhLCBiLCB0KTtcbiAgY29uc3QgZSA9IF9wb2ludEluTGluZShiLCBjLCB0KTtcbiAgcmV0dXJuIF9wb2ludEluTGluZShkLCBlLCB0KTtcbn1cblxuY29uc3QgaW50bENhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgY2FjaGVLZXkgPSBsb2NhbGUgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgbGV0IGZvcm1hdHRlciA9IGludGxDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoIWZvcm1hdHRlcikge1xuICAgIGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICAgIGludGxDYWNoZS5zZXQoY2FjaGVLZXksIGZvcm1hdHRlcik7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW0sIGxvY2FsZSwgb3B0aW9ucykge1xuICByZXR1cm4gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KG51bSk7XG59XG5cbmNvbnN0IGdldFJpZ2h0VG9MZWZ0QWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuICByZXR1cm4ge1xuICAgIHgoeCkge1xuICAgICAgcmV0dXJuIHJlY3RYICsgcmVjdFggKyB3aWR0aCAtIHg7XG4gICAgfSxcbiAgICBzZXRXaWR0aCh3KSB7XG4gICAgICB3aWR0aCA9IHc7XG4gICAgfSxcbiAgICB0ZXh0QWxpZ24oYWxpZ24pIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9LFxuICAgIHhQbHVzKHgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4geCAtIHZhbHVlO1xuICAgIH0sXG4gICAgbGVmdEZvckx0cih4LCBpdGVtV2lkdGgpIHtcbiAgICAgIHJldHVybiB4IC0gaXRlbVdpZHRoO1xuICAgIH0sXG4gIH07XG59O1xuY29uc3QgZ2V0TGVmdFRvUmlnaHRBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgeCh4KSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9LFxuICAgIHNldFdpZHRoKHcpIHtcbiAgICB9LFxuICAgIHRleHRBbGlnbihhbGlnbikge1xuICAgICAgcmV0dXJuIGFsaWduO1xuICAgIH0sXG4gICAgeFBsdXMoeCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB4ICsgdmFsdWU7XG4gICAgfSxcbiAgICBsZWZ0Rm9yTHRyKHgsIF9pdGVtV2lkdGgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG4gIH07XG59O1xuZnVuY3Rpb24gZ2V0UnRsQWRhcHRlcihydGwsIHJlY3RYLCB3aWR0aCkge1xuICByZXR1cm4gcnRsID8gZ2V0UmlnaHRUb0xlZnRBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIoKTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIGRpcmVjdGlvbikge1xuICBsZXQgc3R5bGUsIG9yaWdpbmFsO1xuICBpZiAoZGlyZWN0aW9uID09PSAnbHRyJyB8fCBkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgc3R5bGUgPSBjdHguY2FudmFzLnN0eWxlO1xuICAgIG9yaWdpbmFsID0gW1xuICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJyksXG4gICAgICBzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KCdkaXJlY3Rpb24nKSxcbiAgICBdO1xuICAgIHN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBkaXJlY3Rpb24sICdpbXBvcnRhbnQnKTtcbiAgICBjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcmlnaW5hbCkge1xuICBpZiAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSBjdHgucHJldlRleHREaXJlY3Rpb247XG4gICAgY3R4LmNhbnZhcy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgb3JpZ2luYWxbMF0sIG9yaWdpbmFsWzFdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZuKHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgIHJldHVybiB7XG4gICAgICBiZXR3ZWVuOiBfYW5nbGVCZXR3ZWVuLFxuICAgICAgY29tcGFyZTogX2FuZ2xlRGlmZixcbiAgICAgIG5vcm1hbGl6ZTogX25vcm1hbGl6ZUFuZ2xlLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBiZXR3ZWVuOiBfaXNCZXR3ZWVuLFxuICAgIGNvbXBhcmU6IChhLCBiKSA9PiBhIC0gYixcbiAgICBub3JtYWxpemU6IHggPT4geFxuICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2VnbWVudCh7c3RhcnQsIGVuZCwgY291bnQsIGxvb3AsIHN0eWxlfSkge1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgIGVuZDogZW5kICUgY291bnQsXG4gICAgbG9vcDogbG9vcCAmJiAoZW5kIC0gc3RhcnQgKyAxKSAlIGNvdW50ID09PSAwLFxuICAgIHN0eWxlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQ6IHN0YXJ0Qm91bmQsIGVuZDogZW5kQm91bmR9ID0gYm91bmRzO1xuICBjb25zdCB7YmV0d2Vlbiwgbm9ybWFsaXplfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCB7c3RhcnQsIGVuZCwgbG9vcH0gPSBzZWdtZW50O1xuICBsZXQgaSwgaWxlbjtcbiAgaWYgKGxvb3ApIHtcbiAgICBzdGFydCArPSBjb3VudDtcbiAgICBlbmQgKz0gY291bnQ7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAoIWJldHdlZW4obm9ybWFsaXplKHBvaW50c1tzdGFydCAlIGNvdW50XVtwcm9wZXJ0eV0pLCBzdGFydEJvdW5kLCBlbmRCb3VuZCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzdGFydC0tO1xuICAgICAgZW5kLS07XG4gICAgfVxuICAgIHN0YXJ0ICU9IGNvdW50O1xuICAgIGVuZCAlPSBjb3VudDtcbiAgfVxuICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICBlbmQgKz0gY291bnQ7XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgZW5kLCBsb29wLCBzdHlsZTogc2VnbWVudC5zdHlsZX07XG59XG5mdW5jdGlvbiBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gIGlmICghYm91bmRzKSB7XG4gICAgcmV0dXJuIFtzZWdtZW50XTtcbiAgfVxuICBjb25zdCB7cHJvcGVydHksIHN0YXJ0OiBzdGFydEJvdW5kLCBlbmQ6IGVuZEJvdW5kfSA9IGJvdW5kcztcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCB7Y29tcGFyZSwgYmV0d2Vlbiwgbm9ybWFsaXplfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICBjb25zdCB7c3RhcnQsIGVuZCwgbG9vcCwgc3R5bGV9ID0gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcyk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gIGxldCBzdWJTdGFydCA9IG51bGw7XG4gIGxldCB2YWx1ZSwgcG9pbnQsIHByZXZWYWx1ZTtcbiAgY29uc3Qgc3RhcnRJc0JlZm9yZSA9ICgpID0+IGJldHdlZW4oc3RhcnRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSkgJiYgY29tcGFyZShzdGFydEJvdW5kLCBwcmV2VmFsdWUpICE9PSAwO1xuICBjb25zdCBlbmRJc0JlZm9yZSA9ICgpID0+IGNvbXBhcmUoZW5kQm91bmQsIHZhbHVlKSA9PT0gMCB8fCBiZXR3ZWVuKGVuZEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKTtcbiAgY29uc3Qgc2hvdWxkU3RhcnQgPSAoKSA9PiBpbnNpZGUgfHwgc3RhcnRJc0JlZm9yZSgpO1xuICBjb25zdCBzaG91bGRTdG9wID0gKCkgPT4gIWluc2lkZSB8fCBlbmRJc0JlZm9yZSgpO1xuICBmb3IgKGxldCBpID0gc3RhcnQsIHByZXYgPSBzdGFydDsgaSA8PSBlbmQ7ICsraSkge1xuICAgIHBvaW50ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZShwb2ludFtwcm9wZXJ0eV0pO1xuICAgIGlmICh2YWx1ZSA9PT0gcHJldlZhbHVlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaW5zaWRlID0gYmV0d2Vlbih2YWx1ZSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpO1xuICAgIGlmIChzdWJTdGFydCA9PT0gbnVsbCAmJiBzaG91bGRTdGFydCgpKSB7XG4gICAgICBzdWJTdGFydCA9IGNvbXBhcmUodmFsdWUsIHN0YXJ0Qm91bmQpID09PSAwID8gaSA6IHByZXY7XG4gICAgfVxuICAgIGlmIChzdWJTdGFydCAhPT0gbnVsbCAmJiBzaG91bGRTdG9wKCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0OiBzdWJTdGFydCwgZW5kOiBpLCBsb29wLCBjb3VudCwgc3R5bGV9KSk7XG4gICAgICBzdWJTdGFydCA9IG51bGw7XG4gICAgfVxuICAgIHByZXYgPSBpO1xuICAgIHByZXZWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIGlmIChzdWJTdGFydCAhPT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0OiBzdWJTdGFydCwgZW5kLCBsb29wLCBjb3VudCwgc3R5bGV9KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9ib3VuZFNlZ21lbnRzKGxpbmUsIGJvdW5kcykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3ViID0gX2JvdW5kU2VnbWVudChzZWdtZW50c1tpXSwgbGluZS5wb2ludHMsIGJvdW5kcyk7XG4gICAgaWYgKHN1Yi5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKC4uLnN1Yik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpIHtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IGNvdW50IC0gMTtcbiAgaWYgKGxvb3AgJiYgIXNwYW5HYXBzKSB7XG4gICAgd2hpbGUgKHN0YXJ0IDwgY291bnQgJiYgIXBvaW50c1tzdGFydF0uc2tpcCkge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG4gIH1cbiAgd2hpbGUgKHN0YXJ0IDwgY291bnQgJiYgcG9pbnRzW3N0YXJ0XS5za2lwKSB7XG4gICAgc3RhcnQrKztcbiAgfVxuICBzdGFydCAlPSBjb3VudDtcbiAgaWYgKGxvb3ApIHtcbiAgICBlbmQgKz0gc3RhcnQ7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHBvaW50c1tlbmQgJSBjb3VudF0uc2tpcCkge1xuICAgIGVuZC0tO1xuICB9XG4gIGVuZCAlPSBjb3VudDtcbiAgcmV0dXJuIHtzdGFydCwgZW5kfTtcbn1cbmZ1bmN0aW9uIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBsb29wKSB7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBsYXN0ID0gc3RhcnQ7XG4gIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0XTtcbiAgbGV0IGVuZDtcbiAgZm9yIChlbmQgPSBzdGFydCArIDE7IGVuZCA8PSBtYXg7ICsrZW5kKSB7XG4gICAgY29uc3QgY3VyID0gcG9pbnRzW2VuZCAlIGNvdW50XTtcbiAgICBpZiAoY3VyLnNraXAgfHwgY3VyLnN0b3ApIHtcbiAgICAgIGlmICghcHJldi5za2lwKSB7XG4gICAgICAgIGxvb3AgPSBmYWxzZTtcbiAgICAgICAgcmVzdWx0LnB1c2goe3N0YXJ0OiBzdGFydCAlIGNvdW50LCBlbmQ6IChlbmQgLSAxKSAlIGNvdW50LCBsb29wfSk7XG4gICAgICAgIHN0YXJ0ID0gbGFzdCA9IGN1ci5zdG9wID8gZW5kIDogbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IGVuZDtcbiAgICAgIGlmIChwcmV2LnNraXApIHtcbiAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICB9XG4gICAgfVxuICAgIHByZXYgPSBjdXI7XG4gIH1cbiAgaWYgKGxhc3QgIT09IG51bGwpIHtcbiAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHN0YXJ0ICUgY291bnQsIGVuZDogbGFzdCAlIGNvdW50LCBsb29wfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9jb21wdXRlU2VnbWVudHMobGluZSwgc2VnbWVudE9wdGlvbnMpIHtcbiAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHNwYW5HYXBzID0gbGluZS5vcHRpb25zLnNwYW5HYXBzO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGlmICghY291bnQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgbG9vcCA9ICEhbGluZS5fbG9vcDtcbiAgY29uc3Qge3N0YXJ0LCBlbmR9ID0gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKTtcbiAgaWYgKHNwYW5HYXBzID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgW3tzdGFydCwgZW5kLCBsb29wfV0sIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xuICB9XG4gIGNvbnN0IG1heCA9IGVuZCA8IHN0YXJ0ID8gZW5kICsgY291bnQgOiBlbmQ7XG4gIGNvbnN0IGNvbXBsZXRlTG9vcCA9ICEhbGluZS5fZnVsbExvb3AgJiYgc3RhcnQgPT09IDAgJiYgZW5kID09PSBjb3VudCAtIDE7XG4gIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBjb21wbGV0ZUxvb3ApLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHNwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgaWYgKCFzZWdtZW50T3B0aW9ucyB8fCAhc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dCB8fCAhcG9pbnRzKSB7XG4gICAgcmV0dXJuIHNlZ21lbnRzO1xuICB9XG4gIHJldHVybiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gIGNvbnN0IGNoYXJ0Q29udGV4dCA9IGxpbmUuX2NoYXJ0LmdldENvbnRleHQoKTtcbiAgY29uc3QgYmFzZVN0eWxlID0gcmVhZFN0eWxlKGxpbmUub3B0aW9ucyk7XG4gIGNvbnN0IHtfZGF0YXNldEluZGV4OiBkYXRhc2V0SW5kZXgsIG9wdGlvbnM6IHtzcGFuR2Fwc319ID0gbGluZTtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IHByZXZTdHlsZSA9IGJhc2VTdHlsZTtcbiAgbGV0IHN0YXJ0ID0gc2VnbWVudHNbMF0uc3RhcnQ7XG4gIGxldCBpID0gc3RhcnQ7XG4gIGZ1bmN0aW9uIGFkZFN0eWxlKHMsIGUsIGwsIHN0KSB7XG4gICAgY29uc3QgZGlyID0gc3BhbkdhcHMgPyAtMSA6IDE7XG4gICAgaWYgKHMgPT09IGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcyArPSBjb3VudDtcbiAgICB3aGlsZSAocG9pbnRzW3MgJSBjb3VudF0uc2tpcCkge1xuICAgICAgcyAtPSBkaXI7XG4gICAgfVxuICAgIHdoaWxlIChwb2ludHNbZSAlIGNvdW50XS5za2lwKSB7XG4gICAgICBlICs9IGRpcjtcbiAgICB9XG4gICAgaWYgKHMgJSBjb3VudCAhPT0gZSAlIGNvdW50KSB7XG4gICAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHMgJSBjb3VudCwgZW5kOiBlICUgY291bnQsIGxvb3A6IGwsIHN0eWxlOiBzdH0pO1xuICAgICAgcHJldlN0eWxlID0gc3Q7XG4gICAgICBzdGFydCA9IGUgJSBjb3VudDtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgc3RhcnQgPSBzcGFuR2FwcyA/IHN0YXJ0IDogc2VnbWVudC5zdGFydDtcbiAgICBsZXQgcHJldiA9IHBvaW50c1tzdGFydCAlIGNvdW50XTtcbiAgICBsZXQgc3R5bGU7XG4gICAgZm9yIChpID0gc3RhcnQgKyAxOyBpIDw9IHNlZ21lbnQuZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IHB0ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICBzdHlsZSA9IHJlYWRTdHlsZShzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0KGNyZWF0ZUNvbnRleHQoY2hhcnRDb250ZXh0LCB7XG4gICAgICAgIHR5cGU6ICdzZWdtZW50JyxcbiAgICAgICAgcDA6IHByZXYsXG4gICAgICAgIHAxOiBwdCxcbiAgICAgICAgcDBEYXRhSW5kZXg6IChpIC0gMSkgJSBjb3VudCxcbiAgICAgICAgcDFEYXRhSW5kZXg6IGkgJSBjb3VudCxcbiAgICAgICAgZGF0YXNldEluZGV4XG4gICAgICB9KSkpO1xuICAgICAgaWYgKHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSkge1xuICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHByZXYgPSBwdDtcbiAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPCBpIC0gMSkge1xuICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiByZWFkU3R5bGUob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgYm9yZGVyQ2FwU3R5bGU6IG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICBib3JkZXJKb2luU3R5bGU6IG9wdGlvbnMuYm9yZGVySm9pblN0eWxlLFxuICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yXG4gIH07XG59XG5mdW5jdGlvbiBzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkge1xuICByZXR1cm4gcHJldlN0eWxlICYmIEpTT04uc3RyaW5naWZ5KHN0eWxlKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0eWxlKTtcbn1cblxuZXhwb3J0IHsgX3RvTGVmdFJpZ2h0Q2VudGVyIGFzICQsIF9ybG9va3VwQnlLZXkgYXMgQSwgZ2V0QW5nbGVGcm9tUG9pbnQgYXMgQiwgdG9QYWRkaW5nIGFzIEMsIGVhY2ggYXMgRCwgZ2V0TWF4aW11bVNpemUgYXMgRSwgX2dldFBhcmVudE5vZGUgYXMgRiwgcmVhZFVzZWRTaXplIGFzIEcsIEhBTEZfUEkgYXMgSCwgdGhyb3R0bGVkIGFzIEksIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgSiwgX2lzRG9tU3VwcG9ydGVkIGFzIEssIGxvZzEwIGFzIEwsIF9mYWN0b3JpemUgYXMgTSwgZmluaXRlT3JEZWZhdWx0IGFzIE4sIGNhbGxiYWNrIGFzIE8sIFBJIGFzIFAsIF9hZGRHcmFjZSBhcyBRLCB0b0RlZ3JlZXMgYXMgUiwgX21lYXN1cmVUZXh0IGFzIFMsIFRBVSBhcyBULCBfaW50MTZSYW5nZSBhcyBVLCBfYWxpZ25QaXhlbCBhcyBWLCBjbGlwQXJlYSBhcyBXLCByZW5kZXJUZXh0IGFzIFgsIHVuY2xpcEFyZWEgYXMgWSwgdG9Gb250IGFzIFosIF9hcnJheVVuaXF1ZSBhcyBfLCByZXNvbHZlIGFzIGEsIF9hbmdsZURpZmYgYXMgYSQsIF9hbGlnblN0YXJ0RW5kIGFzIGEwLCBvdmVycmlkZXMgYXMgYTEsIG1lcmdlIGFzIGEyLCBfY2FwaXRhbGl6ZSBhcyBhMywgZGVzY3JpcHRvcnMgYXMgYTQsIGlzRnVuY3Rpb24gYXMgYTUsIF9hdHRhY2hDb250ZXh0IGFzIGE2LCBfY3JlYXRlUmVzb2x2ZXIgYXMgYTcsIF9kZXNjcmlwdG9ycyBhcyBhOCwgbWVyZ2VJZiBhcyBhOSwgcmVzdG9yZVRleHREaXJlY3Rpb24gYXMgYUEsIG5vb3AgYXMgYUIsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhQywgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFELCBuaWNlTnVtIGFzIGFFLCBhbG1vc3RXaG9sZSBhcyBhRiwgYWxtb3N0RXF1YWxzIGFzIGFHLCBfZGVjaW1hbFBsYWNlcyBhcyBhSCwgX2xvbmdlc3RUZXh0IGFzIGFJLCBfZmlsdGVyQmV0d2VlbiBhcyBhSiwgX2xvb2t1cCBhcyBhSywgZ2V0SG92ZXJDb2xvciBhcyBhTCwgY2xvbmUkMSBhcyBhTSwgX21lcmdlciBhcyBhTiwgX21lcmdlcklmIGFzIGFPLCBfZGVwcmVjYXRlZCBhcyBhUCwgdG9Gb250U3RyaW5nIGFzIGFRLCBzcGxpbmVDdXJ2ZSBhcyBhUiwgc3BsaW5lQ3VydmVNb25vdG9uZSBhcyBhUywgZ2V0U3R5bGUgYXMgYVQsIGZvbnRTdHJpbmcgYXMgYVUsIHRvTGluZUhlaWdodCBhcyBhViwgUElUQVUgYXMgYVcsIElORklOSVRZIGFzIGFYLCBSQURfUEVSX0RFRyBhcyBhWSwgUVVBUlRFUl9QSSBhcyBhWiwgVFdPX1RISVJEU19QSSBhcyBhXywgdWlkIGFzIGFhLCBkZWJvdW5jZSBhcyBhYiwgcmV0aW5hU2NhbGUgYXMgYWMsIGNsZWFyQ2FudmFzIGFzIGFkLCBzZXRzRXF1YWwgYXMgYWUsIF9lbGVtZW50c0VxdWFsIGFzIGFmLCBfaXNDbGlja0V2ZW50IGFzIGFnLCBfaXNCZXR3ZWVuIGFzIGFoLCBfcmVhZFZhbHVlVG9Qcm9wcyBhcyBhaSwgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMgYXMgYWosIF9jb21wdXRlU2VnbWVudHMgYXMgYWssIF9ib3VuZFNlZ21lbnRzIGFzIGFsLCBfc3RlcHBlZEludGVycG9sYXRpb24gYXMgYW0sIF9iZXppZXJJbnRlcnBvbGF0aW9uIGFzIGFuLCBfcG9pbnRJbkxpbmUgYXMgYW8sIF9zdGVwcGVkTGluZVRvIGFzIGFwLCBfYmV6aWVyQ3VydmVUbyBhcyBhcSwgZHJhd1BvaW50IGFzIGFyLCBhZGRSb3VuZGVkUmVjdFBhdGggYXMgYXMsIHRvVFJCTCBhcyBhdCwgdG9UUkJMQ29ybmVycyBhcyBhdSwgX2JvdW5kU2VnbWVudCBhcyBhdiwgX25vcm1hbGl6ZUFuZ2xlIGFzIGF3LCBnZXRSdGxBZGFwdGVyIGFzIGF4LCBvdmVycmlkZVRleHREaXJlY3Rpb24gYXMgYXksIF90ZXh0WCBhcyBheiwgaXNBcnJheSBhcyBiLCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgY3JlYXRlQ29udGV4dCBhcyBoLCBpc09iamVjdCBhcyBpLCBkZWZpbmVkIGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIGlzTnVtYmVyIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfbGltaXRWYWx1ZSBhcyB3LCBfbG9va3VwQnlLZXkgYXMgeCwgZ2V0UmVsYXRpdmVQb3NpdGlvbiBhcyB5LCBfaXNQb2ludEluQXJlYSBhcyB6IH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHYzLjcuMFxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIxIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVxdWVzdEFuaW1GcmFtZSwgYSBhcyByZXNvbHZlLCBlIGFzIGVmZmVjdHMsIGMgYXMgY29sb3IsIGQgYXMgZGVmYXVsdHMsIGkgYXMgaXNPYmplY3QsIGIgYXMgaXNBcnJheSwgdiBhcyB2YWx1ZU9yRGVmYXVsdCwgdSBhcyB1bmxpc3RlbkFycmF5RXZlbnRzLCBsIGFzIGxpc3RlbkFycmF5RXZlbnRzLCBmIGFzIHJlc29sdmVPYmplY3RLZXksIGcgYXMgaXNOdW1iZXJGaW5pdGUsIGggYXMgY3JlYXRlQ29udGV4dCwgaiBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGsgYXMgaXNOdWxsT3JVbmRlZiwgXyBhcyBfYXJyYXlVbmlxdWUsIHQgYXMgdG9SYWRpYW5zLCBtIGFzIHRvUGVyY2VudGFnZSwgbiBhcyB0b0RpbWVuc2lvbiwgVCBhcyBUQVUsIG8gYXMgZm9ybWF0TnVtYmVyLCBwIGFzIF9hbmdsZUJldHdlZW4sIEggYXMgSEFMRl9QSSwgUCBhcyBQSSwgcSBhcyBpc051bWJlciwgdyBhcyBfbGltaXRWYWx1ZSwgeCBhcyBfbG9va3VwQnlLZXksIHkgYXMgZ2V0UmVsYXRpdmVQb3NpdGlvbiQxLCB6IGFzIF9pc1BvaW50SW5BcmVhLCBBIGFzIF9ybG9va3VwQnlLZXksIEIgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIEMgYXMgdG9QYWRkaW5nLCBEIGFzIGVhY2gsIEUgYXMgZ2V0TWF4aW11bVNpemUsIEYgYXMgX2dldFBhcmVudE5vZGUsIEcgYXMgcmVhZFVzZWRTaXplLCBJIGFzIHRocm90dGxlZCwgSiBhcyBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zLCBLIGFzIF9pc0RvbVN1cHBvcnRlZCwgTCBhcyBsb2cxMCwgTSBhcyBfZmFjdG9yaXplLCBOIGFzIGZpbml0ZU9yRGVmYXVsdCwgTyBhcyBjYWxsYmFjaywgUSBhcyBfYWRkR3JhY2UsIFIgYXMgdG9EZWdyZWVzLCBTIGFzIF9tZWFzdXJlVGV4dCwgVSBhcyBfaW50MTZSYW5nZSwgViBhcyBfYWxpZ25QaXhlbCwgVyBhcyBjbGlwQXJlYSwgWCBhcyByZW5kZXJUZXh0LCBZIGFzIHVuY2xpcEFyZWEsIFogYXMgdG9Gb250LCAkIGFzIF90b0xlZnRSaWdodENlbnRlciwgYTAgYXMgX2FsaWduU3RhcnRFbmQsIGExIGFzIG92ZXJyaWRlcywgYTIgYXMgbWVyZ2UsIGEzIGFzIF9jYXBpdGFsaXplLCBhNCBhcyBkZXNjcmlwdG9ycywgYTUgYXMgaXNGdW5jdGlvbiwgYTYgYXMgX2F0dGFjaENvbnRleHQsIGE3IGFzIF9jcmVhdGVSZXNvbHZlciwgYTggYXMgX2Rlc2NyaXB0b3JzLCBhOSBhcyBtZXJnZUlmLCBhYSBhcyB1aWQsIGFiIGFzIGRlYm91bmNlLCBhYyBhcyByZXRpbmFTY2FsZSwgYWQgYXMgY2xlYXJDYW52YXMsIGFlIGFzIHNldHNFcXVhbCwgYWYgYXMgX2VsZW1lbnRzRXF1YWwsIGFnIGFzIF9pc0NsaWNrRXZlbnQsIGFoIGFzIF9pc0JldHdlZW4sIGFpIGFzIF9yZWFkVmFsdWVUb1Byb3BzLCBhaiBhcyBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cywgYWsgYXMgX2NvbXB1dGVTZWdtZW50cywgYWwgYXMgX2JvdW5kU2VnbWVudHMsIGFtIGFzIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiwgYW4gYXMgX2JlemllckludGVycG9sYXRpb24sIGFvIGFzIF9wb2ludEluTGluZSwgYXAgYXMgX3N0ZXBwZWRMaW5lVG8sIGFxIGFzIF9iZXppZXJDdXJ2ZVRvLCBhciBhcyBkcmF3UG9pbnQsIGFzIGFzIGFkZFJvdW5kZWRSZWN0UGF0aCwgYXQgYXMgdG9UUkJMLCBhdSBhcyB0b1RSQkxDb3JuZXJzLCBhdiBhcyBfYm91bmRTZWdtZW50LCBhdyBhcyBfbm9ybWFsaXplQW5nbGUsIGF4IGFzIGdldFJ0bEFkYXB0ZXIsIGF5IGFzIG92ZXJyaWRlVGV4dERpcmVjdGlvbiwgYXogYXMgX3RleHRYLCBhQSBhcyByZXN0b3JlVGV4dERpcmVjdGlvbiwgYUIgYXMgbm9vcCwgYUMgYXMgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzLCBhRCBhcyBfc2V0TWluQW5kTWF4QnlLZXksIGFFIGFzIG5pY2VOdW0sIGFGIGFzIGFsbW9zdFdob2xlLCBhRyBhcyBhbG1vc3RFcXVhbHMsIGFIIGFzIF9kZWNpbWFsUGxhY2VzLCBhSSBhcyBfbG9uZ2VzdFRleHQsIGFKIGFzIF9maWx0ZXJCZXR3ZWVuLCBhSyBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmV4cG9ydCB7IGQgYXMgZGVmYXVsdHMgfSBmcm9tICcuL2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMnO1xuXG5jbGFzcyBBbmltYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgIHRoaXMuX2NoYXJ0cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fbGFzdERhdGUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsIHR5cGUpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgY29uc3QgbnVtU3RlcHMgPSBhbmltcy5kdXJhdGlvbjtcbiAgICBjYWxsYmFja3MuZm9yRWFjaChmbiA9PiBmbih7XG4gICAgICBjaGFydCxcbiAgICAgIGluaXRpYWw6IGFuaW1zLmluaXRpYWwsXG4gICAgICBudW1TdGVwcyxcbiAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgIH0pKTtcbiAgfVxuICBfcmVmcmVzaCgpIHtcbiAgICBpZiAodGhpcy5fcmVxdWVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCkgPT4ge1xuICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLl9ydW5uaW5nKSB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgbGV0IHJlbWFpbmluZyA9IDA7XG4gICAgdGhpcy5fY2hhcnRzLmZvckVhY2goKGFuaW1zLCBjaGFydCkgPT4ge1xuICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaXRlbXMgPSBhbmltcy5pdGVtcztcbiAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIGxldCBkcmF3ID0gZmFsc2U7XG4gICAgICBsZXQgaXRlbTtcbiAgICAgIGZvciAoOyBpID49IDA7IC0taSkge1xuICAgICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGlmIChpdGVtLl9hY3RpdmUpIHtcbiAgICAgICAgICBpZiAoaXRlbS5fdG90YWwgPiBhbmltcy5kdXJhdGlvbikge1xuICAgICAgICAgICAgYW5pbXMuZHVyYXRpb24gPSBpdGVtLl90b3RhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbS50aWNrKGRhdGUpO1xuICAgICAgICAgIGRyYXcgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zW2ldID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkcmF3KSB7XG4gICAgICAgIGNoYXJ0LmRyYXcoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBhbmltcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsICdjb21wbGV0ZScpO1xuICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgIH0pO1xuICAgIHRoaXMuX2xhc3REYXRlID0gZGF0ZTtcbiAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIF9nZXRBbmltcyhjaGFydCkge1xuICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICBsZXQgYW5pbXMgPSBjaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zKSB7XG4gICAgICBhbmltcyA9IHtcbiAgICAgICAgcnVubmluZzogZmFsc2UsXG4gICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgY29tcGxldGU6IFtdLFxuICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hhcnRzLnNldChjaGFydCwgYW5pbXMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbXM7XG4gIH1cbiAgbGlzdGVuKGNoYXJ0LCBldmVudCwgY2IpIHtcbiAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgfVxuICBhZGQoY2hhcnQsIGl0ZW1zKSB7XG4gICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5pdGVtcy5wdXNoKC4uLml0ZW1zKTtcbiAgfVxuICBoYXMoY2hhcnQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gIH1cbiAgc3RhcnQoY2hhcnQpIHtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYW5pbXMucnVubmluZyA9IHRydWU7XG4gICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGFuaW1zLmR1cmF0aW9uID0gYW5pbXMuaXRlbXMucmVkdWNlKChhY2MsIGN1cikgPT4gTWF0aC5tYXgoYWNjLCBjdXIuX2R1cmF0aW9uKSwgMCk7XG4gICAgdGhpcy5fcmVmcmVzaCgpO1xuICB9XG4gIHJ1bm5pbmcoY2hhcnQpIHtcbiAgICBpZiAoIXRoaXMuX3J1bm5pbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zIHx8ICFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3RvcChjaGFydCkge1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgaWYgKCFhbmltcyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBpID49IDA7IC0taSkge1xuICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgfVxuICAgIGFuaW1zLml0ZW1zID0gW107XG4gICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gIH1cbiAgcmVtb3ZlKGNoYXJ0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICB9XG59XG52YXIgYW5pbWF0b3IgPSBuZXcgQW5pbWF0b3IoKTtcblxuY29uc3QgdHJhbnNwYXJlbnQgPSAndHJhbnNwYXJlbnQnO1xuY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgYm9vbGVhbihmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgfSxcbiAgY29sb3IoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgY29uc3QgYzEgPSBjMC52YWxpZCAmJiBjb2xvcih0byB8fCB0cmFuc3BhcmVudCk7XG4gICAgcmV0dXJuIGMxICYmIGMxLnZhbGlkXG4gICAgICA/IGMxLm1peChjMCwgZmFjdG9yKS5oZXhTdHJpbmcoKVxuICAgICAgOiB0bztcbiAgfSxcbiAgbnVtYmVyKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICB9XG59O1xuY2xhc3MgQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IoY2ZnLCB0YXJnZXQsIHByb3AsIHRvKSB7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdO1xuICAgIHRvID0gcmVzb2x2ZShbY2ZnLnRvLCB0bywgY3VycmVudFZhbHVlLCBjZmcuZnJvbV0pO1xuICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtjZmcuZnJvbSwgY3VycmVudFZhbHVlLCB0b10pO1xuICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5fZm4gPSBjZmcuZm4gfHwgaW50ZXJwb2xhdG9yc1tjZmcudHlwZSB8fCB0eXBlb2YgZnJvbV07XG4gICAgdGhpcy5fZWFzaW5nID0gZWZmZWN0c1tjZmcuZWFzaW5nXSB8fCBlZmZlY3RzLmxpbmVhcjtcbiAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgIHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWwgPSBNYXRoLmZsb29yKGNmZy5kdXJhdGlvbik7XG4gICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuX3Byb3AgPSBwcm9wO1xuICAgIHRoaXMuX2Zyb20gPSBmcm9tO1xuICAgIHRoaXMuX3RvID0gdG87XG4gICAgdGhpcy5fcHJvbWlzZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgYWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cbiAgdXBkYXRlKGNmZywgdG8sIGRhdGUpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9ub3RpZnkoZmFsc2UpO1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5fdGFyZ2V0W3RoaXMuX3Byb3BdO1xuICAgICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICAgIGNvbnN0IHJlbWFpbiA9IHRoaXMuX2R1cmF0aW9uIC0gZWxhcHNlZDtcbiAgICAgIHRoaXMuX3N0YXJ0ID0gZGF0ZTtcbiAgICAgIHRoaXMuX2R1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLm1heChyZW1haW4sIGNmZy5kdXJhdGlvbikpO1xuICAgICAgdGhpcy5fdG90YWwgKz0gZWxhcHNlZDtcbiAgICAgIHRoaXMuX2xvb3AgPSAhIWNmZy5sb29wO1xuICAgICAgdGhpcy5fdG8gPSByZXNvbHZlKFtjZmcudG8sIHRvLCBjdXJyZW50VmFsdWUsIGNmZy5mcm9tXSk7XG4gICAgICB0aGlzLl9mcm9tID0gcmVzb2x2ZShbY2ZnLmZyb20sIGN1cnJlbnRWYWx1ZSwgdG9dKTtcbiAgICB9XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMudGljayhEYXRlLm5vdygpKTtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fbm90aWZ5KGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgdGljayhkYXRlKSB7XG4gICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uO1xuICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLl9mcm9tO1xuICAgIGNvbnN0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgbGV0IGZhY3RvcjtcbiAgICB0aGlzLl9hY3RpdmUgPSBmcm9tICE9PSB0byAmJiAobG9vcCB8fCAoZWxhcHNlZCA8IGR1cmF0aW9uKSk7XG4gICAgaWYgKCF0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IHRvO1xuICAgICAgdGhpcy5fbm90aWZ5KHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZhY3RvciA9IChlbGFwc2VkIC8gZHVyYXRpb24pICUgMjtcbiAgICBmYWN0b3IgPSBsb29wICYmIGZhY3RvciA+IDEgPyAyIC0gZmFjdG9yIDogZmFjdG9yO1xuICAgIGZhY3RvciA9IHRoaXMuX2Vhc2luZyhNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBmYWN0b3IpKSk7XG4gICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gIH1cbiAgd2FpdCgpIHtcbiAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX3Byb21pc2VzIHx8ICh0aGlzLl9wcm9taXNlcyA9IFtdKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICBwcm9taXNlcy5wdXNoKHtyZXMsIHJlan0pO1xuICAgIH0pO1xuICB9XG4gIF9ub3RpZnkocmVzb2x2ZWQpIHtcbiAgICBjb25zdCBtZXRob2QgPSByZXNvbHZlZCA/ICdyZXMnIDogJ3Jlaic7XG4gICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9taXNlc1tpXVttZXRob2RdKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG51bWJlcnMgPSBbJ3gnLCAneScsICdib3JkZXJXaWR0aCcsICdyYWRpdXMnLCAndGVuc2lvbiddO1xuY29uc3QgY29sb3JzID0gWydjb2xvcicsICdib3JkZXJDb2xvcicsICdiYWNrZ3JvdW5kQ29sb3InXTtcbmRlZmF1bHRzLnNldCgnYW5pbWF0aW9uJywge1xuICBkZWxheTogdW5kZWZpbmVkLFxuICBkdXJhdGlvbjogMTAwMCxcbiAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgZm46IHVuZGVmaW5lZCxcbiAgZnJvbTogdW5kZWZpbmVkLFxuICBsb29wOiB1bmRlZmluZWQsXG4gIHRvOiB1bmRlZmluZWQsXG4gIHR5cGU6IHVuZGVmaW5lZCxcbn0pO1xuY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG5kZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9uJywge1xuICBfZmFsbGJhY2s6IGZhbHNlLFxuICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnb25Qcm9ncmVzcycgJiYgbmFtZSAhPT0gJ29uQ29tcGxldGUnICYmIG5hbWUgIT09ICdmbicsXG59KTtcbmRlZmF1bHRzLnNldCgnYW5pbWF0aW9ucycsIHtcbiAgY29sb3JzOiB7XG4gICAgdHlwZTogJ2NvbG9yJyxcbiAgICBwcm9wZXJ0aWVzOiBjb2xvcnNcbiAgfSxcbiAgbnVtYmVyczoge1xuICAgIHR5cGU6ICdudW1iZXInLFxuICAgIHByb3BlcnRpZXM6IG51bWJlcnNcbiAgfSxcbn0pO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbnMnLCB7XG4gIF9mYWxsYmFjazogJ2FuaW1hdGlvbicsXG59KTtcbmRlZmF1bHRzLnNldCgndHJhbnNpdGlvbnMnLCB7XG4gIGFjdGl2ZToge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgZHVyYXRpb246IDQwMFxuICAgIH1cbiAgfSxcbiAgcmVzaXplOiB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogMFxuICAgIH1cbiAgfSxcbiAgc2hvdzoge1xuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBmcm9tOiAndHJhbnNwYXJlbnQnXG4gICAgICB9LFxuICAgICAgdmlzaWJsZToge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICB9LFxuICAgIH1cbiAgfSxcbiAgaGlkZToge1xuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICB0bzogJ3RyYW5zcGFyZW50J1xuICAgICAgfSxcbiAgICAgIHZpc2libGU6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICBmbjogdiA9PiB2IHwgMFxuICAgICAgfSxcbiAgICB9XG4gIH1cbn0pO1xuY2xhc3MgQW5pbWF0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBjb25maWcpIHtcbiAgICB0aGlzLl9jaGFydCA9IGNoYXJ0O1xuICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5jb25maWd1cmUoY29uZmlnKTtcbiAgfVxuICBjb25maWd1cmUoY29uZmlnKSB7XG4gICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNvbmZpZykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgY2ZnID0gY29uZmlnW2tleV07XG4gICAgICBpZiAoIWlzT2JqZWN0KGNmZykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgcmVzb2x2ZWRbb3B0aW9uXSA9IGNmZ1tvcHRpb25dO1xuICAgICAgfVxuICAgICAgKGlzQXJyYXkoY2ZnLnByb3BlcnRpZXMpICYmIGNmZy5wcm9wZXJ0aWVzIHx8IFtrZXldKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgYW5pbWF0ZWRQcm9wcy5zZXQocHJvcCwgcmVzb2x2ZWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBfYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVUYXJnZXRPcHRpb25zKHRhcmdldCwgbmV3T3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLl9jcmVhdGVBbmltYXRpb25zKG9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgIGlmIChuZXdPcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgIGF3YWl0QWxsKHRhcmdldC5vcHRpb25zLiRhbmltYXRpb25zLCBuZXdPcHRpb25zKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb25zO1xuICB9XG4gIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG4gICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCk7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmIChwcm9wLmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3AgPT09ICdvcHRpb25zJykge1xuICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1twcm9wXTtcbiAgICAgIGxldCBhbmltYXRpb24gPSBydW5uaW5nW3Byb3BdO1xuICAgICAgY29uc3QgY2ZnID0gYW5pbWF0ZWRQcm9wcy5nZXQocHJvcCk7XG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIGlmIChjZmcgJiYgYW5pbWF0aW9uLmFjdGl2ZSgpKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnVwZGF0ZShjZmcsIHZhbHVlLCBkYXRlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghY2ZnIHx8ICFjZmcuZHVyYXRpb24pIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBpZiAodGhpcy5fcHJvcGVydGllcy5zaXplID09PSAwKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRhcmdldCwgdmFsdWVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgIGlmIChhbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgYW5pbWF0b3IuYWRkKHRoaXMuX2NoYXJ0LCBhbmltYXRpb25zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYXdhaXRBbGwoYW5pbWF0aW9ucywgcHJvcGVydGllcykge1xuICBjb25zdCBydW5uaW5nID0gW107XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgaWYgKGFuaW0gJiYgYW5pbS5hY3RpdmUoKSkge1xuICAgICAgcnVubmluZy5wdXNoKGFuaW0ud2FpdCgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gIGlmICghbmV3T3B0aW9ucykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgb3B0aW9ucyA9IHRhcmdldC5vcHRpb25zO1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICB0YXJnZXQub3B0aW9ucyA9IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7JHNoYXJlZDogZmFsc2UsICRhbmltYXRpb25zOiB7fX0pO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICBjb25zdCBvcHRzID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgcmV2ZXJzZSA9IG9wdHMucmV2ZXJzZTtcbiAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gIGNvbnN0IG1heCA9IG9wdHMubWF4ID09PSB1bmRlZmluZWQgPyBhbGxvd2VkT3ZlcmZsb3cgOiAwO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiByZXZlcnNlID8gbWF4IDogbWluLFxuICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICB9O1xufVxuZnVuY3Rpb24gZGVmYXVsdENsaXAoeFNjYWxlLCB5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICBpZiAoYWxsb3dlZE92ZXJmbG93ID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgY29uc3QgeSA9IHNjYWxlQ2xpcCh5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdyk7XG4gIHJldHVybiB7XG4gICAgdG9wOiB5LmVuZCxcbiAgICByaWdodDogeC5lbmQsXG4gICAgYm90dG9tOiB5LnN0YXJ0LFxuICAgIGxlZnQ6IHguc3RhcnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHRvQ2xpcCh2YWx1ZSkge1xuICBsZXQgdCwgciwgYiwgbDtcbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgciA9IHZhbHVlLnJpZ2h0O1xuICAgIGIgPSB2YWx1ZS5ib3R0b207XG4gICAgbCA9IHZhbHVlLmxlZnQ7XG4gIH0gZWxzZSB7XG4gICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdG9wOiB0LFxuICAgIHJpZ2h0OiByLFxuICAgIGJvdHRvbTogYixcbiAgICBsZWZ0OiBsLFxuICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCBmaWx0ZXJWaXNpYmxlKSB7XG4gIGNvbnN0IGtleXMgPSBbXTtcbiAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICBsZXQgaSwgaWxlbjtcbiAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgZHNJbmRleCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICBjb25zdCBzaW5nbGVNb2RlID0gb3B0aW9ucy5tb2RlID09PSAnc2luZ2xlJztcbiAgbGV0IGksIGlsZW4sIGRhdGFzZXRJbmRleCwgb3RoZXJWYWx1ZTtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGRhdGFzZXRJbmRleCA9ICtrZXlzW2ldO1xuICAgIGlmIChkYXRhc2V0SW5kZXggPT09IGRzSW5kZXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmFsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKG90aGVyVmFsdWUpICYmIChzaW5nbGVNb2RlIHx8ICh2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpKSB7XG4gICAgICB2YWx1ZSArPSBvdGhlclZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIGNvbnN0IGFkYXRhID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgbGV0IGksIGlsZW4sIGtleTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBhZGF0YVtpXSA9IHtcbiAgICAgIHg6IGtleSxcbiAgICAgIHk6IGRhdGFba2V5XVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGFkYXRhO1xufVxuZnVuY3Rpb24gaXNTdGFja2VkKHNjYWxlLCBtZXRhKSB7XG4gIGNvbnN0IHN0YWNrZWQgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG4gIHJldHVybiBzdGFja2VkIHx8IChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGdldFN0YWNrS2V5KGluZGV4U2NhbGUsIHZhbHVlU2NhbGUsIG1ldGEpIHtcbiAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gc2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICByZXR1cm4ge1xuICAgIG1pbjogbWluRGVmaW5lZCA/IG1pbiA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBzdGFja0tleSwgaW5kZXhWYWx1ZSkge1xuICBjb25zdCBzdWJTdGFjayA9IHN0YWNrc1tzdGFja0tleV0gfHwgKHN0YWNrc1tzdGFja0tleV0gPSB7fSk7XG4gIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gIGZvciAoY29uc3QgbWV0YSBvZiB2U2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSkucmV2ZXJzZSgpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBzdGFja1ttZXRhLmluZGV4XTtcbiAgICBpZiAoKHBvc2l0aXZlICYmIHZhbHVlID4gMCkgfHwgKCFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApKSB7XG4gICAgICByZXR1cm4gbWV0YS5pbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1cGRhdGVTdGFja3MoY29udHJvbGxlciwgcGFyc2VkKSB7XG4gIGNvbnN0IHtjaGFydCwgX2NhY2hlZE1ldGE6IG1ldGF9ID0gY29udHJvbGxlcjtcbiAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgY29uc3Qge2lTY2FsZSwgdlNjYWxlLCBpbmRleDogZGF0YXNldEluZGV4fSA9IG1ldGE7XG4gIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gIGNvbnN0IGtleSA9IGdldFN0YWNrS2V5KGlTY2FsZSwgdlNjYWxlLCBtZXRhKTtcbiAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gIGxldCBzdGFjaztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgIGNvbnN0IHtbaUF4aXNdOiBpbmRleCwgW3ZBeGlzXTogdmFsdWV9ID0gaXRlbTtcbiAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgc3RhY2sgPSBpdGVtU3RhY2tzW3ZBeGlzXSA9IGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBrZXksIGluZGV4KTtcbiAgICBzdGFja1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICBzdGFjay5fYm90dG9tID0gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCBmYWxzZSwgbWV0YS50eXBlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gIGNvbnN0IHNjYWxlcyA9IGNoYXJ0LnNjYWxlcztcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNjYWxlcykuZmlsdGVyKGtleSA9PiBzY2FsZXNba2V5XS5heGlzID09PSBheGlzKS5zaGlmdCgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YXNldENvbnRleHQocGFyZW50LCBpbmRleCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsXG4gICAge1xuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIGRhdGFzZXQ6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGFzZXRJbmRleDogaW5kZXgsXG4gICAgICBpbmRleCxcbiAgICAgIG1vZGU6ICdkZWZhdWx0JyxcbiAgICAgIHR5cGU6ICdkYXRhc2V0J1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgIHBhcnNlZDogdW5kZWZpbmVkLFxuICAgIHJhdzogdW5kZWZpbmVkLFxuICAgIGVsZW1lbnQsXG4gICAgaW5kZXgsXG4gICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgIHR5cGU6ICdkYXRhJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gIGNvbnN0IGRhdGFzZXRJbmRleCA9IG1ldGEuY29udHJvbGxlci5pbmRleDtcbiAgY29uc3QgYXhpcyA9IG1ldGEudlNjYWxlICYmIG1ldGEudlNjYWxlLmF4aXM7XG4gIGlmICghYXhpcykge1xuICAgIHJldHVybjtcbiAgfVxuICBpdGVtcyA9IGl0ZW1zIHx8IG1ldGEuX3BhcnNlZDtcbiAgZm9yIChjb25zdCBwYXJzZWQgb2YgaXRlbXMpIHtcbiAgICBjb25zdCBzdGFja3MgPSBwYXJzZWQuX3N0YWNrcztcbiAgICBpZiAoIXN0YWNrcyB8fCBzdGFja3NbYXhpc10gPT09IHVuZGVmaW5lZCB8fCBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlbGV0ZSBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XTtcbiAgfVxufVxuY29uc3QgaXNEaXJlY3RVcGRhdGVNb2RlID0gKG1vZGUpID0+IG1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCkgPT4gc2hhcmVkID8gY2FjaGVkIDogT2JqZWN0LmFzc2lnbih7fSwgY2FjaGVkKTtcbmNvbnN0IGNyZWF0ZVN0YWNrID0gKGNhblN0YWNrLCBtZXRhLCBjaGFydCkgPT4gY2FuU3RhY2sgJiYgIW1ldGEuaGlkZGVuICYmIG1ldGEuX3N0YWNrZWRcbiAgJiYge2tleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSwgdmFsdWVzOiBudWxsfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICB0aGlzLl90eXBlID0gdGhpcy5fY2FjaGVkTWV0YS50eXBlO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wYXJzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NoYXJlZE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZHJhd1N0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSBmYWxzZTtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIHRoaXMubGlua1NjYWxlcygpO1xuICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgfVxuICB1cGRhdGVJbmRleChkYXRhc2V0SW5kZXgpIHtcbiAgICBpZiAodGhpcy5pbmRleCAhPT0gZGF0YXNldEluZGV4KSB7XG4gICAgICBjbGVhclN0YWNrcyh0aGlzLl9jYWNoZWRNZXRhKTtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgfVxuICBsaW5rU2NhbGVzKCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcikgPT4gYXhpcyA9PT0gJ3gnID8geCA6IGF4aXMgPT09ICdyJyA/IHIgOiB5O1xuICAgIGNvbnN0IHhpZCA9IG1ldGEueEF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQueEF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAneCcpKTtcbiAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgY29uc3QgcmlkID0gbWV0YS5yQXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC5yQXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICdyJykpO1xuICAgIGNvbnN0IGluZGV4QXhpcyA9IG1ldGEuaW5kZXhBeGlzO1xuICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgY29uc3QgdmlkID0gbWV0YS52QXhpc0lEID0gY2hvb3NlSWQoaW5kZXhBeGlzLCB5aWQsIHhpZCwgcmlkKTtcbiAgICBtZXRhLnhTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh4aWQpO1xuICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgbWV0YS5yU2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQocmlkKTtcbiAgICBtZXRhLmlTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZChpaWQpO1xuICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gIH1cbiAgZ2V0RGF0YXNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3RoaXMuaW5kZXhdO1xuICB9XG4gIGdldE1ldGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEodGhpcy5pbmRleCk7XG4gIH1cbiAgZ2V0U2NhbGVGb3JJZChzY2FsZUlEKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICB9XG4gIF9nZXRPdGhlclNjYWxlKHNjYWxlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZVxuICAgICAgPyBtZXRhLnZTY2FsZVxuICAgICAgOiBtZXRhLmlTY2FsZTtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gIH1cbiAgX2Rlc3Ryb3koKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICB9XG4gIH1cbiAgX2RhdGFDaGVjaygpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgIGNvbnN0IF9kYXRhID0gdGhpcy5fZGF0YTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSk7XG4gICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHMoX2RhdGEsIHRoaXMpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgIG1ldGEuX3BhcnNlZCA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShkYXRhKSkge1xuICAgICAgICBsaXN0ZW5BcnJheUV2ZW50cyhkYXRhLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbiAgYWRkRWxlbWVudHMoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy5fZGF0YUNoZWNrKCk7XG4gICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICB9XG4gIH1cbiAgYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgbGV0IHN0YWNrQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgIGNvbnN0IG9sZFN0YWNrZWQgPSBtZXRhLl9zdGFja2VkO1xuICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICB9XG4gICAgdGhpcy5fcmVzeW5jRWxlbWVudHMocmVzZXROZXdFbGVtZW50cyk7XG4gICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICB9XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0U2NvcGVLZXlzKHRoaXMuX3R5cGUpO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cywgdHJ1ZSk7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMuX3BhcnNpbmcgPSB0aGlzLm9wdGlvbnMucGFyc2luZztcbiAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICB9XG4gIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHtfY2FjaGVkTWV0YTogbWV0YSwgX2RhdGE6IGRhdGF9ID0gdGhpcztcbiAgICBjb25zdCB7aVNjYWxlLCBfc3RhY2tlZH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgbGV0IHByZXYgPSBzdGFydCA+IDAgJiYgbWV0YS5fcGFyc2VkW3N0YXJ0IC0gMV07XG4gICAgbGV0IGksIGN1ciwgcGFyc2VkO1xuICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICBwYXJzZWQgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNBcnJheShkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiA9ICgpID0+IGN1cltpQXhpc10gPT09IG51bGwgfHwgKHByZXYgJiYgY3VyW2lBeGlzXSA8IHByZXZbaUF4aXNdKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2ID0gY3VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtZXRhLl9zb3J0ZWQgPSBzb3J0ZWQ7XG4gICAgfVxuICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgfVxuICB9XG4gIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICAgIGNvbnN0IHNpbmdsZVNjYWxlID0gaVNjYWxlID09PSB2U2NhbGU7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXg7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgW2lBeGlzXTogc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpbmRleF0sIGluZGV4KSxcbiAgICAgICAgW3ZBeGlzXTogdlNjYWxlLnBhcnNlKGRhdGFbaW5kZXhdLCBpbmRleClcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgeTogeVNjYWxlLnBhcnNlKGl0ZW1bMV0sIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3Qge3hBeGlzS2V5ID0gJ3gnLCB5QXhpc0tleSA9ICd5J30gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgIHg6IHhTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIHhBeGlzS2V5KSwgaW5kZXgpLFxuICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkW2luZGV4XTtcbiAgfVxuICBnZXREYXRhRWxlbWVudChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICB9XG4gIGFwcGx5U3RhY2soc2NhbGUsIHBhcnNlZCwgbW9kZSkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICBjb25zdCBzdGFjayA9IHtcbiAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgIHZhbHVlczogcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc11cbiAgICB9O1xuICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge21vZGV9KTtcbiAgfVxuICB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICBjb25zdCB2YWx1ZXMgPSBzdGFjayAmJiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXTtcbiAgICBpZiAoc3RhY2sgJiYgdmFsdWVzKSB7XG4gICAgICBzdGFjay52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICB2YWx1ZSA9IGFwcGx5U3RhY2soc3RhY2ssIHBhcnNlZFZhbHVlLCB0aGlzLl9jYWNoZWRNZXRhLmluZGV4KTtcbiAgICB9XG4gICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCB2YWx1ZSk7XG4gICAgcmFuZ2UubWF4ID0gTWF0aC5tYXgocmFuZ2UubWF4LCB2YWx1ZSk7XG4gIH1cbiAgZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IF9wYXJzZWQgPSBtZXRhLl9wYXJzZWQ7XG4gICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCBpbGVuID0gX3BhcnNlZC5sZW5ndGg7XG4gICAgY29uc3Qgb3RoZXJTY2FsZSA9IHRoaXMuX2dldE90aGVyU2NhbGUoc2NhbGUpO1xuICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgIGNvbnN0IHJhbmdlID0ge21pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWX07XG4gICAgY29uc3Qge21pbjogb3RoZXJNaW4sIG1heDogb3RoZXJNYXh9ID0gZ2V0VXNlckJvdW5kcyhvdGhlclNjYWxlKTtcbiAgICBsZXQgaSwgcGFyc2VkO1xuICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc29ydGVkKSB7XG4gICAgICBmb3IgKGkgPSBpbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIGdldEFsbFBhcnNlZFZhbHVlcyhzY2FsZSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZDtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHBhcnNlZC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgfTtcbiAgfVxuICBfdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLnVwZGF0ZShtb2RlIHx8ICdkZWZhdWx0Jyk7XG4gICAgbWV0YS5fY2xpcCA9IHRvQ2xpcCh2YWx1ZU9yRGVmYXVsdCh0aGlzLm9wdGlvbnMuY2xpcCwgZGVmYXVsdENsaXAobWV0YS54U2NhbGUsIG1ldGEueVNjYWxlLCB0aGlzLmdldE1heE92ZXJmbG93KCkpKSk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHt9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGNvbnN0IGFjdGl2ZSA9IFtdO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgY29uc3QgY291bnQgPSB0aGlzLl9kcmF3Q291bnQgfHwgKGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0KTtcbiAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICBsZXQgaTtcbiAgICBpZiAobWV0YS5kYXRhc2V0KSB7XG4gICAgICBtZXRhLmRhdGFzZXQuZHJhdyhjdHgsIGFyZWEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICBpZiAoZWxlbWVudC5oaWRkZW4pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5hY3RpdmUgJiYgZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3ApIHtcbiAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmRyYXcoY3R4LCBhcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSkge1xuICAgICAgYWN0aXZlW2ldLmRyYXcoY3R4LCBhcmVhKTtcbiAgICB9XG4gIH1cbiAgZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSkge1xuICAgIGNvbnN0IG1vZGUgPSBhY3RpdmUgPyAnYWN0aXZlJyA6ICdkZWZhdWx0JztcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXRcbiAgICAgID8gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpXG4gICAgICA6IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCB8fCAwLCBtb2RlKTtcbiAgfVxuICBnZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIG1vZGUpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhW2luZGV4XTtcbiAgICAgIGNvbnRleHQgPSBlbGVtZW50LiRjb250ZXh0IHx8XG4gICAgICAgIChlbGVtZW50LiRjb250ZXh0ID0gY3JlYXRlRGF0YUNvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBlbGVtZW50KSk7XG4gICAgICBjb250ZXh0LnBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgIGNvbnRleHQucmF3ID0gZGF0YXNldC5kYXRhW2luZGV4XTtcbiAgICAgIGNvbnRleHQuaW5kZXggPSBjb250ZXh0LmRhdGFJbmRleCA9IGluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fFxuICAgICAgICAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICB9XG4gICAgY29udGV4dC5hY3RpdmUgPSAhIWFjdGl2ZTtcbiAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG4gIHJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICB9XG4gIHJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZUVsZW1lbnRPcHRpb25zKHRoaXMuZGF0YUVsZW1lbnRUeXBlLmlkLCBtb2RlLCBpbmRleCk7XG4gIH1cbiAgX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICBjb25zdCBhY3RpdmUgPSBtb2RlID09PSAnYWN0aXZlJztcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZERhdGFPcHRzO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2NhY2hlS2V5XTtcbiAgICBjb25zdCBzaGFyaW5nID0gdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nICYmIGRlZmluZWQoaW5kZXgpO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgY29uc3QgcHJlZml4ZXMgPSBhY3RpdmUgPyBbYCR7ZWxlbWVudFR5cGV9SG92ZXJgLCAnaG92ZXInLCBlbGVtZW50VHlwZSwgJyddIDogW2VsZW1lbnRUeXBlLCAnJ107XG4gICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmVsZW1lbnRzW2VsZW1lbnRUeXBlXSk7XG4gICAgY29uc3QgY29udGV4dCA9ICgpID0+IHRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBjb25maWcucmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyk7XG4gICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICB2YWx1ZXMuJHNoYXJlZCA9IHNoYXJpbmc7XG4gICAgICBjYWNoZVtjYWNoZUtleV0gPSBPYmplY3QuZnJlZXplKGNsb25lSWZOb3RTaGFyZWQodmFsdWVzLCBzaGFyaW5nKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCB0cmFuc2l0aW9uLCBhY3RpdmUpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWREYXRhT3B0cztcbiAgICBjb25zdCBjYWNoZUtleSA9IGBhbmltYXRpb24tJHt0cmFuc2l0aW9ufWA7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGxldCBvcHRpb25zO1xuICAgIGlmIChjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRBbmltYXRpb25TY29wZUtleXModGhpcy5fdHlwZSwgdHJhbnNpdGlvbik7XG4gICAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMpO1xuICAgICAgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIHRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCB0cmFuc2l0aW9uKSk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2NhY2hlYWJsZSkge1xuICAgICAgY2FjaGVbY2FjaGVLZXldID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NoYXJlZE9wdGlvbnMgfHwgKHRoaXMuX3NoYXJlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSk7XG4gIH1cbiAgaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucykge1xuICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnQoZWxlbWVudCwgaW5kZXgsIHByb3BlcnRpZXMsIG1vZGUpIHtcbiAgICBpZiAoaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIG5ld09wdGlvbnMpIHtcbiAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCBtb2RlLCBhY3RpdmUpIHtcbiAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRTdHlsZShpbmRleCwgYWN0aXZlKTtcbiAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSwgYWN0aXZlKS51cGRhdGUoZWxlbWVudCwge1xuICAgICAgb3B0aW9uczogKCFhY3RpdmUgJiYgdGhpcy5nZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpKSB8fCBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlSG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gIH1cbiAgc2V0SG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCB0cnVlKTtcbiAgfVxuICBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBfc2V0RGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIF9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgZm9yIChjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSBvZiB0aGlzLl9zeW5jTGlzdCkge1xuICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgIH1cbiAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgIGNvbnN0IG51bU1ldGEgPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgY29uc3QgbnVtRGF0YSA9IGRhdGEubGVuZ3RoO1xuICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICB0aGlzLnBhcnNlKDAsIGNvdW50KTtcbiAgICB9XG4gICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgfSBlbHNlIGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudHMobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgIH1cbiAgfVxuICBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGE7XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBtb3ZlID0gKGFycikgPT4ge1xuICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgIGZvciAoaSA9IGFyci5sZW5ndGggLSAxOyBpID49IGVuZDsgaS0tKSB7XG4gICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgfVxuICAgIH07XG4gICAgbW92ZShkYXRhKTtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICBkYXRhW2ldID0gbmV3IHRoaXMuZGF0YUVsZW1lbnRUeXBlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgfVxuICAgIHRoaXMucGFyc2Uoc3RhcnQsIGNvdW50KTtcbiAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVFbGVtZW50cyhlbGVtZW50LCBzdGFydCwgY291bnQsIG1vZGUpIHt9XG4gIF9yZW1vdmVFbGVtZW50cyhzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgIGNsZWFyU3RhY2tzKG1ldGEsIHJlbW92ZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICBtZXRhLmRhdGEuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgX3N5bmMoYXJncykge1xuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSA9IGFyZ3M7XG4gICAgICB0aGlzW21ldGhvZF0oYXJnMSwgYXJnMik7XG4gICAgfVxuICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW3RoaXMuaW5kZXgsIC4uLmFyZ3NdKTtcbiAgfVxuICBfb25EYXRhUHVzaCgpIHtcbiAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdGhpcy5fc3luYyhbJ19pbnNlcnRFbGVtZW50cycsIHRoaXMuZ2V0RGF0YXNldCgpLmRhdGEubGVuZ3RoIC0gY291bnQsIGNvdW50XSk7XG4gIH1cbiAgX29uRGF0YVBvcCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX3JlbW92ZUVsZW1lbnRzJywgdGhpcy5fY2FjaGVkTWV0YS5kYXRhLmxlbmd0aCAtIDEsIDFdKTtcbiAgfVxuICBfb25EYXRhU2hpZnQoKSB7XG4gICAgdGhpcy5fc3luYyhbJ19yZW1vdmVFbGVtZW50cycsIDAsIDFdKTtcbiAgfVxuICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgIGlmIChjb3VudCkge1xuICAgICAgdGhpcy5fc3luYyhbJ19yZW1vdmVFbGVtZW50cycsIHN0YXJ0LCBjb3VudF0pO1xuICAgIH1cbiAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIGlmIChuZXdDb3VudCkge1xuICAgICAgdGhpcy5fc3luYyhbJ19pbnNlcnRFbGVtZW50cycsIHN0YXJ0LCBuZXdDb3VudF0pO1xuICAgIH1cbiAgfVxuICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX2luc2VydEVsZW1lbnRzJywgMCwgYXJndW1lbnRzLmxlbmd0aF0pO1xuICB9XG59XG5EYXRhc2V0Q29udHJvbGxlci5kZWZhdWx0cyA9IHt9O1xuRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLmRhdGFzZXRFbGVtZW50VHlwZSA9IG51bGw7XG5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgaWYgKCFzY2FsZS5fY2FjaGUuJGJhcikge1xuICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHZpc2libGVNZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgfVxuICAgIHNjYWxlLl9jYWNoZS4kYmFyID0gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KChhLCBiKSA9PiBhIC0gYikpO1xuICB9XG4gIHJldHVybiBzY2FsZS5fY2FjaGUuJGJhcjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpIHtcbiAgY29uc3Qgc2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gIGxldCBtaW4gPSBzY2FsZS5fbGVuZ3RoO1xuICBsZXQgaSwgaWxlbiwgY3VyciwgcHJldjtcbiAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpID0+IHtcbiAgICBpZiAoY3VyciA9PT0gMzI3NjcgfHwgY3VyciA9PT0gLTMyNzY4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZWZpbmVkKHByZXYpKSB7XG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIE1hdGguYWJzKGN1cnIgLSBwcmV2KSB8fCBtaW4pO1xuICAgIH1cbiAgICBwcmV2ID0gY3VycjtcbiAgfTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgIHVwZGF0ZU1pbkFuZFByZXYoKTtcbiAgfVxuICBwcmV2ID0gdW5kZWZpbmVkO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gIH1cbiAgcmV0dXJuIG1pbjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgY29uc3QgdGhpY2tuZXNzID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gIGxldCBzaXplLCByYXRpbztcbiAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgIHNpemUgPSBydWxlci5taW4gKiBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcbiAgICByYXRpbyA9IG9wdGlvbnMuYmFyUGVyY2VudGFnZTtcbiAgfSBlbHNlIHtcbiAgICBzaXplID0gdGhpY2tuZXNzICogc3RhY2tDb3VudDtcbiAgICByYXRpbyA9IDE7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgcmF0aW8sXG4gICAgc3RhcnQ6IHJ1bGVyLnBpeGVsc1tpbmRleF0gLSAoc2l6ZSAvIDIpXG4gIH07XG59XG5mdW5jdGlvbiBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkge1xuICBjb25zdCBwaXhlbHMgPSBydWxlci5waXhlbHM7XG4gIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICBsZXQgcHJldiA9IGluZGV4ID4gMCA/IHBpeGVsc1tpbmRleCAtIDFdIDogbnVsbDtcbiAgbGV0IG5leHQgPSBpbmRleCA8IHBpeGVscy5sZW5ndGggLSAxID8gcGl4ZWxzW2luZGV4ICsgMV0gOiBudWxsO1xuICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gIGlmIChwcmV2ID09PSBudWxsKSB7XG4gICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICB9XG4gIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgbmV4dCA9IGN1cnIgKyBjdXJyIC0gcHJldjtcbiAgfVxuICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICBjb25zdCBzaXplID0gTWF0aC5hYnMobmV4dCAtIHByZXYpIC8gMiAqIHBlcmNlbnQ7XG4gIHJldHVybiB7XG4gICAgY2h1bms6IHNpemUgLyBzdGFja0NvdW50LFxuICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgc3RhcnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICBjb25zdCBzdGFydFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzBdLCBpKTtcbiAgY29uc3QgZW5kVmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMV0sIGkpO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gIGNvbnN0IG1heCA9IE1hdGgubWF4KHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgbGV0IGJhclN0YXJ0ID0gbWluO1xuICBsZXQgYmFyRW5kID0gbWF4O1xuICBpZiAoTWF0aC5hYnMobWluKSA+IE1hdGguYWJzKG1heCkpIHtcbiAgICBiYXJTdGFydCA9IG1heDtcbiAgICBiYXJFbmQgPSBtaW47XG4gIH1cbiAgaXRlbVt2U2NhbGUuYXhpc10gPSBiYXJFbmQ7XG4gIGl0ZW0uX2N1c3RvbSA9IHtcbiAgICBiYXJTdGFydCxcbiAgICBiYXJFbmQsXG4gICAgc3RhcnQ6IHN0YXJ0VmFsdWUsXG4gICAgZW5kOiBlbmRWYWx1ZSxcbiAgICBtaW4sXG4gICAgbWF4XG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgaWYgKGlzQXJyYXkoZW50cnkpKSB7XG4gICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgfSBlbHNlIHtcbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5mdW5jdGlvbiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgbGV0IGksIGlsZW4sIGl0ZW0sIGVudHJ5O1xuICBmb3IgKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBlbnRyeSA9IGRhdGFbaV07XG4gICAgaXRlbSA9IHt9O1xuICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpXSwgaSk7XG4gICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gIHJldHVybiBjdXN0b20gJiYgY3VzdG9tLmJhclN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgY3VzdG9tLmJhckVuZCAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gYmFyU2lnbihzaXplLCB2U2NhbGUsIGFjdHVhbEJhc2UpIHtcbiAgaWYgKHNpemUgIT09IDApIHtcbiAgICByZXR1cm4gc2lnbihzaXplKTtcbiAgfVxuICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgbGV0IHJldmVyc2UsIHN0YXJ0LCBlbmQsIHRvcCwgYm90dG9tO1xuICBpZiAocHJvcGVydGllcy5ob3Jpem9udGFsKSB7XG4gICAgcmV2ZXJzZSA9IHByb3BlcnRpZXMuYmFzZSA+IHByb3BlcnRpZXMueDtcbiAgICBzdGFydCA9ICdsZWZ0JztcbiAgICBlbmQgPSAncmlnaHQnO1xuICB9IGVsc2Uge1xuICAgIHJldmVyc2UgPSBwcm9wZXJ0aWVzLmJhc2UgPCBwcm9wZXJ0aWVzLnk7XG4gICAgc3RhcnQgPSAnYm90dG9tJztcbiAgICBlbmQgPSAndG9wJztcbiAgfVxuICBpZiAocmV2ZXJzZSkge1xuICAgIHRvcCA9ICdlbmQnO1xuICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gJ3N0YXJ0JztcbiAgICBib3R0b20gPSAnZW5kJztcbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBlbmQsIHJldmVyc2UsIHRvcCwgYm90dG9tfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gIGxldCBlZGdlID0gb3B0aW9ucy5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCByZXMgPSB7fTtcbiAgaWYgKCFlZGdlKSB7XG4gICAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7c3RhcnQsIGVuZCwgcmV2ZXJzZSwgdG9wLCBib3R0b219ID0gYm9yZGVyUHJvcHMocHJvcGVydGllcyk7XG4gIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgIHByb3BlcnRpZXMuZW5hYmxlQm9yZGVyUmFkaXVzID0gdHJ1ZTtcbiAgICBpZiAoKHN0YWNrLl90b3AgfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICBlZGdlID0gdG9wO1xuICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICBlZGdlID0gYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbcGFyc2VFZGdlKGJvdHRvbSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICAgIGVkZ2UgPSB0b3A7XG4gICAgfVxuICB9XG4gIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xufVxuZnVuY3Rpb24gcGFyc2VFZGdlKGVkZ2UsIGEsIGIsIHJldmVyc2UpIHtcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBlZGdlID0gc3dhcChlZGdlLCBhLCBiKTtcbiAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gIH0gZWxzZSB7XG4gICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICB9XG4gIHJldHVybiBlZGdlO1xufVxuZnVuY3Rpb24gc3dhcChvcmlnLCB2MSwgdjIpIHtcbiAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHYgPT09ICdzdGFydCcgPyBzdGFydCA6IHYgPT09ICdlbmQnID8gZW5kIDogdjtcbn1cbmZ1bmN0aW9uIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywge2luZmxhdGVBbW91bnR9LCByYXRpbykge1xuICBwcm9wZXJ0aWVzLmluZmxhdGVBbW91bnQgPSBpbmZsYXRlQW1vdW50ID09PSAnYXV0bydcbiAgICA/IHJhdGlvID09PSAxID8gMC4zMyA6IDBcbiAgICA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgcmV0dXJuIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICB9XG4gIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3Qge3hBeGlzS2V5ID0gJ3gnLCB5QXhpc0tleSA9ICd5J30gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IGlBeGlzS2V5ID0gaVNjYWxlLmF4aXMgPT09ICd4JyA/IHhBeGlzS2V5IDogeUF4aXNLZXk7XG4gICAgY29uc3QgdkF4aXNLZXkgPSB2U2NhbGUuYXhpcyA9PT0gJ3gnID8geEF4aXNLZXkgOiB5QXhpc0tleTtcbiAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgaXRlbSwgb2JqO1xuICAgIGZvciAoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgIGl0ZW0gPSB7fTtcbiAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgc3VwZXIudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgIH1cbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIGNvbnN0IHZhbHVlID0gaXNGbG9hdEJhcihjdXN0b20pXG4gICAgICA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nXG4gICAgICA6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGJhcnMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aW5kZXgsIF9jYWNoZWRNZXRhOiB7dlNjYWxlfX0gPSB0aGlzO1xuICAgIGNvbnN0IGJhc2UgPSB2U2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCBydWxlciA9IHRoaXMuX2dldFJ1bGVyKCk7XG4gICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpO1xuICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCB2cGl4ZWxzID0gcmVzZXQgfHwgaXNOdWxsT3JVbmRlZihwYXJzZWRbdlNjYWxlLmF4aXNdKSA/IHtiYXNlLCBoZWFkOiBiYXNlfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBob3Jpem9udGFsLFxuICAgICAgICBiYXNlOiB2cGl4ZWxzLmJhc2UsXG4gICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IChpbmRleCA9PT0gc3RhY2suX3RvcCB8fCBpbmRleCA9PT0gc3RhY2suX2JvdHRvbSksXG4gICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgeTogaG9yaXpvbnRhbCA/IGlwaXhlbHMuY2VudGVyIDogdnBpeGVscy5oZWFkLFxuICAgICAgICBoZWlnaHQ6IGhvcml6b250YWwgPyBpcGl4ZWxzLnNpemUgOiBNYXRoLmFicyh2cGl4ZWxzLnNpemUpLFxuICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgIH07XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYmFyc1tpXS5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHByb3BlcnRpZXMub3B0aW9ucyB8fCBiYXJzW2ldLm9wdGlvbnM7XG4gICAgICBzZXRCb3JkZXJTa2lwcGVkKHByb3BlcnRpZXMsIG9wdGlvbnMsIHN0YWNrLCBpbmRleCk7XG4gICAgICBzZXRJbmZsYXRlQW1vdW50KHByb3BlcnRpZXMsIG9wdGlvbnMsIHJ1bGVyLnJhdGlvKTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChiYXJzW2ldLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgX2dldFN0YWNrcyhsYXN0LCBkYXRhSW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCBtZXRhc2V0cyA9IGlTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0aGlzLl90eXBlKTtcbiAgICBjb25zdCBzdGFja2VkID0gaVNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcbiAgICBjb25zdCBpbGVuID0gbWV0YXNldHMubGVuZ3RoO1xuICAgIGNvbnN0IHN0YWNrcyA9IFtdO1xuICAgIGxldCBpLCBpdGVtO1xuICAgIGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGl0ZW0gPSBtZXRhc2V0c1tpXTtcbiAgICAgIGlmICghaXRlbS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZGF0YUluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCB2YWwgPSBpdGVtLmNvbnRyb2xsZXIuZ2V0UGFyc2VkKGRhdGFJbmRleClbXG4gICAgICAgICAgaXRlbS5jb250cm9sbGVyLl9jYWNoZWRNZXRhLnZTY2FsZS5heGlzXG4gICAgICAgIF07XG4gICAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbCkgfHwgaXNOYU4odmFsKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RhY2tlZCA9PT0gZmFsc2UgfHwgc3RhY2tzLmluZGV4T2YoaXRlbS5zdGFjaykgPT09IC0xIHx8XG5cdFx0XHRcdChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgaXRlbS5zdGFjayA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzdGFja3MucHVzaChpdGVtLnN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmluZGV4ID09PSBsYXN0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXN0YWNrcy5sZW5ndGgpIHtcbiAgICAgIHN0YWNrcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG4gIH1cbiAgX2dldFN0YWNrQ291bnQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgfVxuICBfZ2V0U3RhY2tJbmRleChkYXRhc2V0SW5kZXgsIG5hbWUsIGRhdGFJbmRleCkge1xuICAgIGNvbnN0IHN0YWNrcyA9IHRoaXMuX2dldFN0YWNrcyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCk7XG4gICAgY29uc3QgaW5kZXggPSAobmFtZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgPyBzdGFja3MuaW5kZXhPZihuYW1lKVxuICAgICAgOiAtMTtcbiAgICByZXR1cm4gKGluZGV4ID09PSAtMSlcbiAgICAgID8gc3RhY2tzLmxlbmd0aCAtIDFcbiAgICAgIDogaW5kZXg7XG4gIH1cbiAgX2dldFJ1bGVyKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgcGl4ZWxzID0gW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGEuZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHBpeGVscy5wdXNoKGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpW2lTY2FsZS5heGlzXSwgaSkpO1xuICAgIH1cbiAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICBjb25zdCBtaW4gPSBiYXJUaGlja25lc3MgfHwgY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbixcbiAgICAgIHBpeGVscyxcbiAgICAgIHN0YXJ0OiBpU2NhbGUuX3N0YXJ0UGl4ZWwsXG4gICAgICBlbmQ6IGlTY2FsZS5fZW5kUGl4ZWwsXG4gICAgICBzdGFja0NvdW50OiB0aGlzLl9nZXRTdGFja0NvdW50KCksXG4gICAgICBzY2FsZTogaVNjYWxlLFxuICAgICAgZ3JvdXBlZDogb3B0cy5ncm91cGVkLFxuICAgICAgcmF0aW86IGJhclRoaWNrbmVzcyA/IDEgOiBvcHRzLmNhdGVnb3J5UGVyY2VudGFnZSAqIG9wdHMuYmFyUGVyY2VudGFnZVxuICAgIH07XG4gIH1cbiAgX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGluZGV4KSB7XG4gICAgY29uc3Qge19jYWNoZWRNZXRhOiB7dlNjYWxlLCBfc3RhY2tlZH0sIG9wdGlvbnM6IHtiYXNlOiBiYXNlVmFsdWUsIG1pbkJhckxlbmd0aH19ID0gdGhpcztcbiAgICBjb25zdCBhY3R1YWxCYXNlID0gYmFzZVZhbHVlIHx8IDA7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIGNvbnN0IGZsb2F0aW5nID0gaXNGbG9hdEJhcihjdXN0b20pO1xuICAgIGxldCB2YWx1ZSA9IHBhcnNlZFt2U2NhbGUuYXhpc107XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgbGVuZ3RoID0gX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHZhbHVlO1xuICAgIGxldCBoZWFkLCBzaXplO1xuICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgfVxuICAgIGlmIChmbG9hdGluZykge1xuICAgICAgdmFsdWUgPSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICBsZW5ndGggPSBjdXN0b20uYmFyRW5kIC0gY3VzdG9tLmJhclN0YXJ0O1xuICAgICAgaWYgKHZhbHVlICE9PSAwICYmIHNpZ24odmFsdWUpICE9PSBzaWduKGN1c3RvbS5iYXJFbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ICs9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICBsZXQgYmFzZSA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0VmFsdWUpO1xuICAgIGlmICh0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgaGVhZCA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0ICsgbGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZCA9IGJhc2U7XG4gICAgfVxuICAgIHNpemUgPSBoZWFkIC0gYmFzZTtcbiAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgYmFzZSAtPSBzaXplIC8gMjtcbiAgICAgIH1cbiAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICB9XG4gICAgaWYgKGJhc2UgPT09IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKGFjdHVhbEJhc2UpKSB7XG4gICAgICBjb25zdCBoYWxmR3JpZCA9IHNpZ24oc2l6ZSkgKiB2U2NhbGUuZ2V0TGluZVdpZHRoRm9yVmFsdWUoYWN0dWFsQmFzZSkgLyAyO1xuICAgICAgYmFzZSArPSBoYWxmR3JpZDtcbiAgICAgIHNpemUgLT0gaGFsZkdyaWQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzaXplLFxuICAgICAgYmFzZSxcbiAgICAgIGhlYWQsXG4gICAgICBjZW50ZXI6IGhlYWQgKyBzaXplIC8gMlxuICAgIH07XG4gIH1cbiAgX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgIGNvbnN0IHNjYWxlID0gcnVsZXIuc2NhbGU7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgY29uc3QgbWF4QmFyVGhpY2tuZXNzID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5tYXhCYXJUaGlja25lc3MsIEluZmluaXR5KTtcbiAgICBsZXQgY2VudGVyLCBzaXplO1xuICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCdcbiAgICAgICAgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudClcbiAgICAgICAgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyAocmFuZ2UuY2h1bmsgKiBzdGFja0luZGV4KSArIChyYW5nZS5jaHVuayAvIDIpO1xuICAgICAgc2l6ZSA9IE1hdGgubWluKG1heEJhclRoaWNrbmVzcywgcmFuZ2UuY2h1bmsgKiByYW5nZS5yYXRpbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBiYXNlOiBjZW50ZXIgLSBzaXplIC8gMixcbiAgICAgIGhlYWQ6IGNlbnRlciArIHNpemUgLyAyLFxuICAgICAgY2VudGVyLFxuICAgICAgc2l6ZVxuICAgIH07XG4gIH1cbiAgZHJhdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICBjb25zdCByZWN0cyA9IG1ldGEuZGF0YTtcbiAgICBjb25zdCBpbGVuID0gcmVjdHMubGVuZ3RoO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaWYgKHRoaXMuZ2V0UGFyc2VkKGkpW3ZTY2FsZS5heGlzXSAhPT0gbnVsbCkge1xuICAgICAgICByZWN0c1tpXS5kcmF3KHRoaXMuX2N0eCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5CYXJDb250cm9sbGVyLmlkID0gJ2Jhcic7XG5CYXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICBkYXRhRWxlbWVudFR5cGU6ICdiYXInLFxuICBjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcbiAgYmFyUGVyY2VudGFnZTogMC45LFxuICBncm91cGVkOiB0cnVlLFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICdiYXNlJywgJ3dpZHRoJywgJ2hlaWdodCddXG4gICAgfVxuICB9XG59O1xuQmFyQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIHNjYWxlczoge1xuICAgIF9pbmRleF86IHtcbiAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICBvZmZzZXQ6IHRydWUsXG4gICAgICBncmlkOiB7XG4gICAgICAgIG9mZnNldDogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgX3ZhbHVlXzoge1xuICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIEJ1YmJsZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cbiAgcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIGxldCBtYXggPSAwO1xuICAgIGZvciAobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgfVxuICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgY29uc3QgeSA9IHlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC55KTtcbiAgICBjb25zdCByID0gcGFyc2VkLl9jdXN0b207XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBtZXRhLmxhYmVsLFxuICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBwYXJzZWQgPSAhcmVzZXQgJiYgdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG4gICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IHJlc2V0ID8gaVNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgwLjUpIDogaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSk7XG4gICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0ID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW3ZBeGlzXSk7XG4gICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCk7XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgfVxuICByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgIHZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlcywgeyRzaGFyZWQ6IGZhbHNlfSk7XG4gICAgfVxuICAgIGNvbnN0IHJhZGl1cyA9IHZhbHVlcy5yYWRpdXM7XG4gICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICB9XG4gICAgdmFsdWVzLnJhZGl1cyArPSB2YWx1ZU9yRGVmYXVsdChwYXJzZWQgJiYgcGFyc2VkLl9jdXN0b20sIHJhZGl1cyk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxufVxuQnViYmxlQ29udHJvbGxlci5pZCA9ICdidWJibGUnO1xuQnViYmxlQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICdib3JkZXJXaWR0aCcsICdyYWRpdXMnXVxuICAgIH1cbiAgfVxufTtcbkJ1YmJsZUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBzY2FsZXM6IHtcbiAgICB4OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH0sXG4gICAgeToge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9XG4gIH0sXG4gIHBsdWdpbnM6IHtcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KSB7XG4gIGxldCByYXRpb1ggPSAxO1xuICBsZXQgcmF0aW9ZID0gMTtcbiAgbGV0IG9mZnNldFggPSAwO1xuICBsZXQgb2Zmc2V0WSA9IDA7XG4gIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IHJvdGF0aW9uO1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2U7XG4gICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgY29uc3Qgc3RhcnRZID0gTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG4gICAgY29uc3QgZW5kWCA9IE1hdGguY29zKGVuZEFuZ2xlKTtcbiAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgIGNvbnN0IGNhbGNNYXggPSAoYW5nbGUsIGEsIGIpID0+IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cnVlKSA/IDEgOiBNYXRoLm1heChhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKSA9PiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgdHJ1ZSkgPyAtMSA6IE1hdGgubWluKGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgIGNvbnN0IG1heFggPSBjYWxjTWF4KDAsIHN0YXJ0WCwgZW5kWCk7XG4gICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICBjb25zdCBtaW5YID0gY2FsY01pbihQSSwgc3RhcnRYLCBlbmRYKTtcbiAgICBjb25zdCBtaW5ZID0gY2FsY01pbihQSSArIEhBTEZfUEksIHN0YXJ0WSwgZW5kWSk7XG4gICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgcmF0aW9ZID0gKG1heFkgLSBtaW5ZKSAvIDI7XG4gICAgb2Zmc2V0WCA9IC0obWF4WCArIG1pblgpIC8gMjtcbiAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICB9XG4gIHJldHVybiB7cmF0aW9YLCByYXRpb1ksIG9mZnNldFgsIG9mZnNldFl9O1xufVxuY2xhc3MgRG91Z2hudXRDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KSB7XG4gICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vZmZzZXRYID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub2Zmc2V0WSA9IHVuZGVmaW5lZDtcbiAgfVxuICBsaW5rU2NhbGVzKCkge31cbiAgcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YXNldCgpLmRhdGE7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZ2V0dGVyID0gKGkpID0+ICtkYXRhW2ldO1xuICAgICAgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICBjb25zdCB7a2V5ID0gJ3ZhbHVlJ30gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBnZXR0ZXIgPSAoaSkgPT4gK3Jlc29sdmVPYmplY3RLZXkoZGF0YVtpXSwga2V5KTtcbiAgICAgIH1cbiAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgZm9yIChpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICAgIG1ldGEuX3BhcnNlZFtpXSA9IGdldHRlcihpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2dldFJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLnJvdGF0aW9uIC0gOTApO1xuICB9XG4gIF9nZXRDaXJjdW1mZXJlbmNlKCkge1xuICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpO1xuICB9XG4gIF9nZXRSb3RhdGlvbkV4dGVudHMoKSB7XG4gICAgbGV0IG1pbiA9IFRBVTtcbiAgICBsZXQgbWF4ID0gLVRBVTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IGNvbnRyb2xsZXIuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb250cm9sbGVyLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcm90YXRpb24pO1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJvdGF0aW9uICsgY2lyY3VtZmVyZW5jZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByb3RhdGlvbjogbWluLFxuICAgICAgY2lyY3VtZmVyZW5jZTogbWF4IC0gbWluLFxuICAgIH07XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3Qge2NoYXJ0QXJlYX0gPSBjaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBhcmNzID0gbWV0YS5kYXRhO1xuICAgIGNvbnN0IHNwYWNpbmcgPSB0aGlzLmdldE1heEJvcmRlcldpZHRoKCkgKyB0aGlzLmdldE1heE9mZnNldChhcmNzKSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heCgoTWF0aC5taW4oY2hhcnRBcmVhLndpZHRoLCBjaGFydEFyZWEuaGVpZ2h0KSAtIHNwYWNpbmcpIC8gMiwgMCk7XG4gICAgY29uc3QgY3V0b3V0ID0gTWF0aC5taW4odG9QZXJjZW50YWdlKHRoaXMub3B0aW9ucy5jdXRvdXQsIG1heFNpemUpLCAxKTtcbiAgICBjb25zdCBjaGFydFdlaWdodCA9IHRoaXMuX2dldFJpbmdXZWlnaHQodGhpcy5pbmRleCk7XG4gICAgY29uc3Qge2NpcmN1bWZlcmVuY2UsIHJvdGF0aW9ufSA9IHRoaXMuX2dldFJvdGF0aW9uRXh0ZW50cygpO1xuICAgIGNvbnN0IHtyYXRpb1gsIHJhdGlvWSwgb2Zmc2V0WCwgb2Zmc2V0WX0gPSBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KTtcbiAgICBjb25zdCBtYXhXaWR0aCA9IChjaGFydEFyZWEud2lkdGggLSBzcGFjaW5nKSAvIHJhdGlvWDtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSAoY2hhcnRBcmVhLmhlaWdodCAtIHNwYWNpbmcpIC8gcmF0aW9ZO1xuICAgIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSB0b0RpbWVuc2lvbih0aGlzLm9wdGlvbnMucmFkaXVzLCBtYXhSYWRpdXMpO1xuICAgIGNvbnN0IGlubmVyUmFkaXVzID0gTWF0aC5tYXgob3V0ZXJSYWRpdXMgKiBjdXRvdXQsIDApO1xuICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIHRoaXMuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtcbiAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYICogb3V0ZXJSYWRpdXM7XG4gICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WSAqIG91dGVyUmFkaXVzO1xuICAgIG1ldGEudG90YWwgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsKCk7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5fZ2V0UmluZ1dlaWdodE9mZnNldCh0aGlzLmluZGV4KTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gTWF0aC5tYXgodGhpcy5vdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIGNoYXJ0V2VpZ2h0LCAwKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICBfY2lyY3VtZmVyZW5jZShpLCByZXNldCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICBpZiAoKHJlc2V0ICYmIG9wdHMuYW5pbWF0aW9uLmFuaW1hdGVSb3RhdGUpIHx8ICF0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpIHx8IG1ldGEuX3BhcnNlZFtpXSA9PT0gbnVsbCB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShtZXRhLl9wYXJzZWRbaV0gKiBjaXJjdW1mZXJlbmNlIC8gVEFVKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICBjb25zdCBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG4gICAgY29uc3QgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuICAgIGNvbnN0IGNlbnRlclkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcbiAgICBjb25zdCBhbmltYXRlU2NhbGUgPSByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLmlubmVyUmFkaXVzO1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMub3V0ZXJSYWRpdXM7XG4gICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpO1xuICAgIGxldCBzdGFydEFuZ2xlID0gdGhpcy5fZ2V0Um90YXRpb24oKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSkge1xuICAgICAgc3RhcnRBbmdsZSArPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICB9XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4OiBjZW50ZXJYICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICB5OiBjZW50ZXJZICsgdGhpcy5vZmZzZXRZLFxuICAgICAgICBzdGFydEFuZ2xlLFxuICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICBpbm5lclJhZGl1c1xuICAgICAgfTtcbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBhcmMuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0QW5nbGUgKz0gY2lyY3VtZmVyZW5jZTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChhcmMsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgfVxuICBjYWxjdWxhdGVUb3RhbCgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBtZXRhRGF0YSA9IG1ldGEuZGF0YTtcbiAgICBsZXQgdG90YWwgPSAwO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBtZXRhRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBtZXRhLl9wYXJzZWRbaV07XG4gICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgIWlzTmFOKHZhbHVlKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpICYmICFtZXRhRGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgICAgdG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cbiAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh2YWx1ZSkge1xuICAgIGNvbnN0IHRvdGFsID0gdGhpcy5fY2FjaGVkTWV0YS50b3RhbDtcbiAgICBpZiAodG90YWwgPiAwICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBUQVUgKiAoTWF0aC5hYnModmFsdWUpIC8gdG90YWwpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0sIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICB2YWx1ZSxcbiAgICB9O1xuICB9XG4gIGdldE1heEJvcmRlcldpZHRoKGFyY3MpIHtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgbGV0IGksIGlsZW4sIG1ldGEsIGNvbnRyb2xsZXIsIG9wdGlvbnM7XG4gICAgaWYgKCFhcmNzKSB7XG4gICAgICBmb3IgKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgaWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgYXJjcyA9IG1ldGEuZGF0YTtcbiAgICAgICAgICBjb250cm9sbGVyID0gbWV0YS5jb250cm9sbGVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghYXJjcykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgb3B0aW9ucyA9IGNvbnRyb2xsZXIucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgIGlmIChvcHRpb25zLmJvcmRlckFsaWduICE9PSAnaW5uZXInKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwLCBvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGggfHwgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgZ2V0TWF4T2Zmc2V0KGFyY3MpIHtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLm9mZnNldCB8fCAwLCBvcHRpb25zLmhvdmVyT2Zmc2V0IHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIF9nZXRSaW5nV2VpZ2h0T2Zmc2V0KGRhdGFzZXRJbmRleCkge1xuICAgIGxldCByaW5nV2VpZ2h0T2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFzZXRJbmRleDsgKytpKSB7XG4gICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgIHJpbmdXZWlnaHRPZmZzZXQgKz0gdGhpcy5fZ2V0UmluZ1dlaWdodChpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJpbmdXZWlnaHRPZmZzZXQ7XG4gIH1cbiAgX2dldFJpbmdXZWlnaHQoZGF0YXNldEluZGV4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHZhbHVlT3JEZWZhdWx0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLndlaWdodCwgMSksIDApO1xuICB9XG4gIF9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHx8IDE7XG4gIH1cbn1cbkRvdWdobnV0Q29udHJvbGxlci5pZCA9ICdkb3VnaG51dCc7XG5Eb3VnaG51dENvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gIGFuaW1hdGlvbjoge1xuICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgYW5pbWF0ZVNjYWxlOiBmYWxzZVxuICB9LFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ2NpcmN1bWZlcmVuY2UnLCAnZW5kQW5nbGUnLCAnaW5uZXJSYWRpdXMnLCAnb3V0ZXJSYWRpdXMnLCAnc3RhcnRBbmdsZScsICd4JywgJ3knLCAnb2Zmc2V0JywgJ2JvcmRlcldpZHRoJywgJ3NwYWNpbmcnXVxuICAgIH0sXG4gIH0sXG4gIGN1dG91dDogJzUwJScsXG4gIHJvdGF0aW9uOiAwLFxuICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gIHJhZGl1czogJzEwMCUnLFxuICBzcGFjaW5nOiAwLFxuICBpbmRleEF4aXM6ICdyJyxcbn07XG5Eb3VnaG51dENvbnRyb2xsZXIuZGVzY3JpcHRvcnMgPSB7XG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ3NwYWNpbmcnLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ3NwYWNpbmcnLFxufTtcbkRvdWdobnV0Q29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGFzcGVjdFJhdGlvOiAxLFxuICBwbHVnaW5zOiB7XG4gICAgbGVnZW5kOiB7XG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgZ2VuZXJhdGVMYWJlbHMoY2hhcnQpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB7bGFiZWxzOiB7cG9pbnRTdHlsZX19ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkNsaWNrKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgICAgbGV0IGRhdGFMYWJlbCA9IHRvb2x0aXBJdGVtLmxhYmVsO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgIGlmIChpc0FycmF5KGRhdGFMYWJlbCkpIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbCA9IGRhdGFMYWJlbC5zbGljZSgpO1xuICAgICAgICAgICAgZGF0YUxhYmVsWzBdICs9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhTGFiZWwgKz0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkYXRhTGFiZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIExpbmVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge2RhdGFzZXQ6IGxpbmUsIGRhdGE6IHBvaW50cyA9IFtdLCBfZGF0YXNldH0gPSBtZXRhO1xuICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICBsZXQge3N0YXJ0LCBjb3VudH0gPSBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLl9kcmF3Q291bnQgPSBjb3VudDtcbiAgICBpZiAoc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgfVxuICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBsaW5lLl9kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgIGxpbmUuX2RlY2ltYXRlZCA9ICEhX2RhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMDtcbiAgICB9XG4gICAgb3B0aW9ucy5zZWdtZW50ID0gdGhpcy5vcHRpb25zLnNlZ21lbnQ7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwge1xuICAgICAgYW5pbWF0ZWQ6ICFhbmltYXRpb25zRGlzYWJsZWQsXG4gICAgICBvcHRpb25zXG4gICAgfSwgbW9kZSk7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlLCBfc3RhY2tlZCwgX2RhdGFzZXR9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGNvbnN0IHtzcGFuR2Fwcywgc2VnbWVudH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWF4R2FwTGVuZ3RoID0gaXNOdW1iZXIoc3BhbkdhcHMpID8gc3BhbkdhcHMgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiAocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSA+IG1heEdhcExlbmd0aDtcbiAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIHByb3BlcnRpZXMucGFyc2VkID0gcGFyc2VkO1xuICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICB9XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICB9XG4gICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgIGNvbnN0IGJvcmRlciA9IGRhdGFzZXQub3B0aW9ucyAmJiBkYXRhc2V0Lm9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBib3JkZXI7XG4gICAgfVxuICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgcmV0dXJuIE1hdGgubWF4KGJvcmRlciwgZmlyc3RQb2ludCwgbGFzdFBvaW50KSAvIDI7XG4gIH1cbiAgZHJhdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBtZXRhLmRhdGFzZXQudXBkYXRlQ29udHJvbFBvaW50cyh0aGlzLmNoYXJ0LmNoYXJ0QXJlYSwgbWV0YS5pU2NhbGUuYXhpcyk7XG4gICAgc3VwZXIuZHJhdygpO1xuICB9XG59XG5MaW5lQ29udHJvbGxlci5pZCA9ICdsaW5lJztcbkxpbmVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBzaG93TGluZTogdHJ1ZSxcbiAgc3BhbkdhcHM6IGZhbHNlLFxufTtcbkxpbmVDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgc2NhbGVzOiB7XG4gICAgX2luZGV4Xzoge1xuICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICB9LFxuICAgIF92YWx1ZV86IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIH0sXG4gIH1cbn07XG5mdW5jdGlvbiBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKSB7XG4gIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgY291bnQgPSBwb2ludENvdW50O1xuICBpZiAobWV0YS5fc29ydGVkKSB7XG4gICAgY29uc3Qge2lTY2FsZSwgX3BhcnNlZH0gPSBtZXRhO1xuICAgIGNvbnN0IGF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgc3RhcnQgPSBfbGltaXRWYWx1ZShNYXRoLm1pbihcbiAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtaW4pLmxvLFxuICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyBwb2ludENvdW50IDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWluKSkubG8pLFxuICAgICAgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShNYXRoLm1heChcbiAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtYXgpLmhpICsgMSxcbiAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gMCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1heCkpLmhpICsgMSksXG4gICAgICBzdGFydCwgcG9pbnRDb3VudCkgLSBzdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB7c3RhcnQsIGNvdW50fTtcbn1cbmZ1bmN0aW9uIHNjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSB7XG4gIGNvbnN0IHt4U2NhbGUsIHlTY2FsZSwgX3NjYWxlUmFuZ2VzfSA9IG1ldGE7XG4gIGNvbnN0IG5ld1JhbmdlcyA9IHtcbiAgICB4bWluOiB4U2NhbGUubWluLFxuICAgIHhtYXg6IHhTY2FsZS5tYXgsXG4gICAgeW1pbjogeVNjYWxlLm1pbixcbiAgICB5bWF4OiB5U2NhbGUubWF4XG4gIH07XG4gIGlmICghX3NjYWxlUmFuZ2VzKSB7XG4gICAgbWV0YS5fc2NhbGVSYW5nZXMgPSBuZXdSYW5nZXM7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgY2hhbmdlZCA9IF9zY2FsZVJhbmdlcy54bWluICE9PSB4U2NhbGUubWluXG5cdFx0fHwgX3NjYWxlUmFuZ2VzLnhtYXggIT09IHhTY2FsZS5tYXhcblx0XHR8fCBfc2NhbGVSYW5nZXMueW1pbiAhPT0geVNjYWxlLm1pblxuXHRcdHx8IF9zY2FsZVJhbmdlcy55bWF4ICE9PSB5U2NhbGUubWF4O1xuICBPYmplY3QuYXNzaWduKF9zY2FsZVJhbmdlcywgbmV3UmFuZ2VzKTtcbiAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmNsYXNzIFBvbGFyQXJlYUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcbiAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdE51bWJlcihtZXRhLl9wYXJzZWRbaW5kZXhdLnIsIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICB2YWx1ZSxcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgYXJjcyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICB0aGlzLl91cGRhdGVSYWRpdXMoKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICBfdXBkYXRlUmFkaXVzKCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChtaW5TaXplIC8gMiwgMCk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvcHRzLmN1dG91dFBlcmNlbnRhZ2UgPyAob3V0ZXJSYWRpdXMgLyAxMDApICogKG9wdHMuY3V0b3V0UGVyY2VudGFnZSkgOiAxLCAwKTtcbiAgICBjb25zdCByYWRpdXNMZW5ndGggPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyBjaGFydC5nZXRWaXNpYmxlRGF0YXNldENvdW50KCk7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gKHJhZGl1c0xlbmd0aCAqIHRoaXMuaW5kZXgpO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgIGNvbnN0IGNlbnRlclggPSBzY2FsZS54Q2VudGVyO1xuICAgIGNvbnN0IGNlbnRlclkgPSBzY2FsZS55Q2VudGVyO1xuICAgIGNvbnN0IGRhdGFzZXRTdGFydEFuZ2xlID0gc2NhbGUuZ2V0SW5kZXhBbmdsZSgwKSAtIDAuNSAqIFBJO1xuICAgIGxldCBhbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgIGxldCBpO1xuICAgIGNvbnN0IGRlZmF1bHRBbmdsZSA9IDM2MCAvIHRoaXMuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSkge1xuICAgICAgYW5nbGUgKz0gdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgfVxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgbGV0IHN0YXJ0QW5nbGUgPSBhbmdsZTtcbiAgICAgIGxldCBlbmRBbmdsZSA9IGFuZ2xlICsgdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICBsZXQgb3V0ZXJSYWRpdXMgPSBjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSA/IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKGRhdGFzZXQuZGF0YVtpXSkgOiAwO1xuICAgICAgYW5nbGUgPSBlbmRBbmdsZTtcbiAgICAgIGlmIChyZXNldCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUpIHtcbiAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSkge1xuICAgICAgICAgIHN0YXJ0QW5nbGUgPSBlbmRBbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4OiBjZW50ZXJYLFxuICAgICAgICB5OiBjZW50ZXJZLFxuICAgICAgICBpbm5lclJhZGl1czogMCxcbiAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlLFxuICAgICAgICBvcHRpb25zOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSlcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgY291bnRWaXNpYmxlRWxlbWVudHMoKSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbWV0YS5kYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoIWlzTmFOKGRhdGFzZXQuZGF0YVtpbmRleF0pICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG4gIF9jb21wdXRlQW5nbGUoaW5kZXgsIG1vZGUsIGRlZmF1bHRBbmdsZSkge1xuICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KVxuICAgICAgPyB0b1JhZGlhbnModGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKS5hbmdsZSB8fCBkZWZhdWx0QW5nbGUpXG4gICAgICA6IDA7XG4gIH1cbn1cblBvbGFyQXJlYUNvbnRyb2xsZXIuaWQgPSAncG9sYXJBcmVhJztcblBvbGFyQXJlYUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gIGFuaW1hdGlvbjoge1xuICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgYW5pbWF0ZVNjYWxlOiB0cnVlXG4gIH0sXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ3N0YXJ0QW5nbGUnLCAnZW5kQW5nbGUnLCAnaW5uZXJSYWRpdXMnLCAnb3V0ZXJSYWRpdXMnXVxuICAgIH0sXG4gIH0sXG4gIGluZGV4QXhpczogJ3InLFxuICBzdGFydEFuZ2xlOiAwLFxufTtcblBvbGFyQXJlYUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBhc3BlY3RSYXRpbzogMSxcbiAgcGx1Z2luczoge1xuICAgIGxlZ2VuZDoge1xuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIGdlbmVyYXRlTGFiZWxzKGNoYXJ0KSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qge2xhYmVsczoge3BvaW50U3R5bGV9fSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogIWNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25DbGljayhlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9LFxuICAgICAgICBsYWJlbChjb250ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuY2hhcnQuZGF0YS5sYWJlbHNbY29udGV4dC5kYXRhSW5kZXhdICsgJzogJyArIGNvbnRleHQuZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNjYWxlczoge1xuICAgIHI6IHtcbiAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgICAgYW5nbGVMaW5lczoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuICAgICAgZ3JpZDoge1xuICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBvaW50TGFiZWxzOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc3RhcnRBbmdsZTogMFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgUGllQ29udHJvbGxlciBleHRlbmRzIERvdWdobnV0Q29udHJvbGxlciB7XG59XG5QaWVDb250cm9sbGVyLmlkID0gJ3BpZSc7XG5QaWVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBjdXRvdXQ6IDAsXG4gIHJvdGF0aW9uOiAwLFxuICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gIHJhZGl1czogJzEwMCUnXG59O1xuXG5jbGFzcyBSYWRhckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCB2U2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiB2U2NhbGUuZ2V0TGFiZWxzKClbaW5kZXhdLFxuICAgICAgdmFsdWU6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSlcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICBjb25zdCBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgY29uc3QgbGFiZWxzID0gbWV0YS5pU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgaWYgKG1vZGUgIT09ICdyZXNpemUnKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBfbG9vcDogdHJ1ZSxcbiAgICAgICAgX2Z1bGxMb29wOiBsYWJlbHMubGVuZ3RoID09PSBwb2ludHMubGVuZ3RoLFxuICAgICAgICBvcHRpb25zXG4gICAgICB9O1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCBkYXRhc2V0LmRhdGFbaV0pO1xuICAgICAgY29uc3QgeCA9IHJlc2V0ID8gc2NhbGUueENlbnRlciA6IHBvaW50UG9zaXRpb24ueDtcbiAgICAgIGNvbnN0IHkgPSByZXNldCA/IHNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBhbmdsZTogcG9pbnRQb3NpdGlvbi5hbmdsZSxcbiAgICAgICAgc2tpcDogaXNOYU4oeCkgfHwgaXNOYU4oeSksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxufVxuUmFkYXJDb250cm9sbGVyLmlkID0gJ3JhZGFyJztcblJhZGFyQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgaW5kZXhBeGlzOiAncicsXG4gIHNob3dMaW5lOiB0cnVlLFxuICBlbGVtZW50czoge1xuICAgIGxpbmU6IHtcbiAgICAgIGZpbGw6ICdzdGFydCdcbiAgICB9XG4gIH0sXG59O1xuUmFkYXJDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgYXNwZWN0UmF0aW86IDEsXG4gIHNjYWxlczoge1xuICAgIHI6IHtcbiAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgU2NhdHRlckNvbnRyb2xsZXIgZXh0ZW5kcyBMaW5lQ29udHJvbGxlciB7XG59XG5TY2F0dGVyQ29udHJvbGxlci5pZCA9ICdzY2F0dGVyJztcblNjYXR0ZXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBzaG93TGluZTogZmFsc2UsXG4gIGZpbGw6IGZhbHNlXG59O1xuU2NhdHRlckNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBpbnRlcmFjdGlvbjoge1xuICAgIG1vZGU6ICdwb2ludCdcbiAgfSxcbiAgcGx1Z2luczoge1xuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gJygnICsgaXRlbS5sYWJlbCArICcsICcgKyBpdGVtLmZvcm1hdHRlZFZhbHVlICsgJyknO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzY2FsZXM6IHtcbiAgICB4OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH0sXG4gICAgeToge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9XG4gIH1cbn07XG5cbnZhciBjb250cm9sbGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkJhckNvbnRyb2xsZXI6IEJhckNvbnRyb2xsZXIsXG5CdWJibGVDb250cm9sbGVyOiBCdWJibGVDb250cm9sbGVyLFxuRG91Z2hudXRDb250cm9sbGVyOiBEb3VnaG51dENvbnRyb2xsZXIsXG5MaW5lQ29udHJvbGxlcjogTGluZUNvbnRyb2xsZXIsXG5Qb2xhckFyZWFDb250cm9sbGVyOiBQb2xhckFyZWFDb250cm9sbGVyLFxuUGllQ29udHJvbGxlcjogUGllQ29udHJvbGxlcixcblJhZGFyQ29udHJvbGxlcjogUmFkYXJDb250cm9sbGVyLFxuU2NhdHRlckNvbnRyb2xsZXI6IFNjYXR0ZXJDb250cm9sbGVyXG59KTtcblxuZnVuY3Rpb24gYWJzdHJhY3QoKSB7XG4gIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBDaGVjayB0aGF0IGEgY29tcGxldGUgZGF0ZSBhZGFwdGVyIGlzIHByb3ZpZGVkLicpO1xufVxuY2xhc3MgRGF0ZUFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgfVxuICBmb3JtYXRzKCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIHBhcnNlKHZhbHVlLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBmb3JtYXQodGltZXN0YW1wLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBhZGQodGltZXN0YW1wLCBhbW91bnQsIHVuaXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBkaWZmKGEsIGIsIHVuaXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBzdGFydE9mKHRpbWVzdGFtcCwgdW5pdCwgd2Vla2RheSkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGVuZE9mKHRpbWVzdGFtcCwgdW5pdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG59XG5EYXRlQWRhcHRlci5vdmVycmlkZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcbiAgT2JqZWN0LmFzc2lnbihEYXRlQWRhcHRlci5wcm90b3R5cGUsIG1lbWJlcnMpO1xufTtcbnZhciBhZGFwdGVycyA9IHtcbiAgX2RhdGU6IERhdGVBZGFwdGVyXG59O1xuXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KSB7XG4gIGlmICgnbmF0aXZlJyBpbiBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGUueCxcbiAgICAgIHk6IGUueVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGdldFJlbGF0aXZlUG9zaXRpb24kMShlLCBjaGFydCk7XG59XG5mdW5jdGlvbiBldmFsdWF0ZUFsbFZpc2libGVJdGVtcyhjaGFydCwgaGFuZGxlcikge1xuICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgbGV0IGluZGV4LCBkYXRhLCBlbGVtZW50O1xuICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICh7aW5kZXgsIGRhdGF9ID0gbWV0YXNldHNbaV0pO1xuICAgIGZvciAobGV0IGogPSAwLCBqbGVuID0gZGF0YS5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcbiAgICAgIGVsZW1lbnQgPSBkYXRhW2pdO1xuICAgICAgaWYgKCFlbGVtZW50LnNraXApIHtcbiAgICAgICAgaGFuZGxlcihlbGVtZW50LCBpbmRleCwgaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBiaW5hcnlTZWFyY2gobWV0YXNldCwgYXhpcywgdmFsdWUsIGludGVyc2VjdCkge1xuICBjb25zdCB7Y29udHJvbGxlciwgZGF0YSwgX3NvcnRlZH0gPSBtZXRhc2V0O1xuICBjb25zdCBpU2NhbGUgPSBjb250cm9sbGVyLl9jYWNoZWRNZXRhLmlTY2FsZTtcbiAgaWYgKGlTY2FsZSAmJiBheGlzID09PSBpU2NhbGUuYXhpcyAmJiBheGlzICE9PSAncicgJiYgX3NvcnRlZCAmJiBkYXRhLmxlbmd0aCkge1xuICAgIGNvbnN0IGxvb2t1cE1ldGhvZCA9IGlTY2FsZS5fcmV2ZXJzZVBpeGVscyA/IF9ybG9va3VwQnlLZXkgOiBfbG9va3VwQnlLZXk7XG4gICAgaWYgKCFpbnRlcnNlY3QpIHtcbiAgICAgIHJldHVybiBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlci5fc2hhcmVkT3B0aW9ucykge1xuICAgICAgY29uc3QgZWwgPSBkYXRhWzBdO1xuICAgICAgY29uc3QgcmFuZ2UgPSB0eXBlb2YgZWwuZ2V0UmFuZ2UgPT09ICdmdW5jdGlvbicgJiYgZWwuZ2V0UmFuZ2UoYXhpcyk7XG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgLSByYW5nZSk7XG4gICAgICAgIGNvbnN0IGVuZCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSArIHJhbmdlKTtcbiAgICAgICAgcmV0dXJuIHtsbzogc3RhcnQubG8sIGhpOiBlbmQuaGl9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge2xvOiAwLCBoaTogZGF0YS5sZW5ndGggLSAxfTtcbn1cbmZ1bmN0aW9uIG9wdGltaXplZEV2YWx1YXRlSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBoYW5kbGVyLCBpbnRlcnNlY3QpIHtcbiAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bYXhpc107XG4gIGZvciAobGV0IGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY29uc3Qge2luZGV4LCBkYXRhfSA9IG1ldGFzZXRzW2ldO1xuICAgIGNvbnN0IHtsbywgaGl9ID0gYmluYXJ5U2VhcmNoKG1ldGFzZXRzW2ldLCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KTtcbiAgICBmb3IgKGxldCBqID0gbG87IGogPD0gaGk7ICsraikge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGRhdGFbal07XG4gICAgICBpZiAoIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICBoYW5kbGVyKGVsZW1lbnQsIGluZGV4LCBqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKSB7XG4gIGNvbnN0IHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG4gIGNvbnN0IHVzZVkgPSBheGlzLmluZGV4T2YoJ3knKSAhPT0gLTE7XG4gIHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuICAgIGNvbnN0IGRlbHRhWCA9IHVzZVggPyBNYXRoLmFicyhwdDEueCAtIHB0Mi54KSA6IDA7XG4gICAgY29uc3QgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBpZiAoIV9pc1BvaW50SW5BcmVhKHBvc2l0aW9uLCBjaGFydC5jaGFydEFyZWEsIGNoYXJ0Ll9taW5QYWRkaW5nKSkge1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBjb25zdCBldmFsdWF0aW9uRnVuYyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICBpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICBpdGVtcy5wdXNoKHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSk7XG4gICAgfVxuICB9O1xuICBvcHRpbWl6ZWRFdmFsdWF0ZUl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMsIHRydWUpO1xuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGxldCBpdGVtcyA9IFtdO1xuICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgY29uc3Qge3N0YXJ0QW5nbGUsIGVuZEFuZ2xlfSA9IGVsZW1lbnQuZ2V0UHJvcHMoWydzdGFydEFuZ2xlJywgJ2VuZEFuZ2xlJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHthbmdsZX0gPSBnZXRBbmdsZUZyb21Qb2ludChlbGVtZW50LCB7eDogcG9zaXRpb24ueCwgeTogcG9zaXRpb24ueX0pO1xuICAgIGlmIChfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH1cbiAgb3B0aW1pemVkRXZhbHVhdGVJdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGxldCBpdGVtcyA9IFtdO1xuICBjb25zdCBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKTtcbiAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgY29uc3QgaW5SYW5nZSA9IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBpZiAoaW50ZXJzZWN0ICYmICFpblJhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgcG9pbnRJbkFyZWEgPSBfaXNQb2ludEluQXJlYShjZW50ZXIsIGNoYXJ0LmNoYXJ0QXJlYSwgY2hhcnQuX21pblBhZGRpbmcpO1xuICAgIGlmICghcG9pbnRJbkFyZWEgJiYgIWluUmFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcbiAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgaXRlbXMgPSBbe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9XTtcbiAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgfSBlbHNlIGlmIChkaXN0YW5jZSA9PT0gbWluRGlzdGFuY2UpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH1cbiAgb3B0aW1pemVkRXZhbHVhdGVJdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGlmICghX2lzUG9pbnRJbkFyZWEocG9zaXRpb24sIGNoYXJ0LmNoYXJ0QXJlYSwgY2hhcnQuX21pblBhZGRpbmcpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBheGlzID09PSAncicgJiYgIWludGVyc2VjdFxuICAgID8gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbilcbiAgICA6IGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG59XG5mdW5jdGlvbiBnZXRBeGlzSXRlbXMoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcztcbiAgY29uc3QgcmFuZ2VNZXRob2QgPSBheGlzID09PSAneCcgPyAnaW5YUmFuZ2UnIDogJ2luWVJhbmdlJztcbiAgbGV0IGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG4gIGV2YWx1YXRlQWxsVmlzaWJsZUl0ZW1zKGNoYXJ0LCAoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkgPT4ge1xuICAgIGlmIChlbGVtZW50W3JhbmdlTWV0aG9kXShwb3NpdGlvbltheGlzXSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgaW50ZXJzZWN0c0l0ZW0gPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIGlmIChvcHRpb25zLmludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxudmFyIEludGVyYWN0aW9uID0ge1xuICBtb2Rlczoge1xuICAgIGluZGV4KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneCc7XG4gICAgICBjb25zdCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0XG4gICAgICAgID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKVxuICAgICAgICA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkuZm9yRWFjaCgobWV0YSkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1zWzBdLmluZGV4O1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gbWV0YS5kYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleCwgaW5kZXh9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfSxcbiAgICBkYXRhc2V0KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgbGV0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3RcbiAgICAgICAgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIDpcbiAgICAgICAgZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZGF0YXNldEluZGV4ID0gaXRlbXNbMF0uZGF0YXNldEluZGV4O1xuICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5kYXRhO1xuICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpdGVtcy5wdXNoKHtlbGVtZW50OiBkYXRhW2ldLCBkYXRhc2V0SW5kZXgsIGluZGV4OiBpfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtcztcbiAgICB9LFxuICAgIHBvaW50KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgcmV0dXJuIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfSxcbiAgICBuZWFyZXN0KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgcmV0dXJuIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9LFxuICAgIHgoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIGUsIHtheGlzOiAneCcsIGludGVyc2VjdDogb3B0aW9ucy5pbnRlcnNlY3R9LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9LFxuICAgIHkoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIGUsIHtheGlzOiAneScsIGludGVyc2VjdDogb3B0aW9ucy5pbnRlcnNlY3R9LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IFNUQVRJQ19QT1NJVElPTlMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddO1xuZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihhcnJheSwgcG9zaXRpb24pIHtcbiAgcmV0dXJuIGFycmF5LmZpbHRlcih2ID0+IHYucG9zID09PSBwb3NpdGlvbik7XG59XG5mdW5jdGlvbiBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMoYXJyYXksIGF4aXMpIHtcbiAgcmV0dXJuIGFycmF5LmZpbHRlcih2ID0+IFNUQVRJQ19QT1NJVElPTlMuaW5kZXhPZih2LnBvcykgPT09IC0xICYmIHYuYm94LmF4aXMgPT09IGF4aXMpO1xufVxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG4gIHJldHVybiBhcnJheS5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgdjAgPSByZXZlcnNlID8gYiA6IGE7XG4gICAgY29uc3QgdjEgPSByZXZlcnNlID8gYSA6IGI7XG4gICAgcmV0dXJuIHYwLndlaWdodCA9PT0gdjEud2VpZ2h0ID9cbiAgICAgIHYwLmluZGV4IC0gdjEuaW5kZXggOlxuICAgICAgdjAud2VpZ2h0IC0gdjEud2VpZ2h0O1xuICB9KTtcbn1cbmZ1bmN0aW9uIHdyYXBCb3hlcyhib3hlcykge1xuICBjb25zdCBsYXlvdXRCb3hlcyA9IFtdO1xuICBsZXQgaSwgaWxlbiwgYm94LCBwb3MsIHN0YWNrLCBzdGFja1dlaWdodDtcbiAgZm9yIChpID0gMCwgaWxlbiA9IChib3hlcyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgYm94ID0gYm94ZXNbaV07XG4gICAgKHtwb3NpdGlvbjogcG9zLCBvcHRpb25zOiB7c3RhY2ssIHN0YWNrV2VpZ2h0ID0gMX19ID0gYm94KTtcbiAgICBsYXlvdXRCb3hlcy5wdXNoKHtcbiAgICAgIGluZGV4OiBpLFxuICAgICAgYm94LFxuICAgICAgcG9zLFxuICAgICAgaG9yaXpvbnRhbDogYm94LmlzSG9yaXpvbnRhbCgpLFxuICAgICAgd2VpZ2h0OiBib3gud2VpZ2h0LFxuICAgICAgc3RhY2s6IHN0YWNrICYmIChwb3MgKyBzdGFjayksXG4gICAgICBzdGFja1dlaWdodFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBsYXlvdXRCb3hlcztcbn1cbmZ1bmN0aW9uIGJ1aWxkU3RhY2tzKGxheW91dHMpIHtcbiAgY29uc3Qgc3RhY2tzID0ge307XG4gIGZvciAoY29uc3Qgd3JhcCBvZiBsYXlvdXRzKSB7XG4gICAgY29uc3Qge3N0YWNrLCBwb3MsIHN0YWNrV2VpZ2h0fSA9IHdyYXA7XG4gICAgaWYgKCFzdGFjayB8fCAhU1RBVElDX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3MpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgX3N0YWNrID0gc3RhY2tzW3N0YWNrXSB8fCAoc3RhY2tzW3N0YWNrXSA9IHtjb3VudDogMCwgcGxhY2VkOiAwLCB3ZWlnaHQ6IDAsIHNpemU6IDB9KTtcbiAgICBfc3RhY2suY291bnQrKztcbiAgICBfc3RhY2sud2VpZ2h0ICs9IHN0YWNrV2VpZ2h0O1xuICB9XG4gIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBzZXRMYXlvdXREaW1zKGxheW91dHMsIHBhcmFtcykge1xuICBjb25zdCBzdGFja3MgPSBidWlsZFN0YWNrcyhsYXlvdXRzKTtcbiAgY29uc3Qge3ZCb3hNYXhXaWR0aCwgaEJveE1heEhlaWdodH0gPSBwYXJhbXM7XG4gIGxldCBpLCBpbGVuLCBsYXlvdXQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBsYXlvdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGxheW91dCA9IGxheW91dHNbaV07XG4gICAgY29uc3Qge2Z1bGxTaXplfSA9IGxheW91dC5ib3g7XG4gICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXTtcbiAgICBjb25zdCBmYWN0b3IgPSBzdGFjayAmJiBsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQ7XG4gICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICBsYXlvdXQud2lkdGggPSBmYWN0b3IgPyBmYWN0b3IgKiB2Qm94TWF4V2lkdGggOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlV2lkdGg7XG4gICAgICBsYXlvdXQuaGVpZ2h0ID0gaEJveE1heEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGF5b3V0LndpZHRoID0gdkJveE1heFdpZHRoO1xuICAgICAgbGF5b3V0LmhlaWdodCA9IGZhY3RvciA/IGZhY3RvciAqIGhCb3hNYXhIZWlnaHQgOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlSGVpZ2h0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhY2tzO1xufVxuZnVuY3Rpb24gYnVpbGRMYXlvdXRCb3hlcyhib3hlcykge1xuICBjb25zdCBsYXlvdXRCb3hlcyA9IHdyYXBCb3hlcyhib3hlcyk7XG4gIGNvbnN0IGZ1bGxTaXplID0gc29ydEJ5V2VpZ2h0KGxheW91dEJveGVzLmZpbHRlcih3cmFwID0+IHdyYXAuYm94LmZ1bGxTaXplKSwgdHJ1ZSk7XG4gIGNvbnN0IGxlZnQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2xlZnQnKSwgdHJ1ZSk7XG4gIGNvbnN0IHJpZ2h0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdyaWdodCcpKTtcbiAgY29uc3QgdG9wID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICd0b3AnKSwgdHJ1ZSk7XG4gIGNvbnN0IGJvdHRvbSA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnYm90dG9tJykpO1xuICBjb25zdCBjZW50ZXJIb3Jpem9udGFsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneCcpO1xuICBjb25zdCBjZW50ZXJWZXJ0aWNhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3knKTtcbiAgcmV0dXJuIHtcbiAgICBmdWxsU2l6ZSxcbiAgICBsZWZ0QW5kVG9wOiBsZWZ0LmNvbmNhdCh0b3ApLFxuICAgIHJpZ2h0QW5kQm90dG9tOiByaWdodC5jb25jYXQoY2VudGVyVmVydGljYWwpLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKSxcbiAgICBjaGFydEFyZWE6IGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdjaGFydEFyZWEnKSxcbiAgICB2ZXJ0aWNhbDogbGVmdC5jb25jYXQocmlnaHQpLmNvbmNhdChjZW50ZXJWZXJ0aWNhbCksXG4gICAgaG9yaXpvbnRhbDogdG9wLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCBhLCBiKSB7XG4gIHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94UGFkZGluZykge1xuICBtYXhQYWRkaW5nLnRvcCA9IE1hdGgubWF4KG1heFBhZGRpbmcudG9wLCBib3hQYWRkaW5nLnRvcCk7XG4gIG1heFBhZGRpbmcubGVmdCA9IE1hdGgubWF4KG1heFBhZGRpbmcubGVmdCwgYm94UGFkZGluZy5sZWZ0KTtcbiAgbWF4UGFkZGluZy5ib3R0b20gPSBNYXRoLm1heChtYXhQYWRkaW5nLmJvdHRvbSwgYm94UGFkZGluZy5ib3R0b20pO1xuICBtYXhQYWRkaW5nLnJpZ2h0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5yaWdodCwgYm94UGFkZGluZy5yaWdodCk7XG59XG5mdW5jdGlvbiB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcykge1xuICBjb25zdCB7cG9zLCBib3h9ID0gbGF5b3V0O1xuICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gIGlmICghaXNPYmplY3QocG9zKSkge1xuICAgIGlmIChsYXlvdXQuc2l6ZSkge1xuICAgICAgY2hhcnRBcmVhW3Bvc10gLT0gbGF5b3V0LnNpemU7XG4gICAgfVxuICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge3NpemU6IDAsIGNvdW50OiAxfTtcbiAgICBzdGFjay5zaXplID0gTWF0aC5tYXgoc3RhY2suc2l6ZSwgbGF5b3V0Lmhvcml6b250YWwgPyBib3guaGVpZ2h0IDogYm94LndpZHRoKTtcbiAgICBsYXlvdXQuc2l6ZSA9IHN0YWNrLnNpemUgLyBzdGFjay5jb3VudDtcbiAgICBjaGFydEFyZWFbcG9zXSArPSBsYXlvdXQuc2l6ZTtcbiAgfVxuICBpZiAoYm94LmdldFBhZGRpbmcpIHtcbiAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveC5nZXRQYWRkaW5nKCkpO1xuICB9XG4gIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVyV2lkdGggLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICdsZWZ0JywgJ3JpZ2h0JykpO1xuICBjb25zdCBuZXdIZWlnaHQgPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICd0b3AnLCAnYm90dG9tJykpO1xuICBjb25zdCB3aWR0aENoYW5nZWQgPSBuZXdXaWR0aCAhPT0gY2hhcnRBcmVhLnc7XG4gIGNvbnN0IGhlaWdodENoYW5nZWQgPSBuZXdIZWlnaHQgIT09IGNoYXJ0QXJlYS5oO1xuICBjaGFydEFyZWEudyA9IG5ld1dpZHRoO1xuICBjaGFydEFyZWEuaCA9IG5ld0hlaWdodDtcbiAgcmV0dXJuIGxheW91dC5ob3Jpem9udGFsXG4gICAgPyB7c2FtZTogd2lkdGhDaGFuZ2VkLCBvdGhlcjogaGVpZ2h0Q2hhbmdlZH1cbiAgICA6IHtzYW1lOiBoZWlnaHRDaGFuZ2VkLCBvdGhlcjogd2lkdGhDaGFuZ2VkfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKSB7XG4gIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgZnVuY3Rpb24gdXBkYXRlUG9zKHBvcykge1xuICAgIGNvbnN0IGNoYW5nZSA9IE1hdGgubWF4KG1heFBhZGRpbmdbcG9zXSAtIGNoYXJ0QXJlYVtwb3NdLCAwKTtcbiAgICBjaGFydEFyZWFbcG9zXSArPSBjaGFuZ2U7XG4gICAgcmV0dXJuIGNoYW5nZTtcbiAgfVxuICBjaGFydEFyZWEueSArPSB1cGRhdGVQb3MoJ3RvcCcpO1xuICBjaGFydEFyZWEueCArPSB1cGRhdGVQb3MoJ2xlZnQnKTtcbiAgdXBkYXRlUG9zKCdyaWdodCcpO1xuICB1cGRhdGVQb3MoJ2JvdHRvbScpO1xufVxuZnVuY3Rpb24gZ2V0TWFyZ2lucyhob3Jpem9udGFsLCBjaGFydEFyZWEpIHtcbiAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICBmdW5jdGlvbiBtYXJnaW5Gb3JQb3NpdGlvbnMocG9zaXRpb25zKSB7XG4gICAgY29uc3QgbWFyZ2luID0ge2xlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMH07XG4gICAgcG9zaXRpb25zLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgbWFyZ2luW3Bvc10gPSBNYXRoLm1heChjaGFydEFyZWFbcG9zXSwgbWF4UGFkZGluZ1twb3NdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFyZ2luO1xuICB9XG4gIHJldHVybiBob3Jpem9udGFsXG4gICAgPyBtYXJnaW5Gb3JQb3NpdGlvbnMoWydsZWZ0JywgJ3JpZ2h0J10pXG4gICAgOiBtYXJnaW5Gb3JQb3NpdGlvbnMoWyd0b3AnLCAnYm90dG9tJ10pO1xufVxuZnVuY3Rpb24gZml0Qm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgY29uc3QgcmVmaXRCb3hlcyA9IFtdO1xuICBsZXQgaSwgaWxlbiwgbGF5b3V0LCBib3gsIHJlZml0LCBjaGFuZ2VkO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoLCByZWZpdCA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBsYXlvdXQgPSBib3hlc1tpXTtcbiAgICBib3ggPSBsYXlvdXQuYm94O1xuICAgIGJveC51cGRhdGUoXG4gICAgICBsYXlvdXQud2lkdGggfHwgY2hhcnRBcmVhLncsXG4gICAgICBsYXlvdXQuaGVpZ2h0IHx8IGNoYXJ0QXJlYS5oLFxuICAgICAgZ2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKVxuICAgICk7XG4gICAgY29uc3Qge3NhbWUsIG90aGVyfSA9IHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKTtcbiAgICByZWZpdCB8PSBzYW1lICYmIHJlZml0Qm94ZXMubGVuZ3RoO1xuICAgIGNoYW5nZWQgPSBjaGFuZ2VkIHx8IG90aGVyO1xuICAgIGlmICghYm94LmZ1bGxTaXplKSB7XG4gICAgICByZWZpdEJveGVzLnB1c2gobGF5b3V0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlZml0ICYmIGZpdEJveGVzKHJlZml0Qm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHx8IGNoYW5nZWQ7XG59XG5mdW5jdGlvbiBzZXRCb3hEaW1zKGJveCwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGJveC50b3AgPSB0b3A7XG4gIGJveC5sZWZ0ID0gbGVmdDtcbiAgYm94LnJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICBib3guYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICBib3gud2lkdGggPSB3aWR0aDtcbiAgYm94LmhlaWdodCA9IGhlaWdodDtcbn1cbmZ1bmN0aW9uIHBsYWNlQm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgY29uc3QgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcbiAgbGV0IHt4LCB5fSA9IGNoYXJ0QXJlYTtcbiAgZm9yIChjb25zdCBsYXlvdXQgb2YgYm94ZXMpIHtcbiAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge2NvdW50OiAxLCBwbGFjZWQ6IDAsIHdlaWdodDogMX07XG4gICAgY29uc3Qgd2VpZ2h0ID0gKGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodCkgfHwgMTtcbiAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgIGNvbnN0IHdpZHRoID0gY2hhcnRBcmVhLncgKiB3ZWlnaHQ7XG4gICAgICBjb25zdCBoZWlnaHQgPSBzdGFjay5zaXplIHx8IGJveC5oZWlnaHQ7XG4gICAgICBpZiAoZGVmaW5lZChzdGFjay5zdGFydCkpIHtcbiAgICAgICAgeSA9IHN0YWNrLnN0YXJ0O1xuICAgICAgfVxuICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgdXNlclBhZGRpbmcubGVmdCwgeSwgcGFyYW1zLm91dGVyV2lkdGggLSB1c2VyUGFkZGluZy5yaWdodCAtIHVzZXJQYWRkaW5nLmxlZnQsIGhlaWdodCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgY2hhcnRBcmVhLmxlZnQgKyBzdGFjay5wbGFjZWQsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgc3RhY2suc3RhcnQgPSB5O1xuICAgICAgc3RhY2sucGxhY2VkICs9IHdpZHRoO1xuICAgICAgeSA9IGJveC5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGNoYXJ0QXJlYS5oICogd2VpZ2h0O1xuICAgICAgY29uc3Qgd2lkdGggPSBzdGFjay5zaXplIHx8IGJveC53aWR0aDtcbiAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICB4ID0gc3RhY2suc3RhcnQ7XG4gICAgICB9XG4gICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCB4LCB1c2VyUGFkZGluZy50b3AsIHdpZHRoLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSB1c2VyUGFkZGluZy5ib3R0b20gLSB1c2VyUGFkZGluZy50b3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIGNoYXJ0QXJlYS50b3AgKyBzdGFjay5wbGFjZWQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgc3RhY2suc3RhcnQgPSB4O1xuICAgICAgc3RhY2sucGxhY2VkICs9IGhlaWdodDtcbiAgICAgIHggPSBib3gucmlnaHQ7XG4gICAgfVxuICB9XG4gIGNoYXJ0QXJlYS54ID0geDtcbiAgY2hhcnRBcmVhLnkgPSB5O1xufVxuZGVmYXVsdHMuc2V0KCdsYXlvdXQnLCB7XG4gIGF1dG9QYWRkaW5nOiB0cnVlLFxuICBwYWRkaW5nOiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH1cbn0pO1xudmFyIGxheW91dHMgPSB7XG4gIGFkZEJveChjaGFydCwgaXRlbSkge1xuICAgIGlmICghY2hhcnQuYm94ZXMpIHtcbiAgICAgIGNoYXJ0LmJveGVzID0gW107XG4gICAgfVxuICAgIGl0ZW0uZnVsbFNpemUgPSBpdGVtLmZ1bGxTaXplIHx8IGZhbHNlO1xuICAgIGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuICAgIGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcbiAgICBpdGVtLl9sYXllcnMgPSBpdGVtLl9sYXllcnMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgejogMCxcbiAgICAgICAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICAgICAgICBpdGVtLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfTtcbiAgICBjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuICB9LFxuICByZW1vdmVCb3goY2hhcnQsIGxheW91dEl0ZW0pIHtcbiAgICBjb25zdCBpbmRleCA9IGNoYXJ0LmJveGVzID8gY2hhcnQuYm94ZXMuaW5kZXhPZihsYXlvdXRJdGVtKSA6IC0xO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGNoYXJ0LmJveGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9LFxuICBjb25maWd1cmUoY2hhcnQsIGl0ZW0sIG9wdGlvbnMpIHtcbiAgICBpdGVtLmZ1bGxTaXplID0gb3B0aW9ucy5mdWxsU2l6ZTtcbiAgICBpdGVtLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcbiAgICBpdGVtLndlaWdodCA9IG9wdGlvbnMud2VpZ2h0O1xuICB9LFxuICB1cGRhdGUoY2hhcnQsIHdpZHRoLCBoZWlnaHQsIG1pblBhZGRpbmcpIHtcbiAgICBpZiAoIWNoYXJ0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcoY2hhcnQub3B0aW9ucy5sYXlvdXQucGFkZGluZyk7XG4gICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSBNYXRoLm1heCh3aWR0aCAtIHBhZGRpbmcud2lkdGgsIDApO1xuICAgIGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IE1hdGgubWF4KGhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0LCAwKTtcbiAgICBjb25zdCBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuICAgIGNvbnN0IHZlcnRpY2FsQm94ZXMgPSBib3hlcy52ZXJ0aWNhbDtcbiAgICBjb25zdCBob3Jpem9udGFsQm94ZXMgPSBib3hlcy5ob3Jpem9udGFsO1xuICAgIGVhY2goY2hhcnQuYm94ZXMsIGJveCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGJveC5iZWZvcmVMYXlvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYm94LmJlZm9yZUxheW91dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHZpc2libGVWZXJ0aWNhbEJveENvdW50ID0gdmVydGljYWxCb3hlcy5yZWR1Y2UoKHRvdGFsLCB3cmFwKSA9PlxuICAgICAgd3JhcC5ib3gub3B0aW9ucyAmJiB3cmFwLmJveC5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlID8gdG90YWwgOiB0b3RhbCArIDEsIDApIHx8IDE7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICBvdXRlcldpZHRoOiB3aWR0aCxcbiAgICAgIG91dGVySGVpZ2h0OiBoZWlnaHQsXG4gICAgICBwYWRkaW5nLFxuICAgICAgYXZhaWxhYmxlV2lkdGgsXG4gICAgICBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB2Qm94TWF4V2lkdGg6IGF2YWlsYWJsZVdpZHRoIC8gMiAvIHZpc2libGVWZXJ0aWNhbEJveENvdW50LFxuICAgICAgaEJveE1heEhlaWdodDogYXZhaWxhYmxlSGVpZ2h0IC8gMlxuICAgIH0pO1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBPYmplY3QuYXNzaWduKHt9LCBwYWRkaW5nKTtcbiAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIHRvUGFkZGluZyhtaW5QYWRkaW5nKSk7XG4gICAgY29uc3QgY2hhcnRBcmVhID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBtYXhQYWRkaW5nLFxuICAgICAgdzogYXZhaWxhYmxlV2lkdGgsXG4gICAgICBoOiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB4OiBwYWRkaW5nLmxlZnQsXG4gICAgICB5OiBwYWRkaW5nLnRvcFxuICAgIH0sIHBhZGRpbmcpO1xuICAgIGNvbnN0IHN0YWNrcyA9IHNldExheW91dERpbXModmVydGljYWxCb3hlcy5jb25jYXQoaG9yaXpvbnRhbEJveGVzKSwgcGFyYW1zKTtcbiAgICBmaXRCb3hlcyhib3hlcy5mdWxsU2l6ZSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgaWYgKGZpdEJveGVzKGhvcml6b250YWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykpIHtcbiAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIH1cbiAgICBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSk7XG4gICAgcGxhY2VCb3hlcyhib3hlcy5sZWZ0QW5kVG9wLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcbiAgICBjaGFydEFyZWEueSArPSBjaGFydEFyZWEuaDtcbiAgICBwbGFjZUJveGVzKGJveGVzLnJpZ2h0QW5kQm90dG9tLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBjaGFydC5jaGFydEFyZWEgPSB7XG4gICAgICBsZWZ0OiBjaGFydEFyZWEubGVmdCxcbiAgICAgIHRvcDogY2hhcnRBcmVhLnRvcCxcbiAgICAgIHJpZ2h0OiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53LFxuICAgICAgYm90dG9tOiBjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmgsXG4gICAgICBoZWlnaHQ6IGNoYXJ0QXJlYS5oLFxuICAgICAgd2lkdGg6IGNoYXJ0QXJlYS53LFxuICAgIH07XG4gICAgZWFjaChib3hlcy5jaGFydEFyZWEsIChsYXlvdXQpID0+IHtcbiAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICBPYmplY3QuYXNzaWduKGJveCwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgIGJveC51cGRhdGUoY2hhcnRBcmVhLncsIGNoYXJ0QXJlYS5oLCB7bGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmNsYXNzIEJhc2VQbGF0Zm9ybSB7XG4gIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHt9XG4gIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuICBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGdldE1heGltdW1TaXplKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCB8fCBlbGVtZW50LndpZHRoKTtcbiAgICBoZWlnaHQgPSBoZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0OiBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQpXG4gICAgfTtcbiAgfVxuICBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgfVxufVxuXG5jbGFzcyBCYXNpY1BsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoaXRlbSkge1xuICAgIHJldHVybiBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCAmJiBpdGVtLmdldENvbnRleHQoJzJkJykgfHwgbnVsbDtcbiAgfVxuICB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnLm9wdGlvbnMuYW5pbWF0aW9uID0gZmFsc2U7XG4gIH1cbn1cblxuY29uc3QgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xuY29uc3QgRVZFTlRfVFlQRVMgPSB7XG4gIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3VjaGVuZDogJ21vdXNldXAnLFxuICBwb2ludGVyZW50ZXI6ICdtb3VzZWVudGVyJyxcbiAgcG9pbnRlcmRvd246ICdtb3VzZWRvd24nLFxuICBwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG4gIHBvaW50ZXJ1cDogJ21vdXNldXAnLFxuICBwb2ludGVybGVhdmU6ICdtb3VzZW91dCcsXG4gIHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5jb25zdCBpc051bGxPckVtcHR5ID0gdmFsdWUgPT4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnO1xuZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gIGNvbnN0IHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICBjb25zdCByZW5kZXJIZWlnaHQgPSBjYW52YXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgY29uc3QgcmVuZGVyV2lkdGggPSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICBjYW52YXNbRVhQQU5ET19LRVldID0ge1xuICAgIGluaXRpYWw6IHtcbiAgICAgIGhlaWdodDogcmVuZGVySGVpZ2h0LFxuICAgICAgd2lkdGg6IHJlbmRlcldpZHRoLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZGlzcGxheTogc3R5bGUuZGlzcGxheSxcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aFxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcbiAgc3R5bGUuYm94U2l6aW5nID0gc3R5bGUuYm94U2l6aW5nIHx8ICdib3JkZXItYm94JztcbiAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVyV2lkdGgpKSB7XG4gICAgY29uc3QgZGlzcGxheVdpZHRoID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ3dpZHRoJyk7XG4gICAgaWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGg7XG4gICAgfVxuICB9XG4gIGlmIChpc051bGxPckVtcHR5KHJlbmRlckhlaWdodCkpIHtcbiAgICBpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoYXNwZWN0UmF0aW8gfHwgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpc3BsYXlIZWlnaHQgPSByZWFkVXNlZFNpemUoY2FudmFzLCAnaGVpZ2h0Jyk7XG4gICAgICBpZiAoZGlzcGxheUhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2FudmFzO1xufVxuY29uc3QgZXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID8ge3Bhc3NpdmU6IHRydWV9IDogZmFsc2U7XG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjaGFydC5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkge1xuICBjb25zdCB0eXBlID0gRVZFTlRfVFlQRVNbZXZlbnQudHlwZV0gfHwgZXZlbnQudHlwZTtcbiAgY29uc3Qge3gsIHl9ID0gZ2V0UmVsYXRpdmVQb3NpdGlvbiQxKGV2ZW50LCBjaGFydCk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICBjaGFydCxcbiAgICBuYXRpdmU6IGV2ZW50LFxuICAgIHg6IHggIT09IHVuZGVmaW5lZCA/IHggOiBudWxsLFxuICAgIHk6IHkgIT09IHVuZGVmaW5lZCA/IHkgOiBudWxsLFxuICB9O1xufVxuZnVuY3Rpb24gbm9kZUxpc3RDb250YWlucyhub2RlTGlzdCwgY2FudmFzKSB7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiBub2RlTGlzdCkge1xuICAgIGlmIChub2RlID09PSBjYW52YXMgfHwgbm9kZS5jb250YWlucyhjYW52YXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICB9XG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9KTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgfVxuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcbiAgcmV0dXJuIG9ic2VydmVyO1xufVxuY29uc3QgZHJwTGlzdGVuaW5nQ2hhcnRzID0gbmV3IE1hcCgpO1xubGV0IG9sZERldmljZVBpeGVsUmF0aW8gPSAwO1xuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICBpZiAoZHByID09PSBvbGREZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9sZERldmljZVBpeGVsUmF0aW8gPSBkcHI7XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5mb3JFYWNoKChyZXNpemUsIGNoYXJ0KSA9PiB7XG4gICAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBkcHIpIHtcbiAgICAgIHJlc2l6ZSgpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKSB7XG4gIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICB9XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5zZXQoY2hhcnQsIHJlc2l6ZSk7XG59XG5mdW5jdGlvbiB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KSB7XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVzaXplT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3QgY29udGFpbmVyID0gY2FudmFzICYmIF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlc2l6ZSA9IHRocm90dGxlZCgod2lkdGgsIGhlaWdodCkgPT4ge1xuICAgIGNvbnN0IHcgPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgbGlzdGVuZXIod2lkdGgsIGhlaWdodCk7XG4gICAgaWYgKHcgPCBjb250YWluZXIuY2xpZW50V2lkdGgpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9LCB3aW5kb3cpO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbMF07XG4gICAgY29uc3Qgd2lkdGggPSBlbnRyeS5jb250ZW50UmVjdC53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBlbnRyeS5jb250ZW50UmVjdC5oZWlnaHQ7XG4gICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNpemUod2lkdGgsIGhlaWdodCk7XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lcik7XG4gIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiByZWxlYXNlT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIG9ic2VydmVyKSB7XG4gIGlmIChvYnNlcnZlcikge1xuICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxuICBpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcbiAgICB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUHJveHlBbmRMaXN0ZW4oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3QgcHJveHkgPSB0aHJvdHRsZWQoKGV2ZW50KSA9PiB7XG4gICAgaWYgKGNoYXJ0LmN0eCAhPT0gbnVsbCkge1xuICAgICAgbGlzdGVuZXIoZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkpO1xuICAgIH1cbiAgfSwgY2hhcnQsIChhcmdzKSA9PiB7XG4gICAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xuICAgIHJldHVybiBbZXZlbnQsIGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFldO1xuICB9KTtcbiAgYWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cbmNsYXNzIERvbVBsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5jYW52YXMgPT09IGNhbnZhcykge1xuICAgICAgaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKTtcbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29uc3QgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG4gICAgaWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGluaXRpYWwgPSBjYW52YXNbRVhQQU5ET19LRVldLmluaXRpYWw7XG4gICAgWydoZWlnaHQnLCAnd2lkdGgnXS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGluaXRpYWxbcHJvcF07XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgY2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHN0eWxlID0gaW5pdGlhbC5zdHlsZSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjYW52YXMuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gICAgfSk7XG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIGRlbGV0ZSBjYW52YXNbRVhQQU5ET19LRVldO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKTtcbiAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgYXR0YWNoOiBjcmVhdGVBdHRhY2hPYnNlcnZlcixcbiAgICAgIGRldGFjaDogY3JlYXRlRGV0YWNoT2JzZXJ2ZXIsXG4gICAgICByZXNpemU6IGNyZWF0ZVJlc2l6ZU9ic2VydmVyXG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgY3JlYXRlUHJveHlBbmRMaXN0ZW47XG4gICAgcHJveGllc1t0eXBlXSA9IGhhbmRsZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuICByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKSB7XG4gICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICBjb25zdCBwcm94eSA9IHByb3hpZXNbdHlwZV07XG4gICAgaWYgKCFwcm94eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgIGF0dGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgZGV0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICByZXNpemU6IHJlbGVhc2VPYnNlcnZlclxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IHJlbW92ZUxpc3RlbmVyO1xuICAgIGhhbmRsZXIoY2hhcnQsIHR5cGUsIHByb3h5KTtcbiAgICBwcm94aWVzW3R5cGVdID0gdW5kZWZpbmVkO1xuICB9XG4gIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICB9XG4gIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICByZXR1cm4gZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gIH1cbiAgaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIHJldHVybiAhIShjb250YWluZXIgJiYgY29udGFpbmVyLmlzQ29ubmVjdGVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGV0ZWN0UGxhdGZvcm0oY2FudmFzKSB7XG4gIGlmICghX2lzRG9tU3VwcG9ydGVkKCkgfHwgKHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnICYmIGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykpIHtcbiAgICByZXR1cm4gQmFzaWNQbGF0Zm9ybTtcbiAgfVxuICByZXR1cm4gRG9tUGxhdGZvcm07XG59XG5cbmNsYXNzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7eCwgeX07XG4gIH1cbiAgaGFzVmFsdWUoKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHRoaXMueCkgJiYgaXNOdW1iZXIodGhpcy55KTtcbiAgfVxuICBnZXRQcm9wcyhwcm9wcywgZmluYWwpIHtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgaWYgKCFmaW5hbCB8fCAhYW5pbXMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBwcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgcmV0W3Byb3BdID0gYW5pbXNbcHJvcF0gJiYgYW5pbXNbcHJvcF0uYWN0aXZlKCkgPyBhbmltc1twcm9wXS5fdG8gOiB0aGlzW3Byb3BdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cbkVsZW1lbnQuZGVmYXVsdHMgPSB7fTtcbkVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHVuZGVmaW5lZDtcblxuY29uc3QgZm9ybWF0dGVycyA9IHtcbiAgdmFsdWVzKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiAnJyArIHZhbHVlO1xuICB9LFxuICBudW1lcmljKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuICcwJztcbiAgICB9XG4gICAgY29uc3QgbG9jYWxlID0gdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZTtcbiAgICBsZXQgbm90YXRpb247XG4gICAgbGV0IGRlbHRhID0gdGlja1ZhbHVlO1xuICAgIGlmICh0aWNrcy5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBtYXhUaWNrID0gTWF0aC5tYXgoTWF0aC5hYnModGlja3NbMF0udmFsdWUpLCBNYXRoLmFicyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSkpO1xuICAgICAgaWYgKG1heFRpY2sgPCAxZS00IHx8IG1heFRpY2sgPiAxZSsxNSkge1xuICAgICAgICBub3RhdGlvbiA9ICdzY2llbnRpZmljJztcbiAgICAgIH1cbiAgICAgIGRlbHRhID0gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcyk7XG4gICAgfVxuICAgIGNvbnN0IGxvZ0RlbHRhID0gbG9nMTAoTWF0aC5hYnMoZGVsdGEpKTtcbiAgICBjb25zdCBudW1EZWNpbWFsID0gTWF0aC5tYXgoTWF0aC5taW4oLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKSwgMjApLCAwKTtcbiAgICBjb25zdCBvcHRpb25zID0ge25vdGF0aW9uLCBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWwsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogbnVtRGVjaW1hbH07XG4gICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHRpY2tWYWx1ZSwgbG9jYWxlLCBvcHRpb25zKTtcbiAgfSxcbiAgbG9nYXJpdGhtaWModGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm4gJzAnO1xuICAgIH1cbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsdWUgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodGlja1ZhbHVlKSkpKTtcbiAgICBpZiAocmVtYWluID09PSAxIHx8IHJlbWFpbiA9PT0gMiB8fCByZW1haW4gPT09IDUpIHtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXJzLm51bWVyaWMuY2FsbCh0aGlzLCB0aWNrVmFsdWUsIGluZGV4LCB0aWNrcyk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpIHtcbiAgbGV0IGRlbHRhID0gdGlja3MubGVuZ3RoID4gMyA/IHRpY2tzWzJdLnZhbHVlIC0gdGlja3NbMV0udmFsdWUgOiB0aWNrc1sxXS52YWx1ZSAtIHRpY2tzWzBdLnZhbHVlO1xuICBpZiAoTWF0aC5hYnMoZGVsdGEpID49IDEgJiYgdGlja1ZhbHVlICE9PSBNYXRoLmZsb29yKHRpY2tWYWx1ZSkpIHtcbiAgICBkZWx0YSA9IHRpY2tWYWx1ZSAtIE1hdGguZmxvb3IodGlja1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG52YXIgVGlja3MgPSB7Zm9ybWF0dGVyc307XG5cbmRlZmF1bHRzLnNldCgnc2NhbGUnLCB7XG4gIGRpc3BsYXk6IHRydWUsXG4gIG9mZnNldDogZmFsc2UsXG4gIHJldmVyc2U6IGZhbHNlLFxuICBiZWdpbkF0WmVybzogZmFsc2UsXG4gIGJvdW5kczogJ3RpY2tzJyxcbiAgZ3JhY2U6IDAsXG4gIGdyaWQ6IHtcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGxpbmVXaWR0aDogMSxcbiAgICBkcmF3Qm9yZGVyOiB0cnVlLFxuICAgIGRyYXdPbkNoYXJ0QXJlYTogdHJ1ZSxcbiAgICBkcmF3VGlja3M6IHRydWUsXG4gICAgdGlja0xlbmd0aDogOCxcbiAgICB0aWNrV2lkdGg6IChfY3R4LCBvcHRpb25zKSA9PiBvcHRpb25zLmxpbmVXaWR0aCxcbiAgICB0aWNrQ29sb3I6IChfY3R4LCBvcHRpb25zKSA9PiBvcHRpb25zLmNvbG9yLFxuICAgIG9mZnNldDogZmFsc2UsXG4gICAgYm9yZGVyRGFzaDogW10sXG4gICAgYm9yZGVyRGFzaE9mZnNldDogMC4wLFxuICAgIGJvcmRlcldpZHRoOiAxXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgdGV4dDogJycsXG4gICAgcGFkZGluZzoge1xuICAgICAgdG9wOiA0LFxuICAgICAgYm90dG9tOiA0XG4gICAgfVxuICB9LFxuICB0aWNrczoge1xuICAgIG1pblJvdGF0aW9uOiAwLFxuICAgIG1heFJvdGF0aW9uOiA1MCxcbiAgICBtaXJyb3I6IGZhbHNlLFxuICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICB0ZXh0U3Ryb2tlQ29sb3I6ICcnLFxuICAgIHBhZGRpbmc6IDMsXG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBhdXRvU2tpcDogdHJ1ZSxcbiAgICBhdXRvU2tpcFBhZGRpbmc6IDMsXG4gICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMudmFsdWVzLFxuICAgIG1pbm9yOiB7fSxcbiAgICBtYWpvcjoge30sXG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIGNyb3NzQWxpZ246ICduZWFyJyxcbiAgICBzaG93TGFiZWxCYWNrZHJvcDogZmFsc2UsXG4gICAgYmFja2Ryb3BDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSknLFxuICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgfVxufSk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUudGlja3MnLCAnY29sb3InLCAnJywgJ2NvbG9yJyk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ncmlkJywgJ2JvcmRlckNvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpdGxlJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlJywge1xuICBfZmFsbGJhY2s6IGZhbHNlLFxuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ2JlZm9yZScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2FmdGVyJykgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyAmJiBuYW1lICE9PSAncGFyc2VyJyxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAndGlja0JvcmRlckRhc2gnLFxufSk7XG5kZWZhdWx0cy5kZXNjcmliZSgnc2NhbGVzJywge1xuICBfZmFsbGJhY2s6ICdzY2FsZScsXG59KTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZS50aWNrcycsIHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJyAmJiBuYW1lICE9PSAnY2FsbGJhY2snLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZycsXG59KTtcblxuZnVuY3Rpb24gYXV0b1NraXAoc2NhbGUsIHRpY2tzKSB7XG4gIGNvbnN0IHRpY2tPcHRzID0gc2NhbGUub3B0aW9ucy50aWNrcztcbiAgY29uc3QgdGlja3NMaW1pdCA9IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgfHwgZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpO1xuICBjb25zdCBtYWpvckluZGljZXMgPSB0aWNrT3B0cy5tYWpvci5lbmFibGVkID8gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSA6IFtdO1xuICBjb25zdCBudW1NYWpvckluZGljZXMgPSBtYWpvckluZGljZXMubGVuZ3RoO1xuICBjb25zdCBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcbiAgY29uc3QgbGFzdCA9IG1ham9ySW5kaWNlc1tudW1NYWpvckluZGljZXMgLSAxXTtcbiAgY29uc3QgbmV3VGlja3MgPSBbXTtcbiAgaWYgKG51bU1ham9ySW5kaWNlcyA+IHRpY2tzTGltaXQpIHtcbiAgICBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBudW1NYWpvckluZGljZXMgLyB0aWNrc0xpbWl0KTtcbiAgICByZXR1cm4gbmV3VGlja3M7XG4gIH1cbiAgY29uc3Qgc3BhY2luZyA9IGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCk7XG4gIGlmIChudW1NYWpvckluZGljZXMgPiAwKSB7XG4gICAgbGV0IGksIGlsZW47XG4gICAgY29uc3QgYXZnTWFqb3JTcGFjaW5nID0gbnVtTWFqb3JJbmRpY2VzID4gMSA/IE1hdGgucm91bmQoKGxhc3QgLSBmaXJzdCkgLyAobnVtTWFqb3JJbmRpY2VzIC0gMSkpIDogbnVsbDtcbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gMCA6IGZpcnN0IC0gYXZnTWFqb3JTcGFjaW5nLCBmaXJzdCk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG51bU1ham9ySW5kaWNlcyAtIDE7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvckluZGljZXNbaV0sIG1ham9ySW5kaWNlc1tpICsgMV0pO1xuICAgIH1cbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbGFzdCwgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gdGlja3MubGVuZ3RoIDogbGFzdCArIGF2Z01ham9yU3BhY2luZyk7XG4gICAgcmV0dXJuIG5ld1RpY2tzO1xuICB9XG4gIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nKTtcbiAgcmV0dXJuIG5ld1RpY2tzO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpIHtcbiAgY29uc3Qgb2Zmc2V0ID0gc2NhbGUub3B0aW9ucy5vZmZzZXQ7XG4gIGNvbnN0IHRpY2tMZW5ndGggPSBzY2FsZS5fdGlja1NpemUoKTtcbiAgY29uc3QgbWF4U2NhbGUgPSBzY2FsZS5fbGVuZ3RoIC8gdGlja0xlbmd0aCArIChvZmZzZXQgPyAwIDogMSk7XG4gIGNvbnN0IG1heENoYXJ0ID0gc2NhbGUuX21heExlbmd0aCAvIHRpY2tMZW5ndGg7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWluKG1heFNjYWxlLCBtYXhDaGFydCkpO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KSB7XG4gIGNvbnN0IGV2ZW5NYWpvclNwYWNpbmcgPSBnZXRFdmVuU3BhY2luZyhtYWpvckluZGljZXMpO1xuICBjb25zdCBzcGFjaW5nID0gdGlja3MubGVuZ3RoIC8gdGlja3NMaW1pdDtcbiAgaWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xuICB9XG4gIGNvbnN0IGZhY3RvcnMgPSBfZmFjdG9yaXplKGV2ZW5NYWpvclNwYWNpbmcpO1xuICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IGZhY3RvcnMubGVuZ3RoIC0gMTsgaSA8IGlsZW47IGkrKykge1xuICAgIGNvbnN0IGZhY3RvciA9IGZhY3RvcnNbaV07XG4gICAgaWYgKGZhY3RvciA+IHNwYWNpbmcpIHtcbiAgICAgIHJldHVybiBmYWN0b3I7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbn1cbmZ1bmN0aW9uIGdldE1ham9ySW5kaWNlcyh0aWNrcykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGksIGlsZW47XG4gIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICBpZiAodGlja3NbaV0ubWFqb3IpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgc3BhY2luZykge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgbmV4dCA9IG1ham9ySW5kaWNlc1swXTtcbiAgbGV0IGk7XG4gIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aWNrcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgIGNvdW50Kys7XG4gICAgICBuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JTdGFydCwgbWFqb3JFbmQpIHtcbiAgY29uc3Qgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdChtYWpvclN0YXJ0LCAwKTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4odmFsdWVPckRlZmF1bHQobWFqb3JFbmQsIHRpY2tzLmxlbmd0aCksIHRpY2tzLmxlbmd0aCk7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCBsZW5ndGgsIGksIG5leHQ7XG4gIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gIGlmIChtYWpvckVuZCkge1xuICAgIGxlbmd0aCA9IG1ham9yRW5kIC0gbWFqb3JTdGFydDtcbiAgICBzcGFjaW5nID0gbGVuZ3RoIC8gTWF0aC5mbG9vcihsZW5ndGggLyBzcGFjaW5nKTtcbiAgfVxuICBuZXh0ID0gc3RhcnQ7XG4gIHdoaWxlIChuZXh0IDwgMCkge1xuICAgIGNvdW50Kys7XG4gICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICB9XG4gIGZvciAoaSA9IE1hdGgubWF4KHN0YXJ0LCAwKTsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgY291bnQrKztcbiAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEV2ZW5TcGFjaW5nKGFycikge1xuICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICBsZXQgaSwgZGlmZjtcbiAgaWYgKGxlbiA8IDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChkaWZmID0gYXJyWzBdLCBpID0gMTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFycltpXSAtIGFycltpIC0gMV0gIT09IGRpZmYpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpZmY7XG59XG5cbmNvbnN0IHJldmVyc2VBbGlnbiA9IChhbGlnbikgPT4gYWxpZ24gPT09ICdsZWZ0JyA/ICdyaWdodCcgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6IGFsaWduO1xuY29uc3Qgb2Zmc2V0RnJvbUVkZ2UgPSAoc2NhbGUsIGVkZ2UsIG9mZnNldCkgPT4gZWRnZSA9PT0gJ3RvcCcgfHwgZWRnZSA9PT0gJ2xlZnQnID8gc2NhbGVbZWRnZV0gKyBvZmZzZXQgOiBzY2FsZVtlZGdlXSAtIG9mZnNldDtcbmZ1bmN0aW9uIHNhbXBsZShhcnIsIG51bUl0ZW1zKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG4gIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gIGxldCBpID0gMDtcbiAgZm9yICg7IGkgPCBsZW47IGkgKz0gaW5jcmVtZW50KSB7XG4gICAgcmVzdWx0LnB1c2goYXJyW01hdGguZmxvb3IoaSldKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0UGl4ZWxGb3JHcmlkTGluZShzY2FsZSwgaW5kZXgsIG9mZnNldEdyaWRMaW5lcykge1xuICBjb25zdCBsZW5ndGggPSBzY2FsZS50aWNrcy5sZW5ndGg7XG4gIGNvbnN0IHZhbGlkSW5kZXggPSBNYXRoLm1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHN0YXJ0ID0gc2NhbGUuX3N0YXJ0UGl4ZWw7XG4gIGNvbnN0IGVuZCA9IHNjYWxlLl9lbmRQaXhlbDtcbiAgY29uc3QgZXBzaWxvbiA9IDFlLTY7XG4gIGxldCBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCk7XG4gIGxldCBvZmZzZXQ7XG4gIGlmIChvZmZzZXRHcmlkTGluZXMpIHtcbiAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICBvZmZzZXQgPSBNYXRoLm1heChsaW5lVmFsdWUgLSBzdGFydCwgZW5kIC0gbGluZVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICBvZmZzZXQgPSAoc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gbGluZVZhbHVlKSAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCA9IChsaW5lVmFsdWUgLSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCAtIDEpKSAvIDI7XG4gICAgfVxuICAgIGxpbmVWYWx1ZSArPSB2YWxpZEluZGV4IDwgaW5kZXggPyBvZmZzZXQgOiAtb2Zmc2V0O1xuICAgIGlmIChsaW5lVmFsdWUgPCBzdGFydCAtIGVwc2lsb24gfHwgbGluZVZhbHVlID4gZW5kICsgZXBzaWxvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGluZVZhbHVlO1xufVxuZnVuY3Rpb24gZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpIHtcbiAgZWFjaChjYWNoZXMsIChjYWNoZSkgPT4ge1xuICAgIGNvbnN0IGdjID0gY2FjaGUuZ2M7XG4gICAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICAgIGxldCBpO1xuICAgIGlmIChnY0xlbiA+IGxlbmd0aCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdjTGVuOyArK2kpIHtcbiAgICAgICAgZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuICAgICAgfVxuICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5kcmF3VGlja3MgPyBvcHRpb25zLnRpY2tMZW5ndGggOiAwO1xufVxuZnVuY3Rpb24gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBmb250ID0gdG9Gb250KG9wdGlvbnMuZm9udCwgZmFsbGJhY2spO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIGNvbnN0IGxpbmVzID0gaXNBcnJheShvcHRpb25zLnRleHQpID8gb3B0aW9ucy50ZXh0Lmxlbmd0aCA6IDE7XG4gIHJldHVybiAobGluZXMgKiBmb250LmxpbmVIZWlnaHQpICsgcGFkZGluZy5oZWlnaHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVTY2FsZUNvbnRleHQocGFyZW50LCBzY2FsZSkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBzY2FsZSxcbiAgICB0eXBlOiAnc2NhbGUnXG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVGlja0NvbnRleHQocGFyZW50LCBpbmRleCwgdGljaykge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICB0aWNrLFxuICAgIGluZGV4LFxuICAgIHR5cGU6ICd0aWNrJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIHRpdGxlQWxpZ24oYWxpZ24sIHBvc2l0aW9uLCByZXZlcnNlKSB7XG4gIGxldCByZXQgPSBfdG9MZWZ0UmlnaHRDZW50ZXIoYWxpZ24pO1xuICBpZiAoKHJldmVyc2UgJiYgcG9zaXRpb24gIT09ICdyaWdodCcpIHx8ICghcmV2ZXJzZSAmJiBwb3NpdGlvbiA9PT0gJ3JpZ2h0JykpIHtcbiAgICByZXQgPSByZXZlcnNlQWxpZ24ocmV0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gdGl0bGVBcmdzKHNjYWxlLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbikge1xuICBjb25zdCB7dG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBjaGFydH0gPSBzY2FsZTtcbiAgY29uc3Qge2NoYXJ0QXJlYSwgc2NhbGVzfSA9IGNoYXJ0O1xuICBsZXQgcm90YXRpb24gPSAwO1xuICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICBpZiAoc2NhbGUuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICB0aXRsZVkgPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICB0aXRsZVkgPSAoY2hhcnRBcmVhLmJvdHRvbSArIGNoYXJ0QXJlYS50b3ApIC8gMiArIGhlaWdodCAtIG9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGVZID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgIH1cbiAgICBtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgdGl0bGVYID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSAtIHdpZHRoICsgb2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICB0aXRsZVggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHdpZHRoICsgb2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZVggPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgfVxuICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgcm90YXRpb24gPSBwb3NpdGlvbiA9PT0gJ2xlZnQnID8gLUhBTEZfUEkgOiBIQUxGX1BJO1xuICB9XG4gIHJldHVybiB7dGl0bGVYLCB0aXRsZVksIG1heFdpZHRoLCByb3RhdGlvbn07XG59XG5jbGFzcyBTY2FsZSBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaWQgPSBjZmcuaWQ7XG4gICAgdGhpcy50eXBlID0gY2ZnLnR5cGU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY3R4ID0gY2ZnLmN0eDtcbiAgICB0aGlzLmNoYXJ0ID0gY2ZnLmNoYXJ0O1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH07XG4gICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdUb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nQm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFkZGluZ0xlZnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nUmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5heGlzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRpY2tzID0gW107XG4gICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSAwO1xuICAgIHRoaXMuX2xvbmdlc3RUZXh0Q2FjaGUgPSB7fTtcbiAgICB0aGlzLl9zdGFydFBpeGVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2VuZFBpeGVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSBmYWxzZTtcbiAgICB0aGlzLl91c2VyTWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3VzZXJNaW4gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl90aWNrc0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fYm9yZGVyVmFsdWUgPSAwO1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdChvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICB0aGlzLmF4aXMgPSBvcHRpb25zLmF4aXM7XG4gICAgdGhpcy5fdXNlck1pbiA9IHRoaXMucGFyc2Uob3B0aW9ucy5taW4pO1xuICAgIHRoaXMuX3VzZXJNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMubWF4KTtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWluKTtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWF4KTtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgcmV0dXJuIHJhdztcbiAgfVxuICBnZXRVc2VyQm91bmRzKCkge1xuICAgIGxldCB7X3VzZXJNaW4sIF91c2VyTWF4LCBfc3VnZ2VzdGVkTWluLCBfc3VnZ2VzdGVkTWF4fSA9IHRoaXM7XG4gICAgX3VzZXJNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgX3VzZXJNYXggPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgX3N1Z2dlc3RlZE1pbiA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIF9zdWdnZXN0ZWRNYXggPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICByZXR1cm4ge1xuICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIF9zdWdnZXN0ZWRNaW4pLFxuICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIF9zdWdnZXN0ZWRNYXgpLFxuICAgICAgbWluRGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNaW4pLFxuICAgICAgbWF4RGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNYXgpXG4gICAgfTtcbiAgfVxuICBnZXRNaW5NYXgoY2FuU3RhY2spIHtcbiAgICBsZXQge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCByYW5nZTtcbiAgICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkKSB7XG4gICAgICByZXR1cm4ge21pbiwgbWF4fTtcbiAgICB9XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHJhbmdlID0gbWV0YXNbaV0uY29udHJvbGxlci5nZXRNaW5NYXgodGhpcywgY2FuU3RhY2spO1xuICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcmFuZ2UubWluKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJhbmdlLm1heCk7XG4gICAgICB9XG4gICAgfVxuICAgIG1pbiA9IG1heERlZmluZWQgJiYgbWluID4gbWF4ID8gbWF4IDogbWluO1xuICAgIG1heCA9IG1pbkRlZmluZWQgJiYgbWluID4gbWF4ID8gbWluIDogbWF4O1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChtaW4sIGZpbml0ZU9yRGVmYXVsdChtYXgsIG1pbikpLFxuICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQobWF4LCBmaW5pdGVPckRlZmF1bHQobWluLCBtYXgpKVxuICAgIH07XG4gIH1cbiAgZ2V0UGFkZGluZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogdGhpcy5wYWRkaW5nTGVmdCB8fCAwLFxuICAgICAgdG9wOiB0aGlzLnBhZGRpbmdUb3AgfHwgMCxcbiAgICAgIHJpZ2h0OiB0aGlzLnBhZGRpbmdSaWdodCB8fCAwLFxuICAgICAgYm90dG9tOiB0aGlzLnBhZGRpbmdCb3R0b20gfHwgMFxuICAgIH07XG4gIH1cbiAgZ2V0VGlja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGlja3M7XG4gIH1cbiAgZ2V0TGFiZWxzKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbHMgfHwgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBkYXRhLnhMYWJlbHMgOiBkYXRhLnlMYWJlbHMpIHx8IGRhdGEubGFiZWxzIHx8IFtdO1xuICB9XG4gIGJlZm9yZUxheW91dCgpIHtcbiAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgfVxuICBiZWZvcmVVcGRhdGUoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW3RoaXNdKTtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgIGNvbnN0IHtiZWdpbkF0WmVybywgZ3JhY2UsIHRpY2tzOiB0aWNrT3B0c30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHRpY2tPcHRzLnNhbXBsZVNpemU7XG4gICAgdGhpcy5iZWZvcmVVcGRhdGUoKTtcbiAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH0sIG1hcmdpbnMpO1xuICAgIHRoaXMudGlja3MgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gdGhpcy5pc0hvcml6b250YWwoKVxuICAgICAgPyB0aGlzLndpZHRoICsgbWFyZ2lucy5sZWZ0ICsgbWFyZ2lucy5yaWdodFxuICAgICAgOiB0aGlzLmhlaWdodCArIG1hcmdpbnMudG9wICsgbWFyZ2lucy5ib3R0b207XG4gICAgaWYgKCF0aGlzLl9kYXRhTGltaXRzQ2FjaGVkKSB7XG4gICAgICB0aGlzLmJlZm9yZURhdGFMaW1pdHMoKTtcbiAgICAgIHRoaXMuZGV0ZXJtaW5lRGF0YUxpbWl0cygpO1xuICAgICAgdGhpcy5hZnRlckRhdGFMaW1pdHMoKTtcbiAgICAgIHRoaXMuX3JhbmdlID0gX2FkZEdyYWNlKHRoaXMsIGdyYWNlLCBiZWdpbkF0WmVybyk7XG4gICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5iZWZvcmVCdWlsZFRpY2tzKCk7XG4gICAgdGhpcy50aWNrcyA9IHRoaXMuYnVpbGRUaWNrcygpIHx8IFtdO1xuICAgIHRoaXMuYWZ0ZXJCdWlsZFRpY2tzKCk7XG4gICAgY29uc3Qgc2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRoaXMudGlja3MubGVuZ3RoO1xuICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHNhbXBsaW5nRW5hYmxlZCA/IHNhbXBsZSh0aGlzLnRpY2tzLCBzYW1wbGVTaXplKSA6IHRoaXMudGlja3MpO1xuICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgdGhpcy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgdGhpcy5jYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgdGhpcy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiAodGlja09wdHMuYXV0b1NraXAgfHwgdGlja09wdHMuc291cmNlID09PSAnYXV0bycpKSB7XG4gICAgICB0aGlzLnRpY2tzID0gYXV0b1NraXAodGhpcywgdGhpcy50aWNrcyk7XG4gICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHNhbXBsaW5nRW5hYmxlZCkge1xuICAgICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHModGhpcy50aWNrcyk7XG4gICAgfVxuICAgIHRoaXMuYmVmb3JlRml0KCk7XG4gICAgdGhpcy5maXQoKTtcbiAgICB0aGlzLmFmdGVyRml0KCk7XG4gICAgdGhpcy5hZnRlclVwZGF0ZSgpO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBsZXQgcmV2ZXJzZVBpeGVscyA9IHRoaXMub3B0aW9ucy5yZXZlcnNlO1xuICAgIGxldCBzdGFydFBpeGVsLCBlbmRQaXhlbDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgc3RhcnRQaXhlbCA9IHRoaXMubGVmdDtcbiAgICAgIGVuZFBpeGVsID0gdGhpcy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRQaXhlbCA9IHRoaXMudG9wO1xuICAgICAgZW5kUGl4ZWwgPSB0aGlzLmJvdHRvbTtcbiAgICAgIHJldmVyc2VQaXhlbHMgPSAhcmV2ZXJzZVBpeGVscztcbiAgICB9XG4gICAgdGhpcy5fc3RhcnRQaXhlbCA9IHN0YXJ0UGl4ZWw7XG4gICAgdGhpcy5fZW5kUGl4ZWwgPSBlbmRQaXhlbDtcbiAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gcmV2ZXJzZVBpeGVscztcbiAgICB0aGlzLl9sZW5ndGggPSBlbmRQaXhlbCAtIHN0YXJ0UGl4ZWw7XG4gICAgdGhpcy5fYWxpZ25Ub1BpeGVscyA9IHRoaXMub3B0aW9ucy5hbGlnblRvUGl4ZWxzO1xuICB9XG4gIGFmdGVyVXBkYXRlKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclVwZGF0ZSwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVTZXREaW1lbnNpb25zKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuICB9XG4gIHNldERpbWVuc2lvbnMoKSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICB9XG4gICAgdGhpcy5wYWRkaW5nTGVmdCA9IDA7XG4gICAgdGhpcy5wYWRkaW5nVG9wID0gMDtcbiAgICB0aGlzLnBhZGRpbmdSaWdodCA9IDA7XG4gICAgdGhpcy5wYWRkaW5nQm90dG9tID0gMDtcbiAgfVxuICBhZnRlclNldERpbWVuc2lvbnMoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcbiAgfVxuICBfY2FsbEhvb2tzKG5hbWUpIHtcbiAgICB0aGlzLmNoYXJ0Lm5vdGlmeVBsdWdpbnMobmFtZSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9uc1tuYW1lXSwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVEYXRhTGltaXRzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlRGF0YUxpbWl0cycpO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7fVxuICBhZnRlckRhdGFMaW1pdHMoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckRhdGFMaW1pdHMnKTtcbiAgfVxuICBiZWZvcmVCdWlsZFRpY2tzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlQnVpbGRUaWNrcycpO1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGFmdGVyQnVpbGRUaWNrcygpIHtcbiAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyQnVpbGRUaWNrcycpO1xuICB9XG4gIGJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbdGhpc10pO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgIHRpY2subGFiZWwgPSBjYWxsYmFjayh0aWNrT3B0cy5jYWxsYmFjaywgW3RpY2sudmFsdWUsIGksIHRpY2tzXSwgdGhpcyk7XG4gICAgfVxuICB9XG4gIGFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uLCBbdGhpc10pO1xuICB9XG4gIGNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgbnVtVGlja3MgPSB0aGlzLnRpY2tzLmxlbmd0aDtcbiAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDA7XG4gICAgY29uc3QgbWF4Um90YXRpb24gPSB0aWNrT3B0cy5tYXhSb3RhdGlvbjtcbiAgICBsZXQgbGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgIGxldCB0aWNrV2lkdGgsIG1heEhlaWdodCwgbWF4TGFiZWxEaWFnb25hbDtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICF0aWNrT3B0cy5kaXNwbGF5IHx8IG1pblJvdGF0aW9uID49IG1heFJvdGF0aW9uIHx8IG51bVRpY2tzIDw9IDEgfHwgIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGNvbnN0IG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICBjb25zdCBtYXhMYWJlbEhlaWdodCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQ7XG4gICAgY29uc3QgbWF4V2lkdGggPSBfbGltaXRWYWx1ZSh0aGlzLmNoYXJ0LndpZHRoIC0gbWF4TGFiZWxXaWR0aCwgMCwgdGhpcy5tYXhXaWR0aCk7XG4gICAgdGlja1dpZHRoID0gb3B0aW9ucy5vZmZzZXQgPyB0aGlzLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuICAgIGlmIChtYXhMYWJlbFdpZHRoICsgNiA+IHRpY2tXaWR0aCkge1xuICAgICAgdGlja1dpZHRoID0gbWF4V2lkdGggLyAobnVtVGlja3MgLSAob3B0aW9ucy5vZmZzZXQgPyAwLjUgOiAxKSk7XG4gICAgICBtYXhIZWlnaHQgPSB0aGlzLm1heEhlaWdodCAtIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZClcblx0XHRcdFx0LSB0aWNrT3B0cy5wYWRkaW5nIC0gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucy50aXRsZSwgdGhpcy5jaGFydC5vcHRpb25zLmZvbnQpO1xuICAgICAgbWF4TGFiZWxEaWFnb25hbCA9IE1hdGguc3FydChtYXhMYWJlbFdpZHRoICogbWF4TGFiZWxXaWR0aCArIG1heExhYmVsSGVpZ2h0ICogbWF4TGFiZWxIZWlnaHQpO1xuICAgICAgbGFiZWxSb3RhdGlvbiA9IHRvRGVncmVlcyhNYXRoLm1pbihcbiAgICAgICAgTWF0aC5hc2luKF9saW1pdFZhbHVlKChsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgNikgLyB0aWNrV2lkdGgsIC0xLCAxKSksXG4gICAgICAgIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpIC0gTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKVxuICAgICAgKSk7XG4gICAgICBsYWJlbFJvdGF0aW9uID0gTWF0aC5tYXgobWluUm90YXRpb24sIE1hdGgubWluKG1heFJvdGF0aW9uLCBsYWJlbFJvdGF0aW9uKSk7XG4gICAgfVxuICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IGxhYmVsUm90YXRpb247XG4gIH1cbiAgYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFt0aGlzXSk7XG4gIH1cbiAgYmVmb3JlRml0KCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsIFt0aGlzXSk7XG4gIH1cbiAgZml0KCkge1xuICAgIGNvbnN0IG1pblNpemUgPSB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgY29uc3Qge2NoYXJ0LCBvcHRpb25zOiB7dGlja3M6IHRpY2tPcHRzLCB0aXRsZTogdGl0bGVPcHRzLCBncmlkOiBncmlkT3B0c319ID0gdGhpcztcbiAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5faXNWaXNpYmxlKCk7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoZGlzcGxheSkge1xuICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSBnZXRUaXRsZUhlaWdodCh0aXRsZU9wdHMsIGNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIG1pblNpemUud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICBtaW5TaXplLmhlaWdodCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgbWluU2l6ZS53aWR0aCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgdGhpcy50aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qge2ZpcnN0LCBsYXN0LCB3aWRlc3QsIGhpZ2hlc3R9ID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCB0aWNrUGFkZGluZyA9IHRpY2tPcHRzLnBhZGRpbmcgKiAyO1xuICAgICAgICBjb25zdCBhbmdsZVJhZGlhbnMgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gdGlja09wdHMubWlycm9yID8gMCA6IHNpbiAqIHdpZGVzdC53aWR0aCArIGNvcyAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIG1pblNpemUuaGVpZ2h0ICsgbGFiZWxIZWlnaHQgKyB0aWNrUGFkZGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbGFiZWxXaWR0aCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBjb3MgKiB3aWRlc3Qud2lkdGggKyBzaW4gKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICBtaW5TaXplLndpZHRoID0gTWF0aC5taW4odGhpcy5tYXhXaWR0aCwgbWluU2l6ZS53aWR0aCArIGxhYmVsV2lkdGggKyB0aWNrUGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9oYW5kbGVNYXJnaW5zKCk7XG4gICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LndpZHRoIC0gdGhpcy5fbWFyZ2lucy5sZWZ0IC0gdGhpcy5fbWFyZ2lucy5yaWdodDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2lkdGggPSBtaW5TaXplLndpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLl9sZW5ndGggPSBjaGFydC5oZWlnaHQgLSB0aGlzLl9tYXJnaW5zLnRvcCAtIHRoaXMuX21hcmdpbnMuYm90dG9tO1xuICAgIH1cbiAgfVxuICBfY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpIHtcbiAgICBjb25zdCB7dGlja3M6IHthbGlnbiwgcGFkZGluZ30sIHBvc2l0aW9ufSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBpc1JvdGF0ZWQgPSB0aGlzLmxhYmVsUm90YXRpb24gIT09IDA7XG4gICAgY29uc3QgbGFiZWxzQmVsb3dUaWNrcyA9IHBvc2l0aW9uICE9PSAndG9wJyAmJiB0aGlzLmF4aXMgPT09ICd4JztcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgY29uc3Qgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gdGhpcy5sZWZ0O1xuICAgICAgY29uc3Qgb2Zmc2V0UmlnaHQgPSB0aGlzLnJpZ2h0IC0gdGhpcy5nZXRQaXhlbEZvclRpY2sodGhpcy50aWNrcy5sZW5ndGggLSAxKTtcbiAgICAgIGxldCBwYWRkaW5nTGVmdCA9IDA7XG4gICAgICBsZXQgcGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgIGlmIChpc1JvdGF0ZWQpIHtcbiAgICAgICAgaWYgKGxhYmVsc0JlbG93VGlja3MpIHtcbiAgICAgICAgICBwYWRkaW5nTGVmdCA9IGNvcyAqIGZpcnN0LndpZHRoO1xuICAgICAgICAgIHBhZGRpbmdSaWdodCA9IHNpbiAqIGxhc3QuaGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gc2luICogZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGNvcyAqIGxhc3Qud2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aDtcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoIC8gMjtcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aCAvIDI7XG4gICAgICB9XG4gICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gTWF0aC5tYXgoKHBhZGRpbmdMZWZ0IC0gb2Zmc2V0TGVmdCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0TGVmdCksIDApO1xuICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heCgocGFkZGluZ1JpZ2h0IC0gb2Zmc2V0UmlnaHQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldFJpZ2h0KSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQgLyAyO1xuICAgICAgbGV0IHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQgLyAyO1xuICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHBhZGRpbmdUb3AgPSAwO1xuICAgICAgICBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0O1xuICAgICAgICBwYWRkaW5nQm90dG9tID0gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHBhZGRpbmdUb3AgKyBwYWRkaW5nO1xuICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gcGFkZGluZ0JvdHRvbSArIHBhZGRpbmc7XG4gICAgfVxuICB9XG4gIF9oYW5kbGVNYXJnaW5zKCkge1xuICAgIGlmICh0aGlzLl9tYXJnaW5zKSB7XG4gICAgICB0aGlzLl9tYXJnaW5zLmxlZnQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdMZWZ0LCB0aGlzLl9tYXJnaW5zLmxlZnQpO1xuICAgICAgdGhpcy5fbWFyZ2lucy50b3AgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdUb3AsIHRoaXMuX21hcmdpbnMudG9wKTtcbiAgICAgIHRoaXMuX21hcmdpbnMucmlnaHQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdSaWdodCwgdGhpcy5fbWFyZ2lucy5yaWdodCk7XG4gICAgICB0aGlzLl9tYXJnaW5zLmJvdHRvbSA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0JvdHRvbSwgdGhpcy5fbWFyZ2lucy5ib3R0b20pO1xuICAgIH1cbiAgfVxuICBhZnRlckZpdCgpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJGaXQsIFt0aGlzXSk7XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIGNvbnN0IHtheGlzLCBwb3NpdGlvbn0gPSB0aGlzLm9wdGlvbnM7XG4gICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgYXhpcyA9PT0gJ3gnO1xuICB9XG4gIGlzRnVsbFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5mdWxsU2l6ZTtcbiAgfVxuICBfY29udmVydFRpY2tzVG9MYWJlbHModGlja3MpIHtcbiAgICB0aGlzLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgIHRoaXMuZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZih0aWNrc1tpXS5sYWJlbCkpIHtcbiAgICAgICAgdGlja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICBpbGVuLS07XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICB9XG4gIF9nZXRMYWJlbFNpemVzKCkge1xuICAgIGxldCBsYWJlbFNpemVzID0gdGhpcy5fbGFiZWxTaXplcztcbiAgICBpZiAoIWxhYmVsU2l6ZXMpIHtcbiAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aGlzLm9wdGlvbnMudGlja3Muc2FtcGxlU2l6ZTtcbiAgICAgIGxldCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICBpZiAoc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICB0aWNrcyA9IHNhbXBsZSh0aWNrcywgc2FtcGxlU2l6ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IHRoaXMuX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCB0aWNrcy5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWxTaXplcztcbiAgfVxuICBfY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIGxlbmd0aCkge1xuICAgIGNvbnN0IHtjdHgsIF9sb25nZXN0VGV4dENhY2hlOiBjYWNoZXN9ID0gdGhpcztcbiAgICBjb25zdCB3aWR0aHMgPSBbXTtcbiAgICBjb25zdCBoZWlnaHRzID0gW107XG4gICAgbGV0IHdpZGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgbGV0IGhpZ2hlc3RMYWJlbFNpemUgPSAwO1xuICAgIGxldCBpLCBqLCBqbGVuLCBsYWJlbCwgdGlja0ZvbnQsIGZvbnRTdHJpbmcsIGNhY2hlLCBsaW5lSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBuZXN0ZWRMYWJlbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIGxhYmVsID0gdGlja3NbaV0ubGFiZWw7XG4gICAgICB0aWNrRm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICBjdHguZm9udCA9IGZvbnRTdHJpbmcgPSB0aWNrRm9udC5zdHJpbmc7XG4gICAgICBjYWNoZSA9IGNhY2hlc1tmb250U3RyaW5nXSA9IGNhY2hlc1tmb250U3RyaW5nXSB8fCB7ZGF0YToge30sIGdjOiBbXX07XG4gICAgICBsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcbiAgICAgIHdpZHRoID0gaGVpZ2h0ID0gMDtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZihsYWJlbCkgJiYgIWlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBsYWJlbCk7XG4gICAgICAgIGhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGpsZW4gPSBsYWJlbC5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcbiAgICAgICAgICBuZXN0ZWRMYWJlbCA9IGxhYmVsW2pdO1xuICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihuZXN0ZWRMYWJlbCkgJiYgIWlzQXJyYXkobmVzdGVkTGFiZWwpKSB7XG4gICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbmVzdGVkTGFiZWwpO1xuICAgICAgICAgICAgaGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aWR0aHMucHVzaCh3aWR0aCk7XG4gICAgICBoZWlnaHRzLnB1c2goaGVpZ2h0KTtcbiAgICAgIHdpZGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KHdpZHRoLCB3aWRlc3RMYWJlbFNpemUpO1xuICAgICAgaGlnaGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KGhlaWdodCwgaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgfVxuICAgIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcbiAgICBjb25zdCB3aWRlc3QgPSB3aWR0aHMuaW5kZXhPZih3aWRlc3RMYWJlbFNpemUpO1xuICAgIGNvbnN0IGhpZ2hlc3QgPSBoZWlnaHRzLmluZGV4T2YoaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgY29uc3QgdmFsdWVBdCA9IChpZHgpID0+ICh7d2lkdGg6IHdpZHRoc1tpZHhdIHx8IDAsIGhlaWdodDogaGVpZ2h0c1tpZHhdIHx8IDB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3Q6IHZhbHVlQXQoMCksXG4gICAgICBsYXN0OiB2YWx1ZUF0KGxlbmd0aCAtIDEpLFxuICAgICAgd2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG4gICAgICBoaWdoZXN0OiB2YWx1ZUF0KGhpZ2hlc3QpLFxuICAgICAgd2lkdGhzLFxuICAgICAgaGVpZ2h0cyxcbiAgICB9O1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHt9XG4gIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgfVxuICBnZXRQaXhlbEZvckRlY2ltYWwoZGVjaW1hbCkge1xuICAgIGlmICh0aGlzLl9yZXZlcnNlUGl4ZWxzKSB7XG4gICAgICBkZWNpbWFsID0gMSAtIGRlY2ltYWw7XG4gICAgfVxuICAgIGNvbnN0IHBpeGVsID0gdGhpcy5fc3RhcnRQaXhlbCArIGRlY2ltYWwgKiB0aGlzLl9sZW5ndGg7XG4gICAgcmV0dXJuIF9pbnQxNlJhbmdlKHRoaXMuX2FsaWduVG9QaXhlbHMgPyBfYWxpZ25QaXhlbCh0aGlzLmNoYXJ0LCBwaXhlbCwgMCkgOiBwaXhlbCk7XG4gIH1cbiAgZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSB7XG4gICAgY29uc3QgZGVjaW1hbCA9IChwaXhlbCAtIHRoaXMuX3N0YXJ0UGl4ZWwpIC8gdGhpcy5fbGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9yZXZlcnNlUGl4ZWxzID8gMSAtIGRlY2ltYWwgOiBkZWNpbWFsO1xuICB9XG4gIGdldEJhc2VQaXhlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICB9XG4gIGdldEJhc2VWYWx1ZSgpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcztcbiAgICByZXR1cm4gbWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDpcbiAgICAgIG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6XG4gICAgICAwO1xuICB9XG4gIGdldENvbnRleHQoaW5kZXgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3MgfHwgW107XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRpY2sgPSB0aWNrc1tpbmRleF07XG4gICAgICByZXR1cm4gdGljay4kY29udGV4dCB8fFxuXHRcdFx0XHQodGljay4kY29udGV4dCA9IGNyZWF0ZVRpY2tDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgdGljaykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fFxuXHRcdFx0KHRoaXMuJGNvbnRleHQgPSBjcmVhdGVTY2FsZUNvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMpKTtcbiAgfVxuICBfdGlja1NpemUoKSB7XG4gICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3Qgcm90ID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgY29uc3QgY29zID0gTWF0aC5hYnMoTWF0aC5jb3Mocm90KSk7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4ocm90KSk7XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBjb25zdCBwYWRkaW5nID0gb3B0aW9uVGlja3MuYXV0b1NraXBQYWRkaW5nIHx8IDA7XG4gICAgY29uc3QgdyA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLndpZGVzdC53aWR0aCArIHBhZGRpbmcgOiAwO1xuICAgIGNvbnN0IGggPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIHBhZGRpbmcgOiAwO1xuICAgIHJldHVybiB0aGlzLmlzSG9yaXpvbnRhbCgpXG4gICAgICA/IGggKiBjb3MgPiB3ICogc2luID8gdyAvIGNvcyA6IGggLyBzaW5cbiAgICAgIDogaCAqIHNpbiA8IHcgKiBjb3MgPyBoIC8gY29zIDogdyAvIHNpbjtcbiAgfVxuICBfaXNWaXNpYmxlKCkge1xuICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLm9wdGlvbnMuZGlzcGxheTtcbiAgICBpZiAoZGlzcGxheSAhPT0gJ2F1dG8nKSB7XG4gICAgICByZXR1cm4gISFkaXNwbGF5O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpLmxlbmd0aCA+IDA7XG4gIH1cbiAgX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge2dyaWQsIHBvc2l0aW9ufSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZ3JpZC5vZmZzZXQ7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3QgdGlja3NMZW5ndGggPSB0aWNrcy5sZW5ndGggKyAob2Zmc2V0ID8gMSA6IDApO1xuICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZCk7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCBib3JkZXJPcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXJPcHRzLmRyYXdCb3JkZXIgPyBib3JkZXJPcHRzLmJvcmRlcldpZHRoIDogMDtcbiAgICBjb25zdCBheGlzSGFsZldpZHRoID0gYXhpc1dpZHRoIC8gMjtcbiAgICBjb25zdCBhbGlnbkJvcmRlclZhbHVlID0gZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICAgIHJldHVybiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIGF4aXNXaWR0aCk7XG4gICAgfTtcbiAgICBsZXQgYm9yZGVyVmFsdWUsIGksIGxpbmVWYWx1ZSwgYWxpZ25lZExpbmVWYWx1ZTtcbiAgICBsZXQgdHgxLCB0eTEsIHR4MiwgdHkyLCB4MSwgeTEsIHgyLCB5MjtcbiAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5ib3R0b20pO1xuICAgICAgdHkxID0gdGhpcy5ib3R0b20gLSB0bDtcbiAgICAgIHR5MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHkxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEudG9wKSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnRvcCk7XG4gICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICB5MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmJvdHRvbSkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgdHkyID0gdGhpcy50b3AgKyB0bDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnJpZ2h0KTtcbiAgICAgIHR4MSA9IHRoaXMucmlnaHQgLSB0bDtcbiAgICAgIHR4MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHgxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEubGVmdCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMubGVmdCk7XG4gICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgeDIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5yaWdodCkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHgxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgdHgyID0gdGhpcy5sZWZ0ICsgdGw7XG4gICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgMC41KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eTIgPSB0eTEgKyB0bDtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHR4MSA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR4MiA9IHR4MSAtIHRsO1xuICAgICAgeDEgPSBjaGFydEFyZWEubGVmdDtcbiAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgIH1cbiAgICBjb25zdCBsaW1pdCA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCwgdGlja3NMZW5ndGgpO1xuICAgIGNvbnN0IHN0ZXAgPSBNYXRoLm1heCgxLCBNYXRoLmNlaWwodGlja3NMZW5ndGggLyBsaW1pdCkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aWNrc0xlbmd0aDsgaSArPSBzdGVwKSB7XG4gICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgY29uc3QgbGluZVdpZHRoID0gb3B0c0F0SW5kZXgubGluZVdpZHRoO1xuICAgICAgY29uc3QgbGluZUNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICBjb25zdCBib3JkZXJEYXNoID0gZ3JpZC5ib3JkZXJEYXNoIHx8IFtdO1xuICAgICAgY29uc3QgYm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICBjb25zdCB0aWNrV2lkdGggPSBvcHRzQXRJbmRleC50aWNrV2lkdGg7XG4gICAgICBjb25zdCB0aWNrQ29sb3IgPSBvcHRzQXRJbmRleC50aWNrQ29sb3I7XG4gICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoIHx8IFtdO1xuICAgICAgY29uc3QgdGlja0JvcmRlckRhc2hPZmZzZXQgPSBvcHRzQXRJbmRleC50aWNrQm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGxpbmVWYWx1ZSA9IGdldFBpeGVsRm9yR3JpZExpbmUodGhpcywgaSwgb2Zmc2V0KTtcbiAgICAgIGlmIChsaW5lVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGFsaWduZWRMaW5lVmFsdWUgPSBfYWxpZ25QaXhlbChjaGFydCwgbGluZVZhbHVlLCBsaW5lV2lkdGgpO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICB0eDEgPSB0eDIgPSB4MSA9IHgyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5MSA9IHR5MiA9IHkxID0geTIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgfVxuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIHR4MSxcbiAgICAgICAgdHkxLFxuICAgICAgICB0eDIsXG4gICAgICAgIHR5MixcbiAgICAgICAgeDEsXG4gICAgICAgIHkxLFxuICAgICAgICB4MixcbiAgICAgICAgeTIsXG4gICAgICAgIHdpZHRoOiBsaW5lV2lkdGgsXG4gICAgICAgIGNvbG9yOiBsaW5lQ29sb3IsXG4gICAgICAgIGJvcmRlckRhc2gsXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgIHRpY2tXaWR0aCxcbiAgICAgICAgdGlja0NvbG9yLFxuICAgICAgICB0aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgdGlja0JvcmRlckRhc2hPZmZzZXQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fdGlja3NMZW5ndGggPSB0aWNrc0xlbmd0aDtcbiAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBfY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHtwb3NpdGlvbiwgdGlja3M6IG9wdGlvblRpY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3Qge2FsaWduLCBjcm9zc0FsaWduLCBwYWRkaW5nLCBtaXJyb3J9ID0gb3B0aW9uVGlja3M7XG4gICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpO1xuICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgIGNvbnN0IGhUaWNrQW5kUGFkZGluZyA9IG1pcnJvciA/IC1wYWRkaW5nIDogdGlja0FuZFBhZGRpbmc7XG4gICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcbiAgICBsZXQgdGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgeSA9IHRoaXMuYm90dG9tIC0gaFRpY2tBbmRQYWRkaW5nO1xuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICB5ID0gdGhpcy50b3AgKyBoVGlja0FuZFBhZGRpbmc7XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICB4ID0gcmV0Lng7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgeCA9IHJldC54O1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHkgPSAoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIpICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIHkgPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgIH1cbiAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICB4ID0gKChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyKSAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICB4ID0gdGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkudGV4dEFsaWduO1xuICAgIH1cbiAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgdGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICB0ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICBsYWJlbCA9IHRpY2subGFiZWw7XG4gICAgICBjb25zdCBvcHRzQXRJbmRleCA9IG9wdGlvblRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGkpKTtcbiAgICAgIHBpeGVsID0gdGhpcy5nZXRQaXhlbEZvclRpY2soaSkgKyBvcHRpb25UaWNrcy5sYWJlbE9mZnNldDtcbiAgICAgIGZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgbGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodDtcbiAgICAgIGxpbmVDb3VudCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwubGVuZ3RoIDogMTtcbiAgICAgIGNvbnN0IGhhbGZDb3VudCA9IGxpbmVDb3VudCAvIDI7XG4gICAgICBjb25zdCBjb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlQ29sb3I7XG4gICAgICBjb25zdCBzdHJva2VXaWR0aCA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VXaWR0aDtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgeCA9IHBpeGVsO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1saW5lQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1sYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQgKyBsaW5lSGVpZ2h0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC0gbGluZUNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgIHRleHRPZmZzZXQgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSBwaXhlbDtcbiAgICAgICAgdGV4dE9mZnNldCA9ICgxIC0gbGluZUNvdW50KSAqIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgfVxuICAgICAgbGV0IGJhY2tkcm9wO1xuICAgICAgaWYgKG9wdHNBdEluZGV4LnNob3dMYWJlbEJhY2tkcm9wKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsUGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBsYWJlbFNpemVzLmhlaWdodHNbaV07XG4gICAgICAgIGNvbnN0IHdpZHRoID0gbGFiZWxTaXplcy53aWR0aHNbaV07XG4gICAgICAgIGxldCB0b3AgPSB5ICsgdGV4dE9mZnNldCAtIGxhYmVsUGFkZGluZy50b3A7XG4gICAgICAgIGxldCBsZWZ0ID0geCAtIGxhYmVsUGFkZGluZy5sZWZ0O1xuICAgICAgICBzd2l0Y2ggKHRleHRCYXNlbGluZSkge1xuICAgICAgICBjYXNlICdtaWRkbGUnOlxuICAgICAgICAgIHRvcCAtPSBoZWlnaHQgLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0ZXh0QWxpZ24pIHtcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICBsZWZ0IC09IHdpZHRoIC8gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYmFja2Ryb3AgPSB7XG4gICAgICAgICAgbGVmdCxcbiAgICAgICAgICB0b3AsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoICsgbGFiZWxQYWRkaW5nLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgbGFiZWxQYWRkaW5nLmhlaWdodCxcbiAgICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguYmFja2Ryb3BDb2xvcixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICByb3RhdGlvbixcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGZvbnQsXG4gICAgICAgIGNvbG9yLFxuICAgICAgICBzdHJva2VDb2xvcixcbiAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgIHRleHRPZmZzZXQsXG4gICAgICAgIHRleHRBbGlnbixcbiAgICAgICAgdGV4dEJhc2VsaW5lLFxuICAgICAgICB0cmFuc2xhdGlvbjogW3gsIHldLFxuICAgICAgICBiYWNrZHJvcCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cbiAgX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKSB7XG4gICAgY29uc3Qge3Bvc2l0aW9uLCB0aWNrc30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gICAgbGV0IGFsaWduID0gJ2NlbnRlcic7XG4gICAgaWYgKHRpY2tzLmFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICBhbGlnbiA9ICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnZW5kJykge1xuICAgICAgYWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4gYWxpZ247XG4gIH1cbiAgX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpIHtcbiAgICBjb25zdCB7cG9zaXRpb24sIHRpY2tzOiB7Y3Jvc3NBbGlnbiwgbWlycm9yLCBwYWRkaW5nfX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICBjb25zdCB3aWRlc3QgPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICBsZXQgdGV4dEFsaWduO1xuICAgIGxldCB4O1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgIHggPSB0aGlzLnJpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggKz0gKHdpZGVzdCAvIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgeCArPSB3aWRlc3Q7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB0aGlzLnJpZ2h0IC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCAtPSAod2lkZXN0IC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgIHggPSB0aGlzLmxlZnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgIHggPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggLT0gKHdpZGVzdCAvIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICB4IC09IHdpZGVzdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHRoaXMubGVmdCArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCArPSB3aWRlc3QgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgeCA9IHRoaXMucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICB9XG4gICAgcmV0dXJuIHt0ZXh0QWxpZ24sIHh9O1xuICB9XG4gIF9jb21wdXRlTGFiZWxBcmVhKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudGlja3MubWlycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIHt0b3A6IDAsIGxlZnQ6IHRoaXMubGVmdCwgYm90dG9tOiBjaGFydC5oZWlnaHQsIHJpZ2h0OiB0aGlzLnJpZ2h0fTtcbiAgICB9IGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICByZXR1cm4ge3RvcDogdGhpcy50b3AsIGxlZnQ6IDAsIGJvdHRvbTogdGhpcy5ib3R0b20sIHJpZ2h0OiBjaGFydC53aWR0aH07XG4gICAgfVxuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHtjdHgsIG9wdGlvbnM6IHtiYWNrZ3JvdW5kQ29sb3J9LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHR9ID0gdGhpcztcbiAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgIGN0eC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0TGluZVdpZHRoRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhZ3JpZC5kaXNwbGF5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGNvbnN0IGluZGV4ID0gdGlja3MuZmluZEluZGV4KHQgPT4gdC52YWx1ZSA9PT0gdmFsdWUpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBjb25zdCBvcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgcmV0dXJuIG9wdHMubGluZVdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBkcmF3R3JpZChjaGFydEFyZWEpIHtcbiAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLl9ncmlkTGluZUl0ZW1zIHx8ICh0aGlzLl9ncmlkTGluZUl0ZW1zID0gdGhpcy5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgY29uc3QgZHJhd0xpbmUgPSAocDEsIHAyLCBzdHlsZSkgPT4ge1xuICAgICAgaWYgKCFzdHlsZS53aWR0aCB8fCAhc3R5bGUuY29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlLmNvbG9yO1xuICAgICAgY3R4LnNldExpbmVEYXNoKHN0eWxlLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gc3R5bGUuYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XG4gICAgICBjdHgubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBpZiAoZ3JpZC5kcmF3T25DaGFydEFyZWEpIHtcbiAgICAgICAgICBkcmF3TGluZShcbiAgICAgICAgICAgIHt4OiBpdGVtLngxLCB5OiBpdGVtLnkxfSxcbiAgICAgICAgICAgIHt4OiBpdGVtLngyLCB5OiBpdGVtLnkyfSxcbiAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncmlkLmRyYXdUaWNrcykge1xuICAgICAgICAgIGRyYXdMaW5lKFxuICAgICAgICAgICAge3g6IGl0ZW0udHgxLCB5OiBpdGVtLnR5MX0sXG4gICAgICAgICAgICB7eDogaXRlbS50eDIsIHk6IGl0ZW0udHkyfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY29sb3I6IGl0ZW0udGlja0NvbG9yLFxuICAgICAgICAgICAgICB3aWR0aDogaXRlbS50aWNrV2lkdGgsXG4gICAgICAgICAgICAgIGJvcmRlckRhc2g6IGl0ZW0udGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IGl0ZW0udGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRyYXdCb3JkZXIoKSB7XG4gICAgY29uc3Qge2NoYXJ0LCBjdHgsIG9wdGlvbnM6IHtncmlkfX0gPSB0aGlzO1xuICAgIGNvbnN0IGJvcmRlck9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGF4aXNXaWR0aCA9IGdyaWQuZHJhd0JvcmRlciA/IGJvcmRlck9wdHMuYm9yZGVyV2lkdGggOiAwO1xuICAgIGlmICghYXhpc1dpZHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhc3RMaW5lV2lkdGggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KDApKS5saW5lV2lkdGg7XG4gICAgY29uc3QgYm9yZGVyVmFsdWUgPSB0aGlzLl9ib3JkZXJWYWx1ZTtcbiAgICBsZXQgeDEsIHgyLCB5MSwgeTI7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHgxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMubGVmdCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICB4MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnJpZ2h0LCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgeTEgPSB5MiA9IGJvcmRlclZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB5MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnRvcCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICB5MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmJvdHRvbSwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgIHgxID0geDIgPSBib3JkZXJWYWx1ZTtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyT3B0cy5ib3JkZXJXaWR0aDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBib3JkZXJPcHRzLmJvcmRlckNvbG9yO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGRyYXdMYWJlbHMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgaWYgKCFvcHRpb25UaWNrcy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGFyZWEgPSB0aGlzLl9jb21wdXRlTGFiZWxBcmVhKCk7XG4gICAgaWYgKGFyZWEpIHtcbiAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fbGFiZWxJdGVtcyB8fCAodGhpcy5fbGFiZWxJdGVtcyA9IHRoaXMuX2NvbXB1dGVMYWJlbEl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGNvbnN0IHRpY2tGb250ID0gaXRlbS5mb250O1xuICAgICAgY29uc3QgbGFiZWwgPSBpdGVtLmxhYmVsO1xuICAgICAgaWYgKGl0ZW0uYmFja2Ryb3ApIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGl0ZW0uYmFja2Ryb3AuY29sb3I7XG4gICAgICAgIGN0eC5maWxsUmVjdChpdGVtLmJhY2tkcm9wLmxlZnQsIGl0ZW0uYmFja2Ryb3AudG9wLCBpdGVtLmJhY2tkcm9wLndpZHRoLCBpdGVtLmJhY2tkcm9wLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBsZXQgeSA9IGl0ZW0udGV4dE9mZnNldDtcbiAgICAgIHJlbmRlclRleHQoY3R4LCBsYWJlbCwgMCwgeSwgdGlja0ZvbnQsIGl0ZW0pO1xuICAgIH1cbiAgICBpZiAoYXJlYSkge1xuICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbiAgfVxuICBkcmF3VGl0bGUoKSB7XG4gICAgY29uc3Qge2N0eCwgb3B0aW9uczoge3Bvc2l0aW9uLCB0aXRsZSwgcmV2ZXJzZX19ID0gdGhpcztcbiAgICBpZiAoIXRpdGxlLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZm9udCA9IHRvRm9udCh0aXRsZS5mb250KTtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlLnBhZGRpbmcpO1xuICAgIGNvbnN0IGFsaWduID0gdGl0bGUuYWxpZ247XG4gICAgbGV0IG9mZnNldCA9IGZvbnQubGluZUhlaWdodCAvIDI7XG4gICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBwb3NpdGlvbiA9PT0gJ2NlbnRlcicgfHwgaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICBvZmZzZXQgKz0gcGFkZGluZy5ib3R0b207XG4gICAgICBpZiAoaXNBcnJheSh0aXRsZS50ZXh0KSkge1xuICAgICAgICBvZmZzZXQgKz0gZm9udC5saW5lSGVpZ2h0ICogKHRpdGxlLnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCArPSBwYWRkaW5nLnRvcDtcbiAgICB9XG4gICAgY29uc3Qge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259ID0gdGl0bGVBcmdzKHRoaXMsIG9mZnNldCwgcG9zaXRpb24sIGFsaWduKTtcbiAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGUudGV4dCwgMCwgMCwgZm9udCwge1xuICAgICAgY29sb3I6IHRpdGxlLmNvbG9yLFxuICAgICAgbWF4V2lkdGgsXG4gICAgICByb3RhdGlvbixcbiAgICAgIHRleHRBbGlnbjogdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpLFxuICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgIHRyYW5zbGF0aW9uOiBbdGl0bGVYLCB0aXRsZVldLFxuICAgIH0pO1xuICB9XG4gIGRyYXcoY2hhcnRBcmVhKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gIH1cbiAgX2xheWVycygpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHR6ID0gb3B0cy50aWNrcyAmJiBvcHRzLnRpY2tzLnogfHwgMDtcbiAgICBjb25zdCBneiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZ3JpZCAmJiBvcHRzLmdyaWQueiwgLTEpO1xuICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgdGhpcy5kcmF3ICE9PSBTY2FsZS5wcm90b3R5cGUuZHJhdykge1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHo6IHR6LFxuICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKSA9PiB7XG4gICAgICAgICAgdGhpcy5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgIH1dO1xuICAgIH1cbiAgICByZXR1cm4gW3tcbiAgICAgIHo6IGd6LFxuICAgICAgZHJhdzogKGNoYXJ0QXJlYSkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICB6OiBneiArIDEsXG4gICAgICBkcmF3OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHo6IHR6LFxuICAgICAgZHJhdzogKGNoYXJ0QXJlYSkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICAgIH1cbiAgICB9XTtcbiAgfVxuICBnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKSB7XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCBheGlzSUQgPSB0aGlzLmF4aXMgKyAnQXhpc0lEJztcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgICBpZiAobWV0YVtheGlzSURdID09PSB0aGlzLmlkICYmICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIF9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGluZGV4KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgIHJldHVybiB0b0ZvbnQob3B0cy5mb250KTtcbiAgfVxuICBfbWF4RGlnaXRzKCkge1xuICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5saW5lSGVpZ2h0O1xuICAgIHJldHVybiAodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodCkgLyBmb250U2l6ZTtcbiAgfVxufVxuXG5jbGFzcyBUeXBlZFJlZ2lzdHJ5IHtcbiAgY29uc3RydWN0b3IodHlwZSwgc2NvcGUsIG92ZXJyaWRlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5vdmVycmlkZSA9IG92ZXJyaWRlO1xuICAgIHRoaXMuaXRlbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIGlzRm9yVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZi5jYWxsKHRoaXMudHlwZS5wcm90b3R5cGUsIHR5cGUucHJvdG90eXBlKTtcbiAgfVxuICByZWdpc3RlcihpdGVtKSB7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSk7XG4gICAgbGV0IHBhcmVudFNjb3BlO1xuICAgIGlmIChpc0lDaGFydENvbXBvbmVudChwcm90bykpIHtcbiAgICAgIHBhcmVudFNjb3BlID0gdGhpcy5yZWdpc3Rlcihwcm90byk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlICsgJy4nICsgaWQ7XG4gICAgaWYgKCFpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGFzcyBkb2VzIG5vdCBoYXZlIGlkOiAnICsgaXRlbSk7XG4gICAgfVxuICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH1cbiAgICBpdGVtc1tpZF0gPSBpdGVtO1xuICAgIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKTtcbiAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgZGVmYXVsdHMub3ZlcnJpZGUoaXRlbS5pZCwgaXRlbS5vdmVycmlkZXMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcGU7XG4gIH1cbiAgZ2V0KGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNbaWRdO1xuICB9XG4gIHVucmVnaXN0ZXIoaXRlbSkge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgZGVsZXRlIGl0ZW1zW2lkXTtcbiAgICB9XG4gICAgaWYgKHNjb3BlICYmIGlkIGluIGRlZmF1bHRzW3Njb3BlXSkge1xuICAgICAgZGVsZXRlIGRlZmF1bHRzW3Njb3BlXVtpZF07XG4gICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICBkZWxldGUgb3ZlcnJpZGVzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKSB7XG4gIGNvbnN0IGl0ZW1EZWZhdWx0cyA9IG1lcmdlKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICBwYXJlbnRTY29wZSA/IGRlZmF1bHRzLmdldChwYXJlbnRTY29wZSkgOiB7fSxcbiAgICBkZWZhdWx0cy5nZXQoc2NvcGUpLFxuICAgIGl0ZW0uZGVmYXVsdHNcbiAgXSk7XG4gIGRlZmF1bHRzLnNldChzY29wZSwgaXRlbURlZmF1bHRzKTtcbiAgaWYgKGl0ZW0uZGVmYXVsdFJvdXRlcykge1xuICAgIHJvdXRlRGVmYXVsdHMoc2NvcGUsIGl0ZW0uZGVmYXVsdFJvdXRlcyk7XG4gIH1cbiAgaWYgKGl0ZW0uZGVzY3JpcHRvcnMpIHtcbiAgICBkZWZhdWx0cy5kZXNjcmliZShzY29wZSwgaXRlbS5kZXNjcmlwdG9ycyk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJvdXRlRGVmYXVsdHMoc2NvcGUsIHJvdXRlcykge1xuICBPYmplY3Qua2V5cyhyb3V0ZXMpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgIGNvbnN0IHByb3BlcnR5UGFydHMgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHNvdXJjZU5hbWUgPSBwcm9wZXJ0eVBhcnRzLnBvcCgpO1xuICAgIGNvbnN0IHNvdXJjZVNjb3BlID0gW3Njb3BlXS5jb25jYXQocHJvcGVydHlQYXJ0cykuam9pbignLicpO1xuICAgIGNvbnN0IHBhcnRzID0gcm91dGVzW3Byb3BlcnR5XS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHRhcmdldE5hbWUgPSBwYXJ0cy5wb3AoKTtcbiAgICBjb25zdCB0YXJnZXRTY29wZSA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgICBkZWZhdWx0cy5yb3V0ZShzb3VyY2VTY29wZSwgc291cmNlTmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSB7XG4gIHJldHVybiAnaWQnIGluIHByb3RvICYmICdkZWZhdWx0cycgaW4gcHJvdG87XG59XG5cbmNsYXNzIFJlZ2lzdHJ5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250cm9sbGVycyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KERhdGFzZXRDb250cm9sbGVyLCAnZGF0YXNldHMnLCB0cnVlKTtcbiAgICB0aGlzLmVsZW1lbnRzID0gbmV3IFR5cGVkUmVnaXN0cnkoRWxlbWVudCwgJ2VsZW1lbnRzJyk7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IFR5cGVkUmVnaXN0cnkoT2JqZWN0LCAncGx1Z2lucycpO1xuICAgIHRoaXMuc2NhbGVzID0gbmV3IFR5cGVkUmVnaXN0cnkoU2NhbGUsICdzY2FsZXMnKTtcbiAgICB0aGlzLl90eXBlZFJlZ2lzdHJpZXMgPSBbdGhpcy5jb250cm9sbGVycywgdGhpcy5zY2FsZXMsIHRoaXMuZWxlbWVudHNdO1xuICB9XG4gIGFkZCguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzKTtcbiAgfVxuICByZW1vdmUoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzKTtcbiAgfVxuICBhZGRDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgfVxuICBhZGRFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgfVxuICBhZGRQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gIH1cbiAgYWRkU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgfVxuICBnZXRDb250cm9sbGVyKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5jb250cm9sbGVycywgJ2NvbnRyb2xsZXInKTtcbiAgfVxuICBnZXRFbGVtZW50KGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5lbGVtZW50cywgJ2VsZW1lbnQnKTtcbiAgfVxuICBnZXRQbHVnaW4oaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnBsdWdpbnMsICdwbHVnaW4nKTtcbiAgfVxuICBnZXRTY2FsZShpZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuc2NhbGVzLCAnc2NhbGUnKTtcbiAgfVxuICByZW1vdmVDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICB9XG4gIHJlbW92ZUVsZW1lbnRzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gIH1cbiAgcmVtb3ZlUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gIH1cbiAgcmVtb3ZlU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICB9XG4gIF9lYWNoKG1ldGhvZCwgYXJncywgdHlwZWRSZWdpc3RyeSkge1xuICAgIFsuLi5hcmdzXS5mb3JFYWNoKGFyZyA9PiB7XG4gICAgICBjb25zdCByZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShhcmcpO1xuICAgICAgaWYgKHR5cGVkUmVnaXN0cnkgfHwgcmVnLmlzRm9yVHlwZShhcmcpIHx8IChyZWcgPT09IHRoaXMucGx1Z2lucyAmJiBhcmcuaWQpKSB7XG4gICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCByZWcsIGFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYWNoKGFyZywgaXRlbSA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbVJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGl0ZW0pO1xuICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCBpdGVtUmVnLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX2V4ZWMobWV0aG9kLCByZWdpc3RyeSwgY29tcG9uZW50KSB7XG4gICAgY29uc3QgY2FtZWxNZXRob2QgPSBfY2FwaXRhbGl6ZShtZXRob2QpO1xuICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYmVmb3JlJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gICAgcmVnaXN0cnlbbWV0aG9kXShjb21wb25lbnQpO1xuICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYWZ0ZXInICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgfVxuICBfZ2V0UmVnaXN0cnlGb3JUeXBlKHR5cGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3R5cGVkUmVnaXN0cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVnID0gdGhpcy5fdHlwZWRSZWdpc3RyaWVzW2ldO1xuICAgICAgaWYgKHJlZy5pc0ZvclR5cGUodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGx1Z2lucztcbiAgfVxuICBfZ2V0KGlkLCB0eXBlZFJlZ2lzdHJ5LCB0eXBlKSB7XG4gICAgY29uc3QgaXRlbSA9IHR5cGVkUmVnaXN0cnkuZ2V0KGlkKTtcbiAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGlkICsgJ1wiIGlzIG5vdCBhIHJlZ2lzdGVyZWQgJyArIHR5cGUgKyAnLicpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxufVxudmFyIHJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KCk7XG5cbmNsYXNzIFBsdWdpblNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pbml0ID0gW107XG4gIH1cbiAgbm90aWZ5KGNoYXJ0LCBob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICBpZiAoaG9vayA9PT0gJ2JlZm9yZUluaXQnKSB7XG4gICAgICB0aGlzLl9pbml0ID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHRydWUpO1xuICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAnaW5zdGFsbCcpO1xuICAgIH1cbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGZpbHRlciA/IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KS5maWx0ZXIoZmlsdGVyKSA6IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKTtcbiAgICBpZiAoaG9vayA9PT0gJ2FmdGVyRGVzdHJveScpIHtcbiAgICAgIHRoaXMuX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsICdzdG9wJyk7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5faW5pdCwgY2hhcnQsICd1bmluc3RhbGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBfbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncykge1xuICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgIGZvciAoY29uc3QgZGVzY3JpcHRvciBvZiBkZXNjcmlwdG9ycykge1xuICAgICAgY29uc3QgcGx1Z2luID0gZGVzY3JpcHRvci5wbHVnaW47XG4gICAgICBjb25zdCBtZXRob2QgPSBwbHVnaW5baG9va107XG4gICAgICBjb25zdCBwYXJhbXMgPSBbY2hhcnQsIGFyZ3MsIGRlc2NyaXB0b3Iub3B0aW9uc107XG4gICAgICBpZiAoY2FsbGJhY2sobWV0aG9kLCBwYXJhbXMsIHBsdWdpbikgPT09IGZhbHNlICYmIGFyZ3MuY2FuY2VsYWJsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGludmFsaWRhdGUoKSB7XG4gICAgaWYgKCFpc051bGxPclVuZGVmKHRoaXMuX2NhY2hlKSkge1xuICAgICAgdGhpcy5fb2xkQ2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICAgIHRoaXMuX2NhY2hlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBfZGVzY3JpcHRvcnMoY2hhcnQpIHtcbiAgICBpZiAodGhpcy5fY2FjaGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jYWNoZTtcbiAgICB9XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZSA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICB0aGlzLl9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpO1xuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfVxuICBfY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIGFsbCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGNoYXJ0ICYmIGNoYXJ0LmNvbmZpZztcbiAgICBjb25zdCBvcHRpb25zID0gdmFsdWVPckRlZmF1bHQoY29uZmlnLm9wdGlvbnMgJiYgY29uZmlnLm9wdGlvbnMucGx1Z2lucywge30pO1xuICAgIGNvbnN0IHBsdWdpbnMgPSBhbGxQbHVnaW5zKGNvbmZpZyk7XG4gICAgcmV0dXJuIG9wdGlvbnMgPT09IGZhbHNlICYmICFhbGwgPyBbXSA6IGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpO1xuICB9XG4gIF9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpIHtcbiAgICBjb25zdCBwcmV2aW91c0Rlc2NyaXB0b3JzID0gdGhpcy5fb2xkQ2FjaGUgfHwgW107XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZTtcbiAgICBjb25zdCBkaWZmID0gKGEsIGIpID0+IGEuZmlsdGVyKHggPT4gIWIuc29tZSh5ID0+IHgucGx1Z2luLmlkID09PSB5LnBsdWdpbi5pZCkpO1xuICAgIHRoaXMuX25vdGlmeShkaWZmKHByZXZpb3VzRGVzY3JpcHRvcnMsIGRlc2NyaXB0b3JzKSwgY2hhcnQsICdzdG9wJyk7XG4gICAgdGhpcy5fbm90aWZ5KGRpZmYoZGVzY3JpcHRvcnMsIHByZXZpb3VzRGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0YXJ0Jyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFsbFBsdWdpbnMoY29uZmlnKSB7XG4gIGNvbnN0IHBsdWdpbnMgPSBbXTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlZ2lzdHJ5LnBsdWdpbnMuaXRlbXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBwbHVnaW5zLnB1c2gocmVnaXN0cnkuZ2V0UGx1Z2luKGtleXNbaV0pKTtcbiAgfVxuICBjb25zdCBsb2NhbCA9IGNvbmZpZy5wbHVnaW5zIHx8IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGx1Z2luID0gbG9jYWxbaV07XG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuICAgICAgcGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBwbHVnaW5zO1xufVxuZnVuY3Rpb24gZ2V0T3B0cyhvcHRpb25zLCBhbGwpIHtcbiAgaWYgKCFhbGwgJiYgb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGNvbnRleHQgPSBjaGFydC5nZXRDb250ZXh0KCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbaV07XG4gICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgY29uc3Qgb3B0cyA9IGdldE9wdHMob3B0aW9uc1tpZF0sIGFsbCk7XG4gICAgaWYgKG9wdHMgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh7XG4gICAgICBwbHVnaW4sXG4gICAgICBvcHRpb25zOiBwbHVnaW5PcHRzKGNoYXJ0LmNvbmZpZywgcGx1Z2luLCBvcHRzLCBjb250ZXh0KVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwbHVnaW5PcHRzKGNvbmZpZywgcGx1Z2luLCBvcHRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGtleXMgPSBjb25maWcucGx1Z2luU2NvcGVLZXlzKHBsdWdpbik7XG4gIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXMob3B0cywga2V5cyk7XG4gIHJldHVybiBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBbJyddLCB7c2NyaXB0YWJsZTogZmFsc2UsIGluZGV4YWJsZTogZmFsc2UsIGFsbEtleXM6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge307XG4gIGNvbnN0IGRhdGFzZXRPcHRpb25zID0gKG9wdGlvbnMuZGF0YXNldHMgfHwge30pW3R5cGVdIHx8IHt9O1xuICByZXR1cm4gZGF0YXNldE9wdGlvbnMuaW5kZXhBeGlzIHx8IG9wdGlvbnMuaW5kZXhBeGlzIHx8IGRhdGFzZXREZWZhdWx0cy5pbmRleEF4aXMgfHwgJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChpZCwgaW5kZXhBeGlzKSB7XG4gIGxldCBheGlzID0gaWQ7XG4gIGlmIChpZCA9PT0gJ19pbmRleF8nKSB7XG4gICAgYXhpcyA9IGluZGV4QXhpcztcbiAgfSBlbHNlIGlmIChpZCA9PT0gJ192YWx1ZV8nKSB7XG4gICAgYXhpcyA9IGluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuICB9XG4gIHJldHVybiBheGlzO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBpbmRleEF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09IGluZGV4QXhpcyA/ICdfaW5kZXhfJyA6ICdfdmFsdWVfJztcbn1cbmZ1bmN0aW9uIGF4aXNGcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICByZXR1cm4gJ3gnO1xuICB9XG4gIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuICd5JztcbiAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKSB7XG4gIGlmIChpZCA9PT0gJ3gnIHx8IGlkID09PSAneScpIHtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgcmV0dXJuIHNjYWxlT3B0aW9ucy5heGlzIHx8IGF4aXNGcm9tUG9zaXRpb24oc2NhbGVPcHRpb25zLnBvc2l0aW9uKSB8fCBpZC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNoYXJ0RGVmYXVsdHMgPSBvdmVycmlkZXNbY29uZmlnLnR5cGVdIHx8IHtzY2FsZXM6IHt9fTtcbiAgY29uc3QgY29uZmlnU2NhbGVzID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gIGNvbnN0IGNoYXJ0SW5kZXhBeGlzID0gZ2V0SW5kZXhBeGlzKGNvbmZpZy50eXBlLCBvcHRpb25zKTtcbiAgY29uc3QgZmlyc3RJRHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2FsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBPYmplY3Qua2V5cyhjb25maWdTY2FsZXMpLmZvckVhY2goaWQgPT4ge1xuICAgIGNvbnN0IHNjYWxlQ29uZiA9IGNvbmZpZ1NjYWxlc1tpZF07XG4gICAgaWYgKCFpc09iamVjdChzY2FsZUNvbmYpKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcihgSW52YWxpZCBzY2FsZSBjb25maWd1cmF0aW9uIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICB9XG4gICAgaWYgKHNjYWxlQ29uZi5fcHJveHkpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLndhcm4oYElnbm9yaW5nIHJlc29sdmVyIHBhc3NlZCBhcyBvcHRpb25zIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICB9XG4gICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlQ29uZik7XG4gICAgY29uc3QgZGVmYXVsdElkID0gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBjaGFydEluZGV4QXhpcyk7XG4gICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGNoYXJ0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgIGZpcnN0SURzW2F4aXNdID0gZmlyc3RJRHNbYXhpc10gfHwgaWQ7XG4gICAgc2NhbGVzW2lkXSA9IG1lcmdlSWYoT2JqZWN0LmNyZWF0ZShudWxsKSwgW3theGlzfSwgc2NhbGVDb25mLCBkZWZhdWx0U2NhbGVPcHRpb25zW2F4aXNdLCBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJZF1dKTtcbiAgfSk7XG4gIGNvbmZpZy5kYXRhLmRhdGFzZXRzLmZvckVhY2goZGF0YXNldCA9PiB7XG4gICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCBjb25maWcudHlwZTtcbiAgICBjb25zdCBpbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gb3ZlcnJpZGVzW3R5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBkYXRhc2V0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTY2FsZU9wdGlvbnMpLmZvckVhY2goZGVmYXVsdElEID0+IHtcbiAgICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGRlZmF1bHRJRCwgaW5kZXhBeGlzKTtcbiAgICAgIGNvbnN0IGlkID0gZGF0YXNldFtheGlzICsgJ0F4aXNJRCddIHx8IGZpcnN0SURzW2F4aXNdIHx8IGF4aXM7XG4gICAgICBzY2FsZXNbaWRdID0gc2NhbGVzW2lkXSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgbWVyZ2VJZihzY2FsZXNbaWRdLCBbe2F4aXN9LCBjb25maWdTY2FsZXNbaWRdLCBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJRF1dKTtcbiAgICB9KTtcbiAgfSk7XG4gIE9iamVjdC5rZXlzKHNjYWxlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IHNjYWxlID0gc2NhbGVzW2tleV07XG4gICAgbWVyZ2VJZihzY2FsZSwgW2RlZmF1bHRzLnNjYWxlc1tzY2FsZS50eXBlXSwgZGVmYXVsdHMuc2NhbGVdKTtcbiAgfSk7XG4gIHJldHVybiBzY2FsZXM7XG59XG5mdW5jdGlvbiBpbml0T3B0aW9ucyhjb25maWcpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zIHx8IChjb25maWcub3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucy5wbHVnaW5zID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gIG9wdGlvbnMuc2NhbGVzID0gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW5pdERhdGEoZGF0YSkge1xuICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG4gIGRhdGEubGFiZWxzID0gZGF0YS5sYWJlbHMgfHwgW107XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25maWcuZGF0YSA9IGluaXREYXRhKGNvbmZpZy5kYXRhKTtcbiAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgcmV0dXJuIGNvbmZpZztcbn1cbmNvbnN0IGtleUNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3Qga2V5c0NhY2hlZCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGNhY2hlZEtleXMoY2FjaGVLZXksIGdlbmVyYXRlKSB7XG4gIGxldCBrZXlzID0ga2V5Q2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKCFrZXlzKSB7XG4gICAga2V5cyA9IGdlbmVyYXRlKCk7XG4gICAga2V5Q2FjaGUuc2V0KGNhY2hlS2V5LCBrZXlzKTtcbiAgICBrZXlzQ2FjaGVkLmFkZChrZXlzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmNvbnN0IGFkZElmRm91bmQgPSAoc2V0LCBvYmosIGtleSkgPT4ge1xuICBjb25zdCBvcHRzID0gcmVzb2x2ZU9iamVjdEtleShvYmosIGtleSk7XG4gIGlmIChvcHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICBzZXQuYWRkKG9wdHMpO1xuICB9XG59O1xuY2xhc3MgQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX3Njb3BlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcmVzb2x2ZXJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuICBnZXQgcGxhdGZvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbGF0Zm9ybTtcbiAgfVxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnR5cGU7XG4gIH1cbiAgc2V0IHR5cGUodHlwZSkge1xuICAgIHRoaXMuX2NvbmZpZy50eXBlID0gdHlwZTtcbiAgfVxuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmRhdGE7XG4gIH1cbiAgc2V0IGRhdGEoZGF0YSkge1xuICAgIHRoaXMuX2NvbmZpZy5kYXRhID0gaW5pdERhdGEoZGF0YSk7XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5vcHRpb25zO1xuICB9XG4gIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgZ2V0IHBsdWdpbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbHVnaW5zO1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLl9jb25maWc7XG4gICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgfVxuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuX3Njb3BlQ2FjaGUuY2xlYXIoKTtcbiAgICB0aGlzLl9yZXNvbHZlckNhY2hlLmNsZWFyKCk7XG4gIH1cbiAgZGF0YXNldFNjb3BlS2V5cyhkYXRhc2V0VHlwZSkge1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGRhdGFzZXRUeXBlLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgJydcbiAgICAgIF1dKTtcbiAgfVxuICBkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKGRhdGFzZXRUeXBlLCB0cmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb24uJHt0cmFuc2l0aW9ufWAsXG4gICAgICAoKSA9PiBbXG4gICAgICAgIFtcbiAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWAsXG4gICAgICAgICAgYHRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAnJ1xuICAgICAgICBdXG4gICAgICBdKTtcbiAgfVxuICBkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgZWxlbWVudFR5cGUpIHtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0tJHtlbGVtZW50VHlwZX1gLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LmVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgYGVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgJydcbiAgICAgIF1dKTtcbiAgfVxuICBwbHVnaW5TY29wZUtleXMocGx1Z2luKSB7XG4gICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMudHlwZTtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHt0eXBlfS1wbHVnaW4tJHtpZH1gLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYHBsdWdpbnMuJHtpZH1gLFxuICAgICAgICAuLi5wbHVnaW4uYWRkaXRpb25hbE9wdGlvblNjb3BlcyB8fCBbXSxcbiAgICAgIF1dKTtcbiAgfVxuICBfY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSkge1xuICAgIGNvbnN0IF9zY29wZUNhY2hlID0gdGhpcy5fc2NvcGVDYWNoZTtcbiAgICBsZXQgY2FjaGUgPSBfc2NvcGVDYWNoZS5nZXQobWFpblNjb3BlKTtcbiAgICBpZiAoIWNhY2hlIHx8IHJlc2V0Q2FjaGUpIHtcbiAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgX3Njb3BlQ2FjaGUuc2V0KG1haW5TY29wZSwgY2FjaGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbiAgZ2V0T3B0aW9uU2NvcGVzKG1haW5TY29wZSwga2V5TGlzdHMsIHJlc2V0Q2FjaGUpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgdHlwZX0gPSB0aGlzO1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSk7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleUxpc3RzKTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBjb25zdCBzY29wZXMgPSBuZXcgU2V0KCk7XG4gICAga2V5TGlzdHMuZm9yRWFjaChrZXlzID0+IHtcbiAgICAgIGlmIChtYWluU2NvcGUpIHtcbiAgICAgICAgc2NvcGVzLmFkZChtYWluU2NvcGUpO1xuICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBtYWluU2NvcGUsIGtleSkpO1xuICAgICAgfVxuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3Blcywgb3B0aW9ucywga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBvdmVycmlkZXNbdHlwZV0gfHwge30sIGtleSkpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3BlcywgZGVmYXVsdHMsIGtleSkpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3BlcywgZGVzY3JpcHRvcnMsIGtleSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IGFycmF5ID0gQXJyYXkuZnJvbShzY29wZXMpO1xuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIGFycmF5LnB1c2goT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuICAgIGlmIChrZXlzQ2FjaGVkLmhhcyhrZXlMaXN0cykpIHtcbiAgICAgIGNhY2hlLnNldChrZXlMaXN0cywgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbiAgY2hhcnRPcHRpb25TY29wZXMoKSB7XG4gICAgY29uc3Qge29wdGlvbnMsIHR5cGV9ID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAgb3B0aW9ucyxcbiAgICAgIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSxcbiAgICAgIGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9LFxuICAgICAge3R5cGV9LFxuICAgICAgZGVmYXVsdHMsXG4gICAgICBkZXNjcmlwdG9yc1xuICAgIF07XG4gIH1cbiAgcmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFsnJ10pIHtcbiAgICBjb25zdCByZXN1bHQgPSB7JHNoYXJlZDogdHJ1ZX07XG4gICAgY29uc3Qge3Jlc29sdmVyLCBzdWJQcmVmaXhlc30gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICBsZXQgb3B0aW9ucyA9IHJlc29sdmVyO1xuICAgIGlmIChuZWVkQ29udGV4dChyZXNvbHZlciwgbmFtZXMpKSB7XG4gICAgICByZXN1bHQuJHNoYXJlZCA9IGZhbHNlO1xuICAgICAgY29udGV4dCA9IGlzRnVuY3Rpb24oY29udGV4dCkgPyBjb250ZXh0KCkgOiBjb250ZXh0O1xuICAgICAgY29uc3Qgc3ViUmVzb2x2ZXIgPSB0aGlzLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgc3ViUHJlZml4ZXMpO1xuICAgICAgb3B0aW9ucyA9IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCBzdWJSZXNvbHZlcik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcykge1xuICAgICAgcmVzdWx0W3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBjcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHByZWZpeGVzID0gWycnXSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgY29uc3Qge3Jlc29sdmVyfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgIHJldHVybiBpc09iamVjdChjb250ZXh0KVxuICAgICAgPyBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgdW5kZWZpbmVkLCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gICAgICA6IHJlc29sdmVyO1xuICB9XG59XG5mdW5jdGlvbiBnZXRSZXNvbHZlcihyZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKSB7XG4gIGxldCBjYWNoZSA9IHJlc29sdmVyQ2FjaGUuZ2V0KHNjb3Blcyk7XG4gIGlmICghY2FjaGUpIHtcbiAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICByZXNvbHZlckNhY2hlLnNldChzY29wZXMsIGNhY2hlKTtcbiAgfVxuICBjb25zdCBjYWNoZUtleSA9IHByZWZpeGVzLmpvaW4oKTtcbiAgbGV0IGNhY2hlZCA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmICghY2FjaGVkKSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBfY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgY2FjaGVkID0ge1xuICAgICAgcmVzb2x2ZXIsXG4gICAgICBzdWJQcmVmaXhlczogcHJlZml4ZXMuZmlsdGVyKHAgPT4gIXAudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaG92ZXInKSlcbiAgICB9O1xuICAgIGNhY2hlLnNldChjYWNoZUtleSwgY2FjaGVkKTtcbiAgfVxuICByZXR1cm4gY2FjaGVkO1xufVxuY29uc3QgaGFzRnVuY3Rpb24gPSB2YWx1ZSA9PiBpc09iamVjdCh2YWx1ZSlcbiAgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLnJlZHVjZSgoYWNjLCBrZXkpID0+IGFjYyB8fCBpc0Z1bmN0aW9uKHZhbHVlW2tleV0pLCBmYWxzZSk7XG5mdW5jdGlvbiBuZWVkQ29udGV4dChwcm94eSwgbmFtZXMpIHtcbiAgY29uc3Qge2lzU2NyaXB0YWJsZSwgaXNJbmRleGFibGV9ID0gX2Rlc2NyaXB0b3JzKHByb3h5KTtcbiAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKSB7XG4gICAgY29uc3Qgc2NyaXB0YWJsZSA9IGlzU2NyaXB0YWJsZShwcm9wKTtcbiAgICBjb25zdCBpbmRleGFibGUgPSBpc0luZGV4YWJsZShwcm9wKTtcbiAgICBjb25zdCB2YWx1ZSA9IChpbmRleGFibGUgfHwgc2NyaXB0YWJsZSkgJiYgcHJveHlbcHJvcF07XG4gICAgaWYgKChzY3JpcHRhYmxlICYmIChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBoYXNGdW5jdGlvbih2YWx1ZSkpKVxuICAgICAgfHwgKGluZGV4YWJsZSAmJiBpc0FycmF5KHZhbHVlKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIzLjcuMFwiO1xuXG5jb25zdCBLTk9XTl9QT1NJVElPTlMgPSBbJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICdjaGFydEFyZWEnXTtcbmZ1bmN0aW9uIHBvc2l0aW9uSXNIb3Jpem9udGFsKHBvc2l0aW9uLCBheGlzKSB7XG4gIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IChLTk9XTl9QT1NJVElPTlMuaW5kZXhPZihwb3NpdGlvbikgPT09IC0xICYmIGF4aXMgPT09ICd4Jyk7XG59XG5mdW5jdGlvbiBjb21wYXJlMkxldmVsKGwxLCBsMikge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhW2wxXSA9PT0gYltsMV1cbiAgICAgID8gYVtsMl0gLSBiW2wyXVxuICAgICAgOiBhW2wxXSAtIGJbbDFdO1xuICB9O1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25zQ29tcGxldGUoY29udGV4dCkge1xuICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJSZW5kZXInKTtcbiAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uQ29tcGxldGUsIFtjb250ZXh0XSwgY2hhcnQpO1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhjb250ZXh0KSB7XG4gIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Qcm9ncmVzcywgW2NvbnRleHRdLCBjaGFydCk7XG59XG5mdW5jdGlvbiBnZXRDYW52YXMoaXRlbSkge1xuICBpZiAoX2lzRG9tU3VwcG9ydGVkKCkgJiYgdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuICB9IGVsc2UgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGgpIHtcbiAgICBpdGVtID0gaXRlbVswXTtcbiAgfVxuICBpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuICAgIGl0ZW0gPSBpdGVtLmNhbnZhcztcbiAgfVxuICByZXR1cm4gaXRlbTtcbn1cbmNvbnN0IGluc3RhbmNlcyA9IHt9O1xuY29uc3QgZ2V0Q2hhcnQgPSAoa2V5KSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcyhrZXkpO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhpbnN0YW5jZXMpLmZpbHRlcigoYykgPT4gYy5jYW52YXMgPT09IGNhbnZhcykucG9wKCk7XG59O1xuZnVuY3Rpb24gbW92ZU51bWVyaWNLZXlzKG9iaiwgc3RhcnQsIG1vdmUpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBjb25zdCBpbnRLZXkgPSAra2V5O1xuICAgIGlmIChpbnRLZXkgPj0gc3RhcnQpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICBpZiAobW92ZSA+IDAgfHwgaW50S2V5ID4gc3RhcnQpIHtcbiAgICAgICAgb2JqW2ludEtleSArIG1vdmVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljaykge1xuICBpZiAoIWluQ2hhcnRBcmVhIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChpc0NsaWNrKSB7XG4gICAgcmV0dXJuIGxhc3RFdmVudDtcbiAgfVxuICByZXR1cm4gZTtcbn1cbmNsYXNzIENoYXJ0IHtcbiAgY29uc3RydWN0b3IoaXRlbSwgdXNlckNvbmZpZykge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnID0gbmV3IENvbmZpZyh1c2VyQ29uZmlnKTtcbiAgICBjb25zdCBpbml0aWFsQ2FudmFzID0gZ2V0Q2FudmFzKGl0ZW0pO1xuICAgIGNvbnN0IGV4aXN0aW5nQ2hhcnQgPSBnZXRDaGFydChpbml0aWFsQ2FudmFzKTtcbiAgICBpZiAoZXhpc3RpbmdDaGFydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2FudmFzIGlzIGFscmVhZHkgaW4gdXNlLiBDaGFydCB3aXRoIElEIFxcJycgKyBleGlzdGluZ0NoYXJ0LmlkICsgJ1xcJycgK1xuXHRcdFx0XHQnIG11c3QgYmUgZGVzdHJveWVkIGJlZm9yZSB0aGUgY2FudmFzIGNhbiBiZSByZXVzZWQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMucGxhdGZvcm0gPSBuZXcgKGNvbmZpZy5wbGF0Zm9ybSB8fCBfZGV0ZWN0UGxhdGZvcm0oaW5pdGlhbENhbnZhcykpKCk7XG4gICAgdGhpcy5wbGF0Zm9ybS51cGRhdGVDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpbml0aWFsQ2FudmFzLCBvcHRpb25zLmFzcGVjdFJhdGlvKTtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzO1xuICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcbiAgICB0aGlzLmlkID0gdWlkKCk7XG4gICAgdGhpcy5jdHggPSBjb250ZXh0O1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgdGhpcy5fbWV0YXNldHMgPSBbXTtcbiAgICB0aGlzLl9zdGFja3MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3hlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaGFydEFyZWEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgdGhpcy5fbGFzdEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBbXTtcbiAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgUGx1Z2luU2VydmljZSgpO1xuICAgIHRoaXMuJHByb3hpZXMgPSB7fTtcbiAgICB0aGlzLl9oaWRkZW5JbmRpY2VzID0ge307XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RvUmVzaXplID0gZGVib3VuY2UobW9kZSA9PiB0aGlzLnVwZGF0ZShtb2RlKSwgb3B0aW9ucy5yZXNpemVEZWxheSB8fCAwKTtcbiAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgIGluc3RhbmNlc1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgaWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdjb21wbGV0ZScsIG9uQW5pbWF0aW9uc0NvbXBsZXRlKTtcbiAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ3Byb2dyZXNzJywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgdGhpcy5faW5pdGlhbGl6ZSgpO1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuICBnZXQgYXNwZWN0UmF0aW8oKSB7XG4gICAgY29uc3Qge29wdGlvbnM6IHthc3BlY3RSYXRpbywgbWFpbnRhaW5Bc3BlY3RSYXRpb30sIHdpZHRoLCBoZWlnaHQsIF9hc3BlY3RSYXRpb30gPSB0aGlzO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihhc3BlY3RSYXRpbykpIHtcbiAgICAgIHJldHVybiBhc3BlY3RSYXRpbztcbiAgICB9XG4gICAgaWYgKG1haW50YWluQXNwZWN0UmF0aW8gJiYgX2FzcGVjdFJhdGlvKSB7XG4gICAgICByZXR1cm4gX2FzcGVjdFJhdGlvO1xuICAgIH1cbiAgICByZXR1cm4gaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBudWxsO1xuICB9XG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5kYXRhO1xuICB9XG4gIHNldCBkYXRhKGRhdGEpIHtcbiAgICB0aGlzLmNvbmZpZy5kYXRhID0gZGF0YTtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxuICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgX2luaXRpYWxpemUoKSB7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVJbml0Jyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRpbmFTY2FsZSh0aGlzLCB0aGlzLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgfVxuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgY2xlYXJDYW52YXModGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzdG9wKCkge1xuICAgIGFuaW1hdG9yLnN0b3AodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IHt3aWR0aCwgaGVpZ2h0fTtcbiAgICB9XG4gIH1cbiAgX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IG9wdGlvbnMubWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiB0aGlzLmFzcGVjdFJhdGlvO1xuICAgIGNvbnN0IG5ld1NpemUgPSB0aGlzLnBsYXRmb3JtLmdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICAgIGNvbnN0IG5ld1JhdGlvID0gb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvIHx8IHRoaXMucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLndpZHRoID8gJ3Jlc2l6ZScgOiAnYXR0YWNoJztcbiAgICB0aGlzLndpZHRoID0gbmV3U2l6ZS53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG5ld1NpemUuaGVpZ2h0O1xuICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICBpZiAoIXJldGluYVNjYWxlKHRoaXMsIG5ld1JhdGlvLCB0cnVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2l6ZScsIHtzaXplOiBuZXdTaXplfSk7XG4gICAgY2FsbGJhY2sob3B0aW9ucy5vblJlc2l6ZSwgW3RoaXMsIG5ld1NpemVdLCB0aGlzKTtcbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKHRoaXMuX2RvUmVzaXplKG1vZGUpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVuc3VyZVNjYWxlc0hhdmVJRHMoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBzY2FsZXNPcHRpb25zID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gICAgZWFjaChzY2FsZXNPcHRpb25zLCAoYXhpc09wdGlvbnMsIGF4aXNJRCkgPT4ge1xuICAgICAgYXhpc09wdGlvbnMuaWQgPSBheGlzSUQ7XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRPclVwZGF0ZVNjYWxlcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNjYWxlT3B0cyA9IG9wdGlvbnMuc2NhbGVzO1xuICAgIGNvbnN0IHNjYWxlcyA9IHRoaXMuc2NhbGVzO1xuICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZSgob2JqLCBpZCkgPT4ge1xuICAgICAgb2JqW2lkXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG4gICAgbGV0IGl0ZW1zID0gW107XG4gICAgaWYgKHNjYWxlT3B0cykge1xuICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoXG4gICAgICAgIE9iamVjdC5rZXlzKHNjYWxlT3B0cykubWFwKChpZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IHNjYWxlT3B0c1tpZF07XG4gICAgICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucyk7XG4gICAgICAgICAgY29uc3QgaXNSYWRpYWwgPSBheGlzID09PSAncic7XG4gICAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gYXhpcyA9PT0gJ3gnO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG4gICAgICAgICAgICBkcG9zaXRpb246IGlzUmFkaWFsID8gJ2NoYXJ0QXJlYScgOiBpc0hvcml6b250YWwgPyAnYm90dG9tJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgIGR0eXBlOiBpc1JhZGlhbCA/ICdyYWRpYWxMaW5lYXInIDogaXNIb3Jpem9udGFsID8gJ2NhdGVnb3J5JyA6ICdsaW5lYXInXG4gICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGVhY2goaXRlbXMsIChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICBjb25zdCBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcbiAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgY29uc3Qgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuICAgICAgaWYgKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uSXNIb3Jpem9udGFsKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiwgYXhpcykgIT09IHBvc2l0aW9uSXNIb3Jpem9udGFsKGl0ZW0uZHBvc2l0aW9uKSkge1xuICAgICAgICBzY2FsZU9wdGlvbnMucG9zaXRpb24gPSBpdGVtLmRwb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgIGxldCBzY2FsZSA9IG51bGw7XG4gICAgICBpZiAoaWQgaW4gc2NhbGVzICYmIHNjYWxlc1tpZF0udHlwZSA9PT0gc2NhbGVUeXBlKSB7XG4gICAgICAgIHNjYWxlID0gc2NhbGVzW2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjYWxlQ2xhc3MgPSByZWdpc3RyeS5nZXRTY2FsZShzY2FsZVR5cGUpO1xuICAgICAgICBzY2FsZSA9IG5ldyBzY2FsZUNsYXNzKHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB0eXBlOiBzY2FsZVR5cGUsXG4gICAgICAgICAgY3R4OiB0aGlzLmN0eCxcbiAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICB9KTtcbiAgICAgICAgc2NhbGVzW3NjYWxlLmlkXSA9IHNjYWxlO1xuICAgICAgfVxuICAgICAgc2NhbGUuaW5pdChzY2FsZU9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGVhY2godXBkYXRlZCwgKGhhc1VwZGF0ZWQsIGlkKSA9PiB7XG4gICAgICBpZiAoIWhhc1VwZGF0ZWQpIHtcbiAgICAgICAgZGVsZXRlIHNjYWxlc1tpZF07XG4gICAgICB9XG4gICAgfSk7XG4gICAgZWFjaChzY2FsZXMsIChzY2FsZSkgPT4ge1xuICAgICAgbGF5b3V0cy5jb25maWd1cmUodGhpcywgc2NhbGUsIHNjYWxlLm9wdGlvbnMpO1xuICAgICAgbGF5b3V0cy5hZGRCb3godGhpcywgc2NhbGUpO1xuICAgIH0pO1xuICB9XG4gIF91cGRhdGVNZXRhc2V0cygpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgIGNvbnN0IG51bURhdGEgPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoO1xuICAgIGNvbnN0IG51bU1ldGEgPSBtZXRhc2V0cy5sZW5ndGg7XG4gICAgbWV0YXNldHMuc29ydCgoYSwgYikgPT4gYS5pbmRleCAtIGIuaW5kZXgpO1xuICAgIGlmIChudW1NZXRhID4gbnVtRGF0YSkge1xuICAgICAgZm9yIChsZXQgaSA9IG51bURhdGE7IGkgPCBudW1NZXRhOyArK2kpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgfVxuICAgICAgbWV0YXNldHMuc3BsaWNlKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICB9XG4gICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBtZXRhc2V0cy5zbGljZSgwKS5zb3J0KGNvbXBhcmUyTGV2ZWwoJ29yZGVyJywgJ2luZGV4JykpO1xuICB9XG4gIF9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpIHtcbiAgICBjb25zdCB7X21ldGFzZXRzOiBtZXRhc2V0cywgZGF0YToge2RhdGFzZXRzfX0gPSB0aGlzO1xuICAgIGlmIChtZXRhc2V0cy5sZW5ndGggPiBkYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdGFja3M7XG4gICAgfVxuICAgIG1ldGFzZXRzLmZvckVhY2goKG1ldGEsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoZGF0YXNldHMuZmlsdGVyKHggPT4geCA9PT0gbWV0YS5fZGF0YXNldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuICAgIGNvbnN0IG5ld0NvbnRyb2xsZXJzID0gW107XG4gICAgY29uc3QgZGF0YXNldHMgPSB0aGlzLmRhdGEuZGF0YXNldHM7XG4gICAgbGV0IGksIGlsZW47XG4gICAgdGhpcy5fcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHNbaV07XG4gICAgICBsZXQgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgICBpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgfVxuICAgICAgbWV0YS50eXBlID0gdHlwZTtcbiAgICAgIG1ldGEuaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIHRoaXMub3B0aW9ucyk7XG4gICAgICBtZXRhLm9yZGVyID0gZGF0YXNldC5vcmRlciB8fCAwO1xuICAgICAgbWV0YS5pbmRleCA9IGk7XG4gICAgICBtZXRhLmxhYmVsID0gJycgKyBkYXRhc2V0LmxhYmVsO1xuICAgICAgbWV0YS52aXNpYmxlID0gdGhpcy5pc0RhdGFzZXRWaXNpYmxlKGkpO1xuICAgICAgaWYgKG1ldGEuY29udHJvbGxlcikge1xuICAgICAgICBtZXRhLmNvbnRyb2xsZXIudXBkYXRlSW5kZXgoaSk7XG4gICAgICAgIG1ldGEuY29udHJvbGxlci5saW5rU2NhbGVzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBDb250cm9sbGVyQ2xhc3MgPSByZWdpc3RyeS5nZXRDb250cm9sbGVyKHR5cGUpO1xuICAgICAgICBjb25zdCB7ZGF0YXNldEVsZW1lbnRUeXBlLCBkYXRhRWxlbWVudFR5cGV9ID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV07XG4gICAgICAgIE9iamVjdC5hc3NpZ24oQ29udHJvbGxlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhRWxlbWVudFR5cGUpLFxuICAgICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZGF0YXNldEVsZW1lbnRUeXBlICYmIHJlZ2lzdHJ5LmdldEVsZW1lbnQoZGF0YXNldEVsZW1lbnRUeXBlKVxuICAgICAgICB9KTtcbiAgICAgICAgbWV0YS5jb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXJDbGFzcyh0aGlzLCBpKTtcbiAgICAgICAgbmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl91cGRhdGVNZXRhc2V0cygpO1xuICAgIHJldHVybiBuZXdDb250cm9sbGVycztcbiAgfVxuICBfcmVzZXRFbGVtZW50cygpIHtcbiAgICBlYWNoKHRoaXMuZGF0YS5kYXRhc2V0cywgKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkgPT4ge1xuICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRzKCk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNldCcpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgY29uZmlnLnVwZGF0ZSgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYW5pbXNEaXNhYmxlZCA9IHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9ICFvcHRpb25zLmFuaW1hdGlvbjtcbiAgICB0aGlzLl91cGRhdGVTY2FsZXMoKTtcbiAgICB0aGlzLl9jaGVja0V2ZW50QmluZGluZ3MoKTtcbiAgICB0aGlzLl91cGRhdGVIaWRkZW5JbmRpY2VzKCk7XG4gICAgdGhpcy5fcGx1Z2lucy5pbnZhbGlkYXRlKCk7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlVXBkYXRlJywge21vZGUsIGNhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSB0aGlzLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRWxlbWVudHNVcGRhdGUnKTtcbiAgICBsZXQgbWluUGFkZGluZyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBjb25zdCB7Y29udHJvbGxlcn0gPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgY29uc3QgcmVzZXQgPSAhYW5pbXNEaXNhYmxlZCAmJiBuZXdDb250cm9sbGVycy5pbmRleE9mKGNvbnRyb2xsZXIpID09PSAtMTtcbiAgICAgIGNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0KTtcbiAgICAgIG1pblBhZGRpbmcgPSBNYXRoLm1heCgrY29udHJvbGxlci5nZXRNYXhPdmVyZmxvdygpLCBtaW5QYWRkaW5nKTtcbiAgICB9XG4gICAgbWluUGFkZGluZyA9IHRoaXMuX21pblBhZGRpbmcgPSBvcHRpb25zLmxheW91dC5hdXRvUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwO1xuICAgIHRoaXMuX3VwZGF0ZUxheW91dChtaW5QYWRkaW5nKTtcbiAgICBpZiAoIWFuaW1zRGlzYWJsZWQpIHtcbiAgICAgIGVhY2gobmV3Q29udHJvbGxlcnMsIChjb250cm9sbGVyKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVEYXRhc2V0cyhtb2RlKTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyVXBkYXRlJywge21vZGV9KTtcbiAgICB0aGlzLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG4gICAgY29uc3Qge19hY3RpdmUsIF9sYXN0RXZlbnR9ID0gdGhpcztcbiAgICBpZiAoX2xhc3RFdmVudCkge1xuICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKF9sYXN0RXZlbnQsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoX2FjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKF9hY3RpdmUsIF9hY3RpdmUsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIF91cGRhdGVTY2FsZXMoKSB7XG4gICAgZWFjaCh0aGlzLnNjYWxlcywgKHNjYWxlKSA9PiB7XG4gICAgICBsYXlvdXRzLnJlbW92ZUJveCh0aGlzLCBzY2FsZSk7XG4gICAgfSk7XG4gICAgdGhpcy5lbnN1cmVTY2FsZXNIYXZlSURzKCk7XG4gICAgdGhpcy5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG4gIH1cbiAgX2NoZWNrRXZlbnRCaW5kaW5ncygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGV4aXN0aW5nRXZlbnRzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLl9saXN0ZW5lcnMpKTtcbiAgICBjb25zdCBuZXdFdmVudHMgPSBuZXcgU2V0KG9wdGlvbnMuZXZlbnRzKTtcbiAgICBpZiAoIXNldHNFcXVhbChleGlzdGluZ0V2ZW50cywgbmV3RXZlbnRzKSB8fCAhIXRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgIT09IG9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH1cbiAgfVxuICBfdXBkYXRlSGlkZGVuSW5kaWNlcygpIHtcbiAgICBjb25zdCB7X2hpZGRlbkluZGljZXN9ID0gdGhpcztcbiAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5fZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkgfHwgW107XG4gICAgZm9yIChjb25zdCB7bWV0aG9kLCBzdGFydCwgY291bnR9IG9mIGNoYW5nZXMpIHtcbiAgICAgIGNvbnN0IG1vdmUgPSBtZXRob2QgPT09ICdfcmVtb3ZlRWxlbWVudHMnID8gLWNvdW50IDogY291bnQ7XG4gICAgICBtb3ZlTnVtZXJpY0tleXMoX2hpZGRlbkluZGljZXMsIHN0YXJ0LCBtb3ZlKTtcbiAgICB9XG4gIH1cbiAgX2dldFVuaWZvcm1EYXRhQ2hhbmdlcygpIHtcbiAgICBjb25zdCBfZGF0YUNoYW5nZXMgPSB0aGlzLl9kYXRhQ2hhbmdlcztcbiAgICBpZiAoIV9kYXRhQ2hhbmdlcyB8fCAhX2RhdGFDaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgIGNvbnN0IGRhdGFzZXRDb3VudCA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgY29uc3QgbWFrZVNldCA9IChpZHgpID0+IG5ldyBTZXQoXG4gICAgICBfZGF0YUNoYW5nZXNcbiAgICAgICAgLmZpbHRlcihjID0+IGNbMF0gPT09IGlkeClcbiAgICAgICAgLm1hcCgoYywgaSkgPT4gaSArICcsJyArIGMuc3BsaWNlKDEpLmpvaW4oJywnKSlcbiAgICApO1xuICAgIGNvbnN0IGNoYW5nZVNldCA9IG1ha2VTZXQoMCk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkYXRhc2V0Q291bnQ7IGkrKykge1xuICAgICAgaWYgKCFzZXRzRXF1YWwoY2hhbmdlU2V0LCBtYWtlU2V0KGkpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5nZVNldClcbiAgICAgIC5tYXAoYyA9PiBjLnNwbGl0KCcsJykpXG4gICAgICAubWFwKGEgPT4gKHttZXRob2Q6IGFbMV0sIHN0YXJ0OiArYVsyXSwgY291bnQ6ICthWzNdfSkpO1xuICB9XG4gIF91cGRhdGVMYXlvdXQobWluUGFkZGluZykge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUxheW91dCcsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBtaW5QYWRkaW5nKTtcbiAgICBjb25zdCBhcmVhID0gdGhpcy5jaGFydEFyZWE7XG4gICAgY29uc3Qgbm9BcmVhID0gYXJlYS53aWR0aCA8PSAwIHx8IGFyZWEuaGVpZ2h0IDw9IDA7XG4gICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgZWFjaCh0aGlzLmJveGVzLCAoYm94KSA9PiB7XG4gICAgICBpZiAobm9BcmVhICYmIGJveC5wb3NpdGlvbiA9PT0gJ2NoYXJ0QXJlYScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGJveC5jb25maWd1cmUpIHtcbiAgICAgICAgYm94LmNvbmZpZ3VyZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGF5ZXJzLnB1c2goLi4uYm94Ll9sYXllcnMoKSk7XG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5fbGF5ZXJzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpdGVtLl9pZHggPSBpbmRleDtcbiAgICB9KTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyTGF5b3V0Jyk7XG4gIH1cbiAgX3VwZGF0ZURhdGFzZXRzKG1vZGUpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c1VwZGF0ZScsIHttb2RlLCBjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLmNvbmZpZ3VyZSgpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZURhdGFzZXQoaSwgaXNGdW5jdGlvbihtb2RlKSA/IG1vZGUoe2RhdGFzZXRJbmRleDogaX0pIDogbW9kZSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScsIHttb2RlfSk7XG4gIH1cbiAgX3VwZGF0ZURhdGFzZXQoaW5kZXgsIG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgY29uc3QgYXJncyA9IHttZXRhLCBpbmRleCwgbW9kZSwgY2FuY2VsYWJsZTogdHJ1ZX07XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldFVwZGF0ZScsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtZXRhLmNvbnRyb2xsZXIuX3VwZGF0ZShtb2RlKTtcbiAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldFVwZGF0ZScsIGFyZ3MpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVSZW5kZXInLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYW5pbWF0b3IuaGFzKHRoaXMpKSB7XG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgICBhbmltYXRvci5zdGFydCh0aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICBvbkFuaW1hdGlvbnNDb21wbGV0ZSh7Y2hhcnQ6IHRoaXN9KTtcbiAgICB9XG4gIH1cbiAgZHJhdygpIHtcbiAgICBsZXQgaTtcbiAgICBpZiAodGhpcy5fcmVzaXplQmVmb3JlRHJhdykge1xuICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdGhpcy5fcmVzaXplQmVmb3JlRHJhdztcbiAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgaWYgKHRoaXMud2lkdGggPD0gMCB8fCB0aGlzLmhlaWdodCA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURyYXcnLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYXllcnMgPSB0aGlzLl9sYXllcnM7XG4gICAgZm9yIChpID0gMDsgaSA8IGxheWVycy5sZW5ndGggJiYgbGF5ZXJzW2ldLnogPD0gMDsgKytpKSB7XG4gICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgfVxuICAgIHRoaXMuX2RyYXdEYXRhc2V0cygpO1xuICAgIGZvciAoOyBpIDwgbGF5ZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEcmF3Jyk7XG4gIH1cbiAgX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKSB7XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9zb3J0ZWRNZXRhc2V0cztcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBtZXRhID0gbWV0YXNldHNbaV07XG4gICAgICBpZiAoIWZpbHRlclZpc2libGUgfHwgbWV0YS52aXNpYmxlKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFNvcnRlZERhdGFzZXRNZXRhcyh0cnVlKTtcbiAgfVxuICBfZHJhd0RhdGFzZXRzKCkge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzRHJhdycsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0aGlzLl9kcmF3RGF0YXNldChtZXRhc2V0c1tpXSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c0RyYXcnKTtcbiAgfVxuICBfZHJhd0RhdGFzZXQobWV0YSkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGNsaXAgPSBtZXRhLl9jbGlwO1xuICAgIGNvbnN0IHVzZUNsaXAgPSAhY2xpcC5kaXNhYmxlZDtcbiAgICBjb25zdCBhcmVhID0gdGhpcy5jaGFydEFyZWE7XG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgIG1ldGEsXG4gICAgICBpbmRleDogbWV0YS5pbmRleCxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9O1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXREcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICBjbGlwQXJlYShjdHgsIHtcbiAgICAgICAgbGVmdDogY2xpcC5sZWZ0ID09PSBmYWxzZSA/IDAgOiBhcmVhLmxlZnQgLSBjbGlwLmxlZnQsXG4gICAgICAgIHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IHRoaXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcbiAgICAgICAgdG9wOiBjbGlwLnRvcCA9PT0gZmFsc2UgPyAwIDogYXJlYS50b3AgLSBjbGlwLnRvcCxcbiAgICAgICAgYm90dG9tOiBjbGlwLmJvdHRvbSA9PT0gZmFsc2UgPyB0aGlzLmhlaWdodCA6IGFyZWEuYm90dG9tICsgY2xpcC5ib3R0b21cbiAgICAgIH0pO1xuICAgIH1cbiAgICBtZXRhLmNvbnRyb2xsZXIuZHJhdygpO1xuICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0RHJhdycsIGFyZ3MpO1xuICB9XG4gIGdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgbW9kZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbWV0aG9kKHRoaXMsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbiAgZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgbGV0IG1ldGEgPSBtZXRhc2V0cy5maWx0ZXIoeCA9PiB4ICYmIHguX2RhdGFzZXQgPT09IGRhdGFzZXQpLnBvcCgpO1xuICAgIGlmICghbWV0YSkge1xuICAgICAgbWV0YSA9IHtcbiAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIGRhdGFzZXQ6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgeEF4aXNJRDogbnVsbCxcbiAgICAgICAgeUF4aXNJRDogbnVsbCxcbiAgICAgICAgb3JkZXI6IGRhdGFzZXQgJiYgZGF0YXNldC5vcmRlciB8fCAwLFxuICAgICAgICBpbmRleDogZGF0YXNldEluZGV4LFxuICAgICAgICBfZGF0YXNldDogZGF0YXNldCxcbiAgICAgICAgX3BhcnNlZDogW10sXG4gICAgICAgIF9zb3J0ZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgICAgbWV0YXNldHMucHVzaChtZXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGE7XG4gIH1cbiAgZ2V0Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCwge2NoYXJ0OiB0aGlzLCB0eXBlOiAnY2hhcnQnfSkpO1xuICB9XG4gIGdldFZpc2libGVEYXRhc2V0Q291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aDtcbiAgfVxuICBpc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICBpZiAoIWRhdGFzZXQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICByZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhZGF0YXNldC5oaWRkZW47XG4gIH1cbiAgc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICBtZXRhLmhpZGRlbiA9ICF2aXNpYmxlO1xuICB9XG4gIHRvZ2dsZURhdGFWaXNpYmlsaXR5KGluZGV4KSB7XG4gICAgdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF0gPSAhdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF07XG4gIH1cbiAgZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICByZXR1cm4gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICB9XG4gIF91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCB2aXNpYmxlKSB7XG4gICAgY29uc3QgbW9kZSA9IHZpc2libGUgPyAnc2hvdycgOiAnaGlkZSc7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICBjb25zdCBhbmltcyA9IG1ldGEuY29udHJvbGxlci5fcmVzb2x2ZUFuaW1hdGlvbnModW5kZWZpbmVkLCBtb2RlKTtcbiAgICBpZiAoZGVmaW5lZChkYXRhSW5kZXgpKSB7XG4gICAgICBtZXRhLmRhdGFbZGF0YUluZGV4XS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKTtcbiAgICAgIGFuaW1zLnVwZGF0ZShtZXRhLCB7dmlzaWJsZX0pO1xuICAgICAgdGhpcy51cGRhdGUoKGN0eCkgPT4gY3R4LmRhdGFzZXRJbmRleCA9PT0gZGF0YXNldEluZGV4ID8gbW9kZSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG4gIGhpZGUoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCBmYWxzZSk7XG4gIH1cbiAgc2hvdyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHRydWUpO1xuICB9XG4gIF9kZXN0cm95RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgaWYgKG1ldGEgJiYgbWV0YS5jb250cm9sbGVyKSB7XG4gICAgICBtZXRhLmNvbnRyb2xsZXIuX2Rlc3Ryb3koKTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gIH1cbiAgX3N0b3AoKSB7XG4gICAgbGV0IGksIGlsZW47XG4gICAgdGhpcy5zdG9wKCk7XG4gICAgYW5pbWF0b3IucmVtb3ZlKHRoaXMpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEZXN0cm95Jyk7XG4gICAgY29uc3Qge2NhbnZhcywgY3R4fSA9IHRoaXM7XG4gICAgdGhpcy5fc3RvcCgpO1xuICAgIHRoaXMuY29uZmlnLmNsZWFyQ2FjaGUoKTtcbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpO1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZWxlYXNlQ29udGV4dChjdHgpO1xuICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgdGhpcy5jdHggPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2Rlc3Ryb3knKTtcbiAgICBkZWxldGUgaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEZXN0cm95Jyk7XG4gIH1cbiAgdG9CYXNlNjRJbWFnZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTCguLi5hcmdzKTtcbiAgfVxuICBiaW5kRXZlbnRzKCkge1xuICAgIHRoaXMuYmluZFVzZXJFdmVudHMoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHRoaXMuYmluZFJlc3BvbnNpdmVFdmVudHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIGJpbmRVc2VyRXZlbnRzKCkge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICBjb25zdCBwbGF0Zm9ybSA9IHRoaXMucGxhdGZvcm07XG4gICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKGUsIHgsIHkpID0+IHtcbiAgICAgIGUub2Zmc2V0WCA9IHg7XG4gICAgICBlLm9mZnNldFkgPSB5O1xuICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKGUpO1xuICAgIH07XG4gICAgZWFjaCh0aGlzLm9wdGlvbnMuZXZlbnRzLCAodHlwZSkgPT4gX2FkZCh0eXBlLCBsaXN0ZW5lcikpO1xuICB9XG4gIGJpbmRSZXNwb25zaXZlRXZlbnRzKCkge1xuICAgIGlmICghdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycykge1xuICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzO1xuICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICBwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgIH07XG4gICAgY29uc3QgX3JlbW92ZSA9ICh0eXBlLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgaWYgKGxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICBwbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBkZXRhY2hlZDtcbiAgICBjb25zdCBhdHRhY2hlZCA9ICgpID0+IHtcbiAgICAgIF9yZW1vdmUoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgIF9hZGQoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgIF9hZGQoJ2RldGFjaCcsIGRldGFjaGVkKTtcbiAgICB9O1xuICAgIGRldGFjaGVkID0gKCkgPT4ge1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgX3JlbW92ZSgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgdGhpcy5fcmVzaXplKDAsIDApO1xuICAgICAgX2FkZCgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgIH07XG4gICAgaWYgKHBsYXRmb3JtLmlzQXR0YWNoZWQodGhpcy5jYW52YXMpKSB7XG4gICAgICBhdHRhY2hlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZXRhY2hlZCgpO1xuICAgIH1cbiAgfVxuICB1bmJpbmRFdmVudHMoKSB7XG4gICAgZWFjaCh0aGlzLl9saXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSkgPT4ge1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9KTtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICBlYWNoKHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSkgPT4ge1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9KTtcbiAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIHVwZGF0ZUhvdmVyU3R5bGUoaXRlbXMsIG1vZGUsIGVuYWJsZWQpIHtcbiAgICBjb25zdCBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcbiAgICBsZXQgbWV0YSwgaXRlbSwgaSwgaWxlbjtcbiAgICBpZiAobW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtc1swXS5kYXRhc2V0SW5kZXgpO1xuICAgICAgbWV0YS5jb250cm9sbGVyWydfJyArIHByZWZpeCArICdEYXRhc2V0SG92ZXJTdHlsZSddKCk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBpdGVtICYmIHRoaXMuZ2V0RGF0YXNldE1ldGEoaXRlbS5kYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gICAgICBpZiAoY29udHJvbGxlcikge1xuICAgICAgICBjb250cm9sbGVyW3ByZWZpeCArICdIb3ZlclN0eWxlJ10oaXRlbS5lbGVtZW50LCBpdGVtLmRhdGFzZXRJbmRleCwgaXRlbS5pbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gIH1cbiAgc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMpIHtcbiAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoe2RhdGFzZXRJbmRleCwgaW5kZXh9KSA9PiB7XG4gICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0YXNldCBmb3VuZCBhdCBpbmRleCAnICsgZGF0YXNldEluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgaW5kZXgsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgfVxuICB9XG4gIG5vdGlmeVBsdWdpbnMoaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMubm90aWZ5KHRoaXMsIGhvb2ssIGFyZ3MsIGZpbHRlcik7XG4gIH1cbiAgX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KSB7XG4gICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgIGNvbnN0IGRpZmYgPSAoYSwgYikgPT4gYS5maWx0ZXIoeCA9PiAhYi5zb21lKHkgPT4geC5kYXRhc2V0SW5kZXggPT09IHkuZGF0YXNldEluZGV4ICYmIHguaW5kZXggPT09IHkuaW5kZXgpKTtcbiAgICBjb25zdCBkZWFjdGl2YXRlZCA9IGRpZmYobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICBjb25zdCBhY3RpdmF0ZWQgPSByZXBsYXkgPyBhY3RpdmUgOiBkaWZmKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgaWYgKGRlYWN0aXZhdGVkLmxlbmd0aCkge1xuICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGRlYWN0aXZhdGVkLCBob3Zlck9wdGlvbnMubW9kZSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoYWN0aXZhdGVkLmxlbmd0aCAmJiBob3Zlck9wdGlvbnMubW9kZSkge1xuICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIHRydWUpO1xuICAgIH1cbiAgfVxuICBfZXZlbnRIYW5kbGVyKGUsIHJlcGxheSkge1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBldmVudDogZSxcbiAgICAgIHJlcGxheSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICBpbkNoYXJ0QXJlYTogX2lzUG9pbnRJbkFyZWEoZSwgdGhpcy5jaGFydEFyZWEsIHRoaXMuX21pblBhZGRpbmcpXG4gICAgfTtcbiAgICBjb25zdCBldmVudEZpbHRlciA9IChwbHVnaW4pID0+IChwbHVnaW4ub3B0aW9ucy5ldmVudHMgfHwgdGhpcy5vcHRpb25zLmV2ZW50cykuaW5jbHVkZXMoZS5uYXRpdmUudHlwZSk7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRXZlbnQnLCBhcmdzLCBldmVudEZpbHRlcikgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLl9oYW5kbGVFdmVudChlLCByZXBsYXksIGFyZ3MuaW5DaGFydEFyZWEpO1xuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKTtcbiAgICBpZiAoY2hhbmdlZCB8fCBhcmdzLmNoYW5nZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIF9oYW5kbGVFdmVudChlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgY29uc3Qge19hY3RpdmU6IGxhc3RBY3RpdmUgPSBbXSwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSByZXBsYXk7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IGlzQ2xpY2sgPSBfaXNDbGlja0V2ZW50KGUpO1xuICAgIGNvbnN0IGxhc3RFdmVudCA9IGRldGVybWluZUxhc3RFdmVudChlLCB0aGlzLl9sYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKTtcbiAgICBpZiAoaW5DaGFydEFyZWEpIHtcbiAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICBjYWxsYmFjayhvcHRpb25zLm9uSG92ZXIsIFtlLCBhY3RpdmUsIHRoaXNdLCB0aGlzKTtcbiAgICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25DbGljaywgW2UsIGFjdGl2ZSwgdGhpc10sIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgaWYgKGNoYW5nZWQgfHwgcmVwbGF5KSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUsIHJlcGxheSk7XG4gICAgfVxuICAgIHRoaXMuX2xhc3RFdmVudCA9IGxhc3RFdmVudDtcbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxuICBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgIH1cbiAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxufVxuY29uc3QgaW52YWxpZGF0ZVBsdWdpbnMgPSAoKSA9PiBlYWNoKENoYXJ0Lmluc3RhbmNlcywgKGNoYXJ0KSA9PiBjaGFydC5fcGx1Z2lucy5pbnZhbGlkYXRlKCkpO1xuY29uc3QgZW51bWVyYWJsZSA9IHRydWU7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDaGFydCwge1xuICBkZWZhdWx0czoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGRlZmF1bHRzXG4gIH0sXG4gIGluc3RhbmNlczoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGluc3RhbmNlc1xuICB9LFxuICBvdmVycmlkZXM6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiBvdmVycmlkZXNcbiAgfSxcbiAgcmVnaXN0cnk6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiByZWdpc3RyeVxuICB9LFxuICB2ZXJzaW9uOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogdmVyc2lvblxuICB9LFxuICBnZXRDaGFydDoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGdldENoYXJ0XG4gIH0sXG4gIHJlZ2lzdGVyOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogKC4uLml0ZW1zKSA9PiB7XG4gICAgICByZWdpc3RyeS5hZGQoLi4uaXRlbXMpO1xuICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXI6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiAoLi4uaXRlbXMpID0+IHtcbiAgICAgIHJlZ2lzdHJ5LnJlbW92ZSguLi5pdGVtcyk7XG4gICAgICBpbnZhbGlkYXRlUGx1Z2lucygpO1xuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSkge1xuICBjb25zdCB7c3RhcnRBbmdsZSwgcGl4ZWxNYXJnaW4sIHgsIHksIG91dGVyUmFkaXVzLCBpbm5lclJhZGl1c30gPSBlbGVtZW50O1xuICBsZXQgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIG91dGVyUmFkaXVzO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbik7XG4gIGlmIChpbm5lclJhZGl1cyA+IHBpeGVsTWFyZ2luKSB7XG4gICAgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIGlubmVyUmFkaXVzO1xuICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBIQUxGX1BJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gIH1cbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdG9SYWRpdXNDb3JuZXJzKHZhbHVlKSB7XG4gIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgWydvdXRlclN0YXJ0JywgJ291dGVyRW5kJywgJ2lubmVyU3RhcnQnLCAnaW5uZXJFbmQnXSk7XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyQxKGFyYywgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBhbmdsZURlbHRhKSB7XG4gIGNvbnN0IG8gPSB0b1JhZGl1c0Nvcm5lcnMoYXJjLm9wdGlvbnMuYm9yZGVyUmFkaXVzKTtcbiAgY29uc3QgaGFsZlRoaWNrbmVzcyA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIDI7XG4gIGNvbnN0IGlubmVyTGltaXQgPSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBhbmdsZURlbHRhICogaW5uZXJSYWRpdXMgLyAyKTtcbiAgY29uc3QgY29tcHV0ZU91dGVyTGltaXQgPSAodmFsKSA9PiB7XG4gICAgY29uc3Qgb3V0ZXJBcmNMaW1pdCA9IChvdXRlclJhZGl1cyAtIE1hdGgubWluKGhhbGZUaGlja25lc3MsIHZhbCkpICogYW5nbGVEZWx0YSAvIDI7XG4gICAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbCwgMCwgTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgb3V0ZXJBcmNMaW1pdCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIG91dGVyU3RhcnQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJTdGFydCksXG4gICAgb3V0ZXJFbmQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJFbmQpLFxuICAgIGlubmVyU3RhcnQ6IF9saW1pdFZhbHVlKG8uaW5uZXJTdGFydCwgMCwgaW5uZXJMaW1pdCksXG4gICAgaW5uZXJFbmQ6IF9saW1pdFZhbHVlKG8uaW5uZXJFbmQsIDAsIGlubmVyTGltaXQpLFxuICB9O1xufVxuZnVuY3Rpb24gclRoZXRhVG9YWShyLCB0aGV0YSwgeCwgeSkge1xuICByZXR1cm4ge1xuICAgIHg6IHggKyByICogTWF0aC5jb3ModGhldGEpLFxuICAgIHk6IHkgKyByICogTWF0aC5zaW4odGhldGEpLFxuICB9O1xufVxuZnVuY3Rpb24gcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kKSB7XG4gIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlOiBzdGFydCwgcGl4ZWxNYXJnaW4sIGlubmVyUmFkaXVzOiBpbm5lclJ9ID0gZWxlbWVudDtcbiAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCAtIHBpeGVsTWFyZ2luLCAwKTtcbiAgY29uc3QgaW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSICsgc3BhY2luZyArIG9mZnNldCArIHBpeGVsTWFyZ2luIDogMDtcbiAgbGV0IHNwYWNpbmdPZmZzZXQgPSAwO1xuICBjb25zdCBhbHBoYSA9IGVuZCAtIHN0YXJ0O1xuICBpZiAoc3BhY2luZykge1xuICAgIGNvbnN0IG5vU3BhY2luZ0lubmVyUmFkaXVzID0gaW5uZXJSID4gMCA/IGlubmVyUiAtIHNwYWNpbmcgOiAwO1xuICAgIGNvbnN0IG5vU3BhY2luZ091dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgPiAwID8gb3V0ZXJSYWRpdXMgLSBzcGFjaW5nIDogMDtcbiAgICBjb25zdCBhdk5vZ1NwYWNpbmdSYWRpdXMgPSAobm9TcGFjaW5nSW5uZXJSYWRpdXMgKyBub1NwYWNpbmdPdXRlclJhZGl1cykgLyAyO1xuICAgIGNvbnN0IGFkanVzdGVkQW5nbGUgPSBhdk5vZ1NwYWNpbmdSYWRpdXMgIT09IDAgPyAoYWxwaGEgKiBhdk5vZ1NwYWNpbmdSYWRpdXMpIC8gKGF2Tm9nU3BhY2luZ1JhZGl1cyArIHNwYWNpbmcpIDogYWxwaGE7XG4gICAgc3BhY2luZ09mZnNldCA9IChhbHBoYSAtIGFkanVzdGVkQW5nbGUpIC8gMjtcbiAgfVxuICBjb25zdCBiZXRhID0gTWF0aC5tYXgoMC4wMDEsIGFscGhhICogb3V0ZXJSYWRpdXMgLSBvZmZzZXQgLyBQSSkgLyBvdXRlclJhZGl1cztcbiAgY29uc3QgYW5nbGVPZmZzZXQgPSAoYWxwaGEgLSBiZXRhKSAvIDI7XG4gIGNvbnN0IHN0YXJ0QW5nbGUgPSBzdGFydCArIGFuZ2xlT2Zmc2V0ICsgc3BhY2luZ09mZnNldDtcbiAgY29uc3QgZW5kQW5nbGUgPSBlbmQgLSBhbmdsZU9mZnNldCAtIHNwYWNpbmdPZmZzZXQ7XG4gIGNvbnN0IHtvdXRlclN0YXJ0LCBvdXRlckVuZCwgaW5uZXJTdGFydCwgaW5uZXJFbmR9ID0gcGFyc2VCb3JkZXJSYWRpdXMkMShlbGVtZW50LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJTdGFydDtcbiAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJFbmQ7XG4gIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIG91dGVyU3RhcnQgLyBvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gb3V0ZXJFbmQgLyBvdXRlckVuZEFkanVzdGVkUmFkaXVzO1xuICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyU3RhcnQ7XG4gIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyRW5kO1xuICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICBjb25zdCBpbm5lckVuZEFkanVzdGVkQW5nbGUgPSBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJFbmRBZGp1c3RlZFJhZGl1cztcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKTtcbiAgaWYgKG91dGVyRW5kID4gMCkge1xuICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyRW5kQWRqdXN0ZWRSYWRpdXMsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJFbmQsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgZW5kQW5nbGUgKyBIQUxGX1BJKTtcbiAgfVxuICBjb25zdCBwNCA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgZW5kQW5nbGUsIHgsIHkpO1xuICBjdHgubGluZVRvKHA0LngsIHA0LnkpO1xuICBpZiAoaW5uZXJFbmQgPiAwKSB7XG4gICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lckVuZCwgZW5kQW5nbGUgKyBIQUxGX1BJLCBpbm5lckVuZEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJKTtcbiAgfVxuICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSAtIChpbm5lckVuZCAvIGlubmVyUmFkaXVzKSwgc3RhcnRBbmdsZSArIChpbm5lclN0YXJ0IC8gaW5uZXJSYWRpdXMpLCB0cnVlKTtcbiAgaWYgKGlubmVyU3RhcnQgPiAwKSB7XG4gICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzLCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJTdGFydCwgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gIH1cbiAgY29uc3QgcDggPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgc3RhcnRBbmdsZSwgeCwgeSk7XG4gIGN0eC5saW5lVG8ocDgueCwgcDgueSk7XG4gIGlmIChvdXRlclN0YXJ0ID4gMCkge1xuICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyU3RhcnQsIHN0YXJ0QW5nbGUgLSBIQUxGX1BJLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSk7XG4gIH1cbiAgY3R4LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd0FyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZykge1xuICBjb25zdCB7ZnVsbENpcmNsZXMsIHN0YXJ0QW5nbGUsIGNpcmN1bWZlcmVuY2V9ID0gZWxlbWVudDtcbiAgbGV0IGVuZEFuZ2xlID0gZWxlbWVudC5lbmRBbmdsZTtcbiAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgc3RhcnRBbmdsZSArIFRBVSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKSB7XG4gICAgICBjdHguZmlsbCgpO1xuICAgIH1cbiAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlICUgVEFVO1xuICAgICAgaWYgKGNpcmN1bWZlcmVuY2UgJSBUQVUgPT09IDApIHtcbiAgICAgICAgZW5kQW5nbGUgKz0gVEFVO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSk7XG4gIGN0eC5maWxsKCk7XG4gIHJldHVybiBlbmRBbmdsZTtcbn1cbmZ1bmN0aW9uIGRyYXdGdWxsQ2lyY2xlQm9yZGVycyhjdHgsIGVsZW1lbnQsIGlubmVyKSB7XG4gIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlLCBwaXhlbE1hcmdpbiwgZnVsbENpcmNsZXN9ID0gZWxlbWVudDtcbiAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzIC0gcGl4ZWxNYXJnaW4sIDApO1xuICBjb25zdCBpbm5lclJhZGl1cyA9IGVsZW1lbnQuaW5uZXJSYWRpdXMgKyBwaXhlbE1hcmdpbjtcbiAgbGV0IGk7XG4gIGlmIChpbm5lcikge1xuICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBzdGFydEFuZ2xlICsgVEFVKTtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIHN0YXJ0QW5nbGUgKyBUQVUsIHN0YXJ0QW5nbGUsIHRydWUpO1xuICBmb3IgKGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUsIHN0YXJ0QW5nbGUgKyBUQVUpO1xuICBmb3IgKGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuZnVuY3Rpb24gZHJhd0JvcmRlcihjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUpIHtcbiAgY29uc3Qge29wdGlvbnN9ID0gZWxlbWVudDtcbiAgY29uc3Qge2JvcmRlcldpZHRoLCBib3JkZXJKb2luU3R5bGV9ID0gb3B0aW9ucztcbiAgY29uc3QgaW5uZXIgPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInO1xuICBpZiAoIWJvcmRlcldpZHRoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbm5lcikge1xuICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aCAqIDI7XG4gICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdyb3VuZCc7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAnYmV2ZWwnO1xuICB9XG4gIGlmIChlbGVtZW50LmZ1bGxDaXJjbGVzKSB7XG4gICAgZHJhd0Z1bGxDaXJjbGVCb3JkZXJzKGN0eCwgZWxlbWVudCwgaW5uZXIpO1xuICB9XG4gIGlmIChpbm5lcikge1xuICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSk7XG4gIH1cbiAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUpO1xuICBjdHguc3Ryb2tlKCk7XG59XG5jbGFzcyBBcmNFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN0YXJ0QW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5waXhlbE1hcmdpbiA9IDA7XG4gICAgdGhpcy5mdWxsQ2lyY2xlcyA9IDA7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBpblJhbmdlKGNoYXJ0WCwgY2hhcnRZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgcG9pbnQgPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHthbmdsZSwgZGlzdGFuY2V9ID0gZ2V0QW5nbGVGcm9tUG9pbnQocG9pbnQsIHt4OiBjaGFydFgsIHk6IGNoYXJ0WX0pO1xuICAgIGNvbnN0IHtzdGFydEFuZ2xlLCBlbmRBbmdsZSwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBjaXJjdW1mZXJlbmNlfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgJ2NpcmN1bWZlcmVuY2UnXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgckFkanVzdCA9IHRoaXMub3B0aW9ucy5zcGFjaW5nIC8gMjtcbiAgICBjb25zdCBfY2lyY3VtZmVyZW5jZSA9IHZhbHVlT3JEZWZhdWx0KGNpcmN1bWZlcmVuY2UsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgY29uc3QgYmV0d2VlbkFuZ2xlcyA9IF9jaXJjdW1mZXJlbmNlID49IFRBVSB8fCBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgY29uc3Qgd2l0aGluUmFkaXVzID0gX2lzQmV0d2VlbihkaXN0YW5jZSwgaW5uZXJSYWRpdXMgKyByQWRqdXN0LCBvdXRlclJhZGl1cyArIHJBZGp1c3QpO1xuICAgIHJldHVybiAoYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXMpO1xuICB9XG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1c30gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICd4JyxcbiAgICAgICd5JyxcbiAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICdlbmRBbmdsZScsXG4gICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgJ291dGVyUmFkaXVzJyxcbiAgICAgICdjaXJjdW1mZXJlbmNlJyxcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCB7b2Zmc2V0LCBzcGFjaW5nfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBoYWxmQW5nbGUgPSAoc3RhcnRBbmdsZSArIGVuZEFuZ2xlKSAvIDI7XG4gICAgY29uc3QgaGFsZlJhZGl1cyA9IChpbm5lclJhZGl1cyArIG91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCkgLyAyO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXMsXG4gICAgICB5OiB5ICsgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXNcbiAgICB9O1xuICB9XG4gIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgY2lyY3VtZmVyZW5jZX0gPSB0aGlzO1xuICAgIGNvbnN0IG9mZnNldCA9IChvcHRpb25zLm9mZnNldCB8fCAwKSAvIDI7XG4gICAgY29uc3Qgc3BhY2luZyA9IChvcHRpb25zLnNwYWNpbmcgfHwgMCkgLyAyO1xuICAgIHRoaXMucGl4ZWxNYXJnaW4gPSAob3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJykgPyAwLjMzIDogMDtcbiAgICB0aGlzLmZ1bGxDaXJjbGVzID0gY2lyY3VtZmVyZW5jZSA+IFRBVSA/IE1hdGguZmxvb3IoY2lyY3VtZmVyZW5jZSAvIFRBVSkgOiAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlID09PSAwIHx8IHRoaXMuaW5uZXJSYWRpdXMgPCAwIHx8IHRoaXMub3V0ZXJSYWRpdXMgPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgbGV0IHJhZGl1c09mZnNldCA9IDA7XG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgcmFkaXVzT2Zmc2V0ID0gb2Zmc2V0IC8gMjtcbiAgICAgIGNvbnN0IGhhbGZBbmdsZSA9ICh0aGlzLnN0YXJ0QW5nbGUgKyB0aGlzLmVuZEFuZ2xlKSAvIDI7XG4gICAgICBjdHgudHJhbnNsYXRlKE1hdGguY29zKGhhbGZBbmdsZSkgKiByYWRpdXNPZmZzZXQsIE1hdGguc2luKGhhbGZBbmdsZSkgKiByYWRpdXNPZmZzZXQpO1xuICAgICAgaWYgKHRoaXMuY2lyY3VtZmVyZW5jZSA+PSBQSSkge1xuICAgICAgICByYWRpdXNPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gZHJhd0FyYyhjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZyk7XG4gICAgZHJhd0JvcmRlcihjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgZW5kQW5nbGUpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbkFyY0VsZW1lbnQuaWQgPSAnYXJjJztcbkFyY0VsZW1lbnQuZGVmYXVsdHMgPSB7XG4gIGJvcmRlckFsaWduOiAnY2VudGVyJyxcbiAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgYm9yZGVySm9pblN0eWxlOiB1bmRlZmluZWQsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgYm9yZGVyV2lkdGg6IDIsXG4gIG9mZnNldDogMCxcbiAgc3BhY2luZzogMCxcbiAgYW5nbGU6IHVuZGVmaW5lZCxcbn07XG5BcmNFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcidcbn07XG5cbmZ1bmN0aW9uIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc3R5bGUgPSBvcHRpb25zKSB7XG4gIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyQ2FwU3R5bGUsIG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUpO1xuICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaCwgb3B0aW9ucy5ib3JkZXJEYXNoKSk7XG4gIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsIG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCk7XG4gIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckpvaW5TdHlsZSwgb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUpO1xuICBjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDb2xvciwgb3B0aW9ucy5ib3JkZXJDb2xvcik7XG59XG5mdW5jdGlvbiBsaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0KSB7XG4gIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIGdldExpbmVNZXRob2Qob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgcmV0dXJuIF9zdGVwcGVkTGluZVRvO1xuICB9XG4gIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgcmV0dXJuIF9iZXppZXJDdXJ2ZVRvO1xuICB9XG4gIHJldHVybiBsaW5lVG87XG59XG5mdW5jdGlvbiBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyA9IHt9KSB7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3Qge3N0YXJ0OiBwYXJhbXNTdGFydCA9IDAsIGVuZDogcGFyYW1zRW5kID0gY291bnQgLSAxfSA9IHBhcmFtcztcbiAgY29uc3Qge3N0YXJ0OiBzZWdtZW50U3RhcnQsIGVuZDogc2VnbWVudEVuZH0gPSBzZWdtZW50O1xuICBjb25zdCBzdGFydCA9IE1hdGgubWF4KHBhcmFtc1N0YXJ0LCBzZWdtZW50U3RhcnQpO1xuICBjb25zdCBlbmQgPSBNYXRoLm1pbihwYXJhbXNFbmQsIHNlZ21lbnRFbmQpO1xuICBjb25zdCBvdXRzaWRlID0gcGFyYW1zU3RhcnQgPCBzZWdtZW50U3RhcnQgJiYgcGFyYW1zRW5kIDwgc2VnbWVudFN0YXJ0IHx8IHBhcmFtc1N0YXJ0ID4gc2VnbWVudEVuZCAmJiBwYXJhbXNFbmQgPiBzZWdtZW50RW5kO1xuICByZXR1cm4ge1xuICAgIGNvdW50LFxuICAgIHN0YXJ0LFxuICAgIGxvb3A6IHNlZ21lbnQubG9vcCxcbiAgICBpbGVuOiBlbmQgPCBzdGFydCAmJiAhb3V0c2lkZSA/IGNvdW50ICsgZW5kIC0gc3RhcnQgOiBlbmQgLSBzdGFydFxuICB9O1xufVxuZnVuY3Rpb24gcGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgY29uc3Qge3BvaW50cywgb3B0aW9uc30gPSBsaW5lO1xuICBjb25zdCB7Y291bnQsIHN0YXJ0LCBsb29wLCBpbGVufSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgY29uc3QgbGluZU1ldGhvZCA9IGdldExpbmVNZXRob2Qob3B0aW9ucyk7XG4gIGxldCB7bW92ZSA9IHRydWUsIHJldmVyc2V9ID0gcGFyYW1zIHx8IHt9O1xuICBsZXQgaSwgcG9pbnQsIHByZXY7XG4gIGZvciAoaSA9IDA7IGkgPD0gaWxlbjsgKytpKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaSA6IGkpKSAlIGNvdW50XTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChtb3ZlKSB7XG4gICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgbW92ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgfVxuICAgIHByZXYgPSBwb2ludDtcbiAgfVxuICBpZiAobG9vcCkge1xuICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiA6IDApKSAlIGNvdW50XTtcbiAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gIH1cbiAgcmV0dXJuICEhbG9vcDtcbn1cbmZ1bmN0aW9uIGZhc3RQYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3Qge2NvdW50LCBzdGFydCwgaWxlbn0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gIGNvbnN0IHttb3ZlID0gdHJ1ZSwgcmV2ZXJzZX0gPSBwYXJhbXMgfHwge307XG4gIGxldCBhdmdYID0gMDtcbiAgbGV0IGNvdW50WCA9IDA7XG4gIGxldCBpLCBwb2ludCwgcHJldlgsIG1pblksIG1heFksIGxhc3RZO1xuICBjb25zdCBwb2ludEluZGV4ID0gKGluZGV4KSA9PiAoc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpbmRleCA6IGluZGV4KSkgJSBjb3VudDtcbiAgY29uc3QgZHJhd1ggPSAoKSA9PiB7XG4gICAgaWYgKG1pblkgIT09IG1heFkpIHtcbiAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWF4WSk7XG4gICAgICBjdHgubGluZVRvKGF2Z1gsIG1pblkpO1xuICAgICAgY3R4LmxpbmVUbyhhdmdYLCBsYXN0WSk7XG4gICAgfVxuICB9O1xuICBpZiAobW92ZSkge1xuICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoMCldO1xuICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8PSBpbGVuOyArK2kpIHtcbiAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KGkpXTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHggPSBwb2ludC54O1xuICAgIGNvbnN0IHkgPSBwb2ludC55O1xuICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgbWluWSA9IHk7XG4gICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgIG1heFkgPSB5O1xuICAgICAgfVxuICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgeCkgLyArK2NvdW50WDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhd1goKTtcbiAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgIGNvdW50WCA9IDA7XG4gICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgfVxuICAgIGxhc3RZID0geTtcbiAgfVxuICBkcmF3WCgpO1xufVxuZnVuY3Rpb24gX2dldFNlZ21lbnRNZXRob2QobGluZSkge1xuICBjb25zdCBvcHRzID0gbGluZS5vcHRpb25zO1xuICBjb25zdCBib3JkZXJEYXNoID0gb3B0cy5ib3JkZXJEYXNoICYmIG9wdHMuYm9yZGVyRGFzaC5sZW5ndGg7XG4gIGNvbnN0IHVzZUZhc3RQYXRoID0gIWxpbmUuX2RlY2ltYXRlZCAmJiAhbGluZS5fbG9vcCAmJiAhb3B0cy50ZW5zaW9uICYmIG9wdHMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSAhPT0gJ21vbm90b25lJyAmJiAhb3B0cy5zdGVwcGVkICYmICFib3JkZXJEYXNoO1xuICByZXR1cm4gdXNlRmFzdFBhdGggPyBmYXN0UGF0aFNlZ21lbnQgOiBwYXRoU2VnbWVudDtcbn1cbmZ1bmN0aW9uIF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgIHJldHVybiBfc3RlcHBlZEludGVycG9sYXRpb247XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICByZXR1cm4gX2JlemllckludGVycG9sYXRpb247XG4gIH1cbiAgcmV0dXJuIF9wb2ludEluTGluZTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgbGV0IHBhdGggPSBsaW5lLl9wYXRoO1xuICBpZiAoIXBhdGgpIHtcbiAgICBwYXRoID0gbGluZS5fcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICBpZiAobGluZS5wYXRoKHBhdGgsIHN0YXJ0LCBjb3VudCkpIHtcbiAgICAgIHBhdGguY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XG4gIHNldFN0eWxlKGN0eCwgbGluZS5vcHRpb25zKTtcbiAgY3R4LnN0cm9rZShwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgY29uc3Qge3NlZ21lbnRzLCBvcHRpb25zfSA9IGxpbmU7XG4gIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzZWdtZW50LnN0eWxlKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgaWYgKHNlZ21lbnRNZXRob2QoY3R4LCBsaW5lLCBzZWdtZW50LCB7c3RhcnQsIGVuZDogc3RhcnQgKyBjb3VudCAtIDF9KSkge1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmNvbnN0IHVzZVBhdGgyRCA9IHR5cGVvZiBQYXRoMkQgPT09ICdmdW5jdGlvbic7XG5mdW5jdGlvbiBkcmF3KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gIGlmICh1c2VQYXRoMkQgJiYgIWxpbmUub3B0aW9ucy5zZWdtZW50KSB7XG4gICAgc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbn1cbmNsYXNzIExpbmVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2NoYXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2xvb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZnVsbExvb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2VnbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZGVjaW1hdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2RhdGFzZXRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZUNvbnRyb2xQb2ludHMoY2hhcnRBcmVhLCBpbmRleEF4aXMpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICgob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykgJiYgIW9wdGlvbnMuc3RlcHBlZCAmJiAhdGhpcy5fcG9pbnRzVXBkYXRlZCkge1xuICAgICAgY29uc3QgbG9vcCA9IG9wdGlvbnMuc3BhbkdhcHMgPyB0aGlzLl9sb29wIDogdGhpcy5fZnVsbExvb3A7XG4gICAgICBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyh0aGlzLl9wb2ludHMsIG9wdGlvbnMsIGNoYXJ0QXJlYSwgbG9vcCwgaW5kZXhBeGlzKTtcbiAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBzZXQgcG9pbnRzKHBvaW50cykge1xuICAgIHRoaXMuX3BvaW50cyA9IHBvaW50cztcbiAgICBkZWxldGUgdGhpcy5fc2VnbWVudHM7XG4gICAgZGVsZXRlIHRoaXMuX3BhdGg7XG4gICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICB9XG4gIGdldCBwb2ludHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgfVxuICBnZXQgc2VnbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlZ21lbnRzIHx8ICh0aGlzLl9zZWdtZW50cyA9IF9jb21wdXRlU2VnbWVudHModGhpcywgdGhpcy5vcHRpb25zLnNlZ21lbnQpKTtcbiAgfVxuICBmaXJzdCgpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCAmJiBwb2ludHNbc2VnbWVudHNbMF0uc3RhcnRdO1xuICB9XG4gIGxhc3QoKSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgIGNvbnN0IGNvdW50ID0gc2VnbWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBjb3VudCAmJiBwb2ludHNbc2VnbWVudHNbY291bnQgLSAxXS5lbmRdO1xuICB9XG4gIGludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0aGlzLCB7cHJvcGVydHksIHN0YXJ0OiB2YWx1ZSwgZW5kOiB2YWx1ZX0pO1xuICAgIGlmICghc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IF9pbnRlcnBvbGF0ZSA9IF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IHtzdGFydCwgZW5kfSA9IHNlZ21lbnRzW2ldO1xuICAgICAgY29uc3QgcDEgPSBwb2ludHNbc3RhcnRdO1xuICAgICAgY29uc3QgcDIgPSBwb2ludHNbZW5kXTtcbiAgICAgIGlmIChwMSA9PT0gcDIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocDEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHQgPSBNYXRoLmFicygodmFsdWUgLSBwMVtwcm9wZXJ0eV0pIC8gKHAyW3Byb3BlcnR5XSAtIHAxW3Byb3BlcnR5XSkpO1xuICAgICAgY29uc3QgaW50ZXJwb2xhdGVkID0gX2ludGVycG9sYXRlKHAxLCBwMiwgdCwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgIGludGVycG9sYXRlZFtwcm9wZXJ0eV0gPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgfVxuICBwYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICByZXR1cm4gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gIH1cbiAgcGF0aChjdHgsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgbGV0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICBjb3VudCA9IGNvdW50IHx8ICh0aGlzLnBvaW50cy5sZW5ndGggLSBzdGFydCk7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgICBsb29wICY9IHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCB7c3RhcnQsIGVuZDogc3RhcnQgKyBjb3VudCAtIDF9KTtcbiAgICB9XG4gICAgcmV0dXJuICEhbG9vcDtcbiAgfVxuICBkcmF3KGN0eCwgY2hhcnRBcmVhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzIHx8IFtdO1xuICAgIGlmIChwb2ludHMubGVuZ3RoICYmIG9wdGlvbnMuYm9yZGVyV2lkdGgpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBkcmF3KGN0eCwgdGhpcywgc3RhcnQsIGNvdW50KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFuaW1hdGVkKSB7XG4gICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuTGluZUVsZW1lbnQuaWQgPSAnbGluZSc7XG5MaW5lRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgYm9yZGVyRGFzaDogW10sXG4gIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgYm9yZGVyV2lkdGg6IDMsXG4gIGNhcEJlemllclBvaW50czogdHJ1ZSxcbiAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ2RlZmF1bHQnLFxuICBmaWxsOiBmYWxzZSxcbiAgc3BhbkdhcHM6IGZhbHNlLFxuICBzdGVwcGVkOiBmYWxzZSxcbiAgdGVuc2lvbjogMCxcbn07XG5MaW5lRWxlbWVudC5kZWZhdWx0Um91dGVzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xufTtcbkxpbmVFbGVtZW50LmRlc2NyaXB0b3JzID0ge1xuICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZmlsbCcsXG59O1xuXG5mdW5jdGlvbiBpblJhbmdlJDEoZWwsIHBvcywgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBvcHRpb25zID0gZWwub3B0aW9ucztcbiAgY29uc3Qge1theGlzXTogdmFsdWV9ID0gZWwuZ2V0UHJvcHMoW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgcmV0dXJuIChNYXRoLmFicyhwb3MgLSB2YWx1ZSkgPCBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzKTtcbn1cbmNsYXNzIFBvaW50RWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhcnNlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNraXAgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdG9wID0gdW5kZWZpbmVkO1xuICAgIGlmIChjZmcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICB9XG4gIH1cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge3gsIHl9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gKChNYXRoLnBvdyhtb3VzZVggLSB4LCAyKSArIE1hdGgucG93KG1vdXNlWSAtIHksIDIpKSA8IE1hdGgucG93KG9wdGlvbnMuaGl0UmFkaXVzICsgb3B0aW9ucy5yYWRpdXMsIDIpKTtcbiAgfVxuICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWCwgJ3gnLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWSwgJ3knLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4ge3gsIHl9O1xuICB9XG4gIHNpemUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICBsZXQgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXMgfHwgMDtcbiAgICByYWRpdXMgPSBNYXRoLm1heChyYWRpdXMsIHJhZGl1cyAmJiBvcHRpb25zLmhvdmVyUmFkaXVzIHx8IDApO1xuICAgIGNvbnN0IGJvcmRlcldpZHRoID0gcmFkaXVzICYmIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICByZXR1cm4gKHJhZGl1cyArIGJvcmRlcldpZHRoKSAqIDI7XG4gIH1cbiAgZHJhdyhjdHgsIGFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICh0aGlzLnNraXAgfHwgb3B0aW9ucy5yYWRpdXMgPCAwLjEgfHwgIV9pc1BvaW50SW5BcmVhKHRoaXMsIGFyZWEsIHRoaXMuc2l6ZShvcHRpb25zKSAvIDIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHRoaXMueCwgdGhpcy55KTtcbiAgfVxuICBnZXRSYW5nZSgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xuICB9XG59XG5Qb2ludEVsZW1lbnQuaWQgPSAncG9pbnQnO1xuUG9pbnRFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJXaWR0aDogMSxcbiAgaGl0UmFkaXVzOiAxLFxuICBob3ZlckJvcmRlcldpZHRoOiAxLFxuICBob3ZlclJhZGl1czogNCxcbiAgcG9pbnRTdHlsZTogJ2NpcmNsZScsXG4gIHJhZGl1czogMyxcbiAgcm90YXRpb246IDBcbn07XG5Qb2ludEVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbn07XG5cbmZ1bmN0aW9uIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qge3gsIHksIGJhc2UsIHdpZHRoLCBoZWlnaHR9ID0gYmFyLmdldFByb3BzKFsneCcsICd5JywgJ2Jhc2UnLCAnd2lkdGgnLCAnaGVpZ2h0J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICBsZXQgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBoYWxmO1xuICBpZiAoYmFyLmhvcml6b250YWwpIHtcbiAgICBoYWxmID0gaGVpZ2h0IC8gMjtcbiAgICBsZWZ0ID0gTWF0aC5taW4oeCwgYmFzZSk7XG4gICAgcmlnaHQgPSBNYXRoLm1heCh4LCBiYXNlKTtcbiAgICB0b3AgPSB5IC0gaGFsZjtcbiAgICBib3R0b20gPSB5ICsgaGFsZjtcbiAgfSBlbHNlIHtcbiAgICBoYWxmID0gd2lkdGggLyAyO1xuICAgIGxlZnQgPSB4IC0gaGFsZjtcbiAgICByaWdodCA9IHggKyBoYWxmO1xuICAgIHRvcCA9IE1hdGgubWluKHksIGJhc2UpO1xuICAgIGJvdHRvbSA9IE1hdGgubWF4KHksIGJhc2UpO1xuICB9XG4gIHJldHVybiB7bGVmdCwgdG9wLCByaWdodCwgYm90dG9tfTtcbn1cbmZ1bmN0aW9uIHNraXBPckxpbWl0KHNraXAsIHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gc2tpcCA/IDAgOiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpO1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJXaWR0aChiYXIsIG1heFcsIG1heEgpIHtcbiAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCBvID0gdG9UUkJMKHZhbHVlKTtcbiAgcmV0dXJuIHtcbiAgICB0OiBza2lwT3JMaW1pdChza2lwLnRvcCwgby50b3AsIDAsIG1heEgpLFxuICAgIHI6IHNraXBPckxpbWl0KHNraXAucmlnaHQsIG8ucmlnaHQsIDAsIG1heFcpLFxuICAgIGI6IHNraXBPckxpbWl0KHNraXAuYm90dG9tLCBvLmJvdHRvbSwgMCwgbWF4SCksXG4gICAgbDogc2tpcE9yTGltaXQoc2tpcC5sZWZ0LCBvLmxlZnQsIDAsIG1heFcpXG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIG1heFcsIG1heEgpIHtcbiAgY29uc3Qge2VuYWJsZUJvcmRlclJhZGl1c30gPSBiYXIuZ2V0UHJvcHMoWydlbmFibGVCb3JkZXJSYWRpdXMnXSk7XG4gIGNvbnN0IHZhbHVlID0gYmFyLm9wdGlvbnMuYm9yZGVyUmFkaXVzO1xuICBjb25zdCBvID0gdG9UUkJMQ29ybmVycyh2YWx1ZSk7XG4gIGNvbnN0IG1heFIgPSBNYXRoLm1pbihtYXhXLCBtYXhIKTtcbiAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCBlbmFibGVCb3JkZXIgPSBlbmFibGVCb3JkZXJSYWRpdXMgfHwgaXNPYmplY3QodmFsdWUpO1xuICByZXR1cm4ge1xuICAgIHRvcExlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5sZWZ0LCBvLnRvcExlZnQsIDAsIG1heFIpLFxuICAgIHRvcFJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAucmlnaHQsIG8udG9wUmlnaHQsIDAsIG1heFIpLFxuICAgIGJvdHRvbUxlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5sZWZ0LCBvLmJvdHRvbUxlZnQsIDAsIG1heFIpLFxuICAgIGJvdHRvbVJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAucmlnaHQsIG8uYm90dG9tUmlnaHQsIDAsIG1heFIpXG4gIH07XG59XG5mdW5jdGlvbiBib3VuZGluZ1JlY3RzKGJhcikge1xuICBjb25zdCBib3VuZHMgPSBnZXRCYXJCb3VuZHMoYmFyKTtcbiAgY29uc3Qgd2lkdGggPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcbiAgY29uc3QgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG4gIGNvbnN0IGJvcmRlciA9IHBhcnNlQm9yZGVyV2lkdGgoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICBjb25zdCByYWRpdXMgPSBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gIHJldHVybiB7XG4gICAgb3V0ZXI6IHtcbiAgICAgIHg6IGJvdW5kcy5sZWZ0LFxuICAgICAgeTogYm91bmRzLnRvcCxcbiAgICAgIHc6IHdpZHRoLFxuICAgICAgaDogaGVpZ2h0LFxuICAgICAgcmFkaXVzXG4gICAgfSxcbiAgICBpbm5lcjoge1xuICAgICAgeDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcbiAgICAgIHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcbiAgICAgIHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcbiAgICAgIGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmIsXG4gICAgICByYWRpdXM6IHtcbiAgICAgICAgdG9wTGVmdDogTWF0aC5tYXgoMCwgcmFkaXVzLnRvcExlZnQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLmwpKSxcbiAgICAgICAgdG9wUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BSaWdodCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIucikpLFxuICAgICAgICBib3R0b21MZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tTGVmdCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIubCkpLFxuICAgICAgICBib3R0b21SaWdodDogTWF0aC5tYXgoMCwgcmFkaXVzLmJvdHRvbVJpZ2h0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5yKSksXG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5SYW5nZShiYXIsIHgsIHksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qgc2tpcFggPSB4ID09PSBudWxsO1xuICBjb25zdCBza2lwWSA9IHkgPT09IG51bGw7XG4gIGNvbnN0IHNraXBCb3RoID0gc2tpcFggJiYgc2tpcFk7XG4gIGNvbnN0IGJvdW5kcyA9IGJhciAmJiAhc2tpcEJvdGggJiYgZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbik7XG4gIHJldHVybiBib3VuZHNcblx0XHQmJiAoc2tpcFggfHwgX2lzQmV0d2Vlbih4LCBib3VuZHMubGVmdCwgYm91bmRzLnJpZ2h0KSlcblx0XHQmJiAoc2tpcFkgfHwgX2lzQmV0d2Vlbih5LCBib3VuZHMudG9wLCBib3VuZHMuYm90dG9tKSk7XG59XG5mdW5jdGlvbiBoYXNSYWRpdXMocmFkaXVzKSB7XG4gIHJldHVybiByYWRpdXMudG9wTGVmdCB8fCByYWRpdXMudG9wUmlnaHQgfHwgcmFkaXVzLmJvdHRvbUxlZnQgfHwgcmFkaXVzLmJvdHRvbVJpZ2h0O1xufVxuZnVuY3Rpb24gYWRkTm9ybWFsUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gIGN0eC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG59XG5mdW5jdGlvbiBpbmZsYXRlUmVjdChyZWN0LCBhbW91bnQsIHJlZlJlY3QgPSB7fSkge1xuICBjb25zdCB4ID0gcmVjdC54ICE9PSByZWZSZWN0LnggPyAtYW1vdW50IDogMDtcbiAgY29uc3QgeSA9IHJlY3QueSAhPT0gcmVmUmVjdC55ID8gLWFtb3VudCA6IDA7XG4gIGNvbnN0IHcgPSAocmVjdC54ICsgcmVjdC53ICE9PSByZWZSZWN0LnggKyByZWZSZWN0LncgPyBhbW91bnQgOiAwKSAtIHg7XG4gIGNvbnN0IGggPSAocmVjdC55ICsgcmVjdC5oICE9PSByZWZSZWN0LnkgKyByZWZSZWN0LmggPyBhbW91bnQgOiAwKSAtIHk7XG4gIHJldHVybiB7XG4gICAgeDogcmVjdC54ICsgeCxcbiAgICB5OiByZWN0LnkgKyB5LFxuICAgIHc6IHJlY3QudyArIHcsXG4gICAgaDogcmVjdC5oICsgaCxcbiAgICByYWRpdXM6IHJlY3QucmFkaXVzXG4gIH07XG59XG5jbGFzcyBCYXJFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaG9yaXpvbnRhbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJhc2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmluZmxhdGVBbW91bnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHtpbmZsYXRlQW1vdW50LCBvcHRpb25zOiB7Ym9yZGVyQ29sb3IsIGJhY2tncm91bmRDb2xvcn19ID0gdGhpcztcbiAgICBjb25zdCB7aW5uZXIsIG91dGVyfSA9IGJvdW5kaW5nUmVjdHModGhpcyk7XG4gICAgY29uc3QgYWRkUmVjdFBhdGggPSBoYXNSYWRpdXMob3V0ZXIucmFkaXVzKSA/IGFkZFJvdW5kZWRSZWN0UGF0aCA6IGFkZE5vcm1hbFJlY3RQYXRoO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKG91dGVyLncgIT09IGlubmVyLncgfHwgb3V0ZXIuaCAhPT0gaW5uZXIuaCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChvdXRlciwgaW5mbGF0ZUFtb3VudCwgaW5uZXIpKTtcbiAgICAgIGN0eC5jbGlwKCk7XG4gICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCAtaW5mbGF0ZUFtb3VudCwgb3V0ZXIpKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5maWxsKCdldmVub2RkJyk7XG4gICAgfVxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCBpbmZsYXRlQW1vdW50KSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG51bGwsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG51bGwsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5LCBiYXNlLCBob3Jpem9udGFsfSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knLCAnYmFzZScsICdob3Jpem9udGFsJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBob3Jpem9udGFsID8gKHggKyBiYXNlKSAvIDIgOiB4LFxuICAgICAgeTogaG9yaXpvbnRhbCA/IHkgOiAoeSArIGJhc2UpIC8gMlxuICAgIH07XG4gIH1cbiAgZ2V0UmFuZ2UoYXhpcykge1xuICAgIHJldHVybiBheGlzID09PSAneCcgPyB0aGlzLndpZHRoIC8gMiA6IHRoaXMuaGVpZ2h0IC8gMjtcbiAgfVxufVxuQmFyRWxlbWVudC5pZCA9ICdiYXInO1xuQmFyRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyU2tpcHBlZDogJ3N0YXJ0JyxcbiAgYm9yZGVyV2lkdGg6IDAsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgaW5mbGF0ZUFtb3VudDogJ2F1dG8nLFxuICBwb2ludFN0eWxlOiB1bmRlZmluZWRcbn07XG5CYXJFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG59O1xuXG52YXIgZWxlbWVudHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5BcmNFbGVtZW50OiBBcmNFbGVtZW50LFxuTGluZUVsZW1lbnQ6IExpbmVFbGVtZW50LFxuUG9pbnRFbGVtZW50OiBQb2ludEVsZW1lbnQsXG5CYXJFbGVtZW50OiBCYXJFbGVtZW50XG59KTtcblxuZnVuY3Rpb24gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucykge1xuICBjb25zdCBzYW1wbGVzID0gb3B0aW9ucy5zYW1wbGVzIHx8IGF2YWlsYWJsZVdpZHRoO1xuICBpZiAoc2FtcGxlcyA+PSBjb3VudCkge1xuICAgIHJldHVybiBkYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgfVxuICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgY29uc3QgYnVja2V0V2lkdGggPSAoY291bnQgLSAyKSAvIChzYW1wbGVzIC0gMik7XG4gIGxldCBzYW1wbGVkSW5kZXggPSAwO1xuICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICBsZXQgYSA9IHN0YXJ0O1xuICBsZXQgaSwgbWF4QXJlYVBvaW50LCBtYXhBcmVhLCBhcmVhLCBuZXh0QTtcbiAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbYV07XG4gIGZvciAoaSA9IDA7IGkgPCBzYW1wbGVzIC0gMjsgaSsrKSB7XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBhdmdZID0gMDtcbiAgICBsZXQgajtcbiAgICBjb25zdCBhdmdSYW5nZVN0YXJ0ID0gTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgIGNvbnN0IGF2Z1JhbmdlRW5kID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSArIDIpICogYnVja2V0V2lkdGgpICsgMSwgY291bnQpICsgc3RhcnQ7XG4gICAgY29uc3QgYXZnUmFuZ2VMZW5ndGggPSBhdmdSYW5nZUVuZCAtIGF2Z1JhbmdlU3RhcnQ7XG4gICAgZm9yIChqID0gYXZnUmFuZ2VTdGFydDsgaiA8IGF2Z1JhbmdlRW5kOyBqKyspIHtcbiAgICAgIGF2Z1ggKz0gZGF0YVtqXS54O1xuICAgICAgYXZnWSArPSBkYXRhW2pdLnk7XG4gICAgfVxuICAgIGF2Z1ggLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgYXZnWSAvPSBhdmdSYW5nZUxlbmd0aDtcbiAgICBjb25zdCByYW5nZU9mZnMgPSBNYXRoLmZsb29yKGkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgY29uc3QgcmFuZ2VUbyA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgIGNvbnN0IHt4OiBwb2ludEF4LCB5OiBwb2ludEF5fSA9IGRhdGFbYV07XG4gICAgbWF4QXJlYSA9IGFyZWEgPSAtMTtcbiAgICBmb3IgKGogPSByYW5nZU9mZnM7IGogPCByYW5nZVRvOyBqKyspIHtcbiAgICAgIGFyZWEgPSAwLjUgKiBNYXRoLmFicyhcbiAgICAgICAgKHBvaW50QXggLSBhdmdYKSAqIChkYXRhW2pdLnkgLSBwb2ludEF5KSAtXG4gICAgICAgIChwb2ludEF4IC0gZGF0YVtqXS54KSAqIChhdmdZIC0gcG9pbnRBeSlcbiAgICAgICk7XG4gICAgICBpZiAoYXJlYSA+IG1heEFyZWEpIHtcbiAgICAgICAgbWF4QXJlYSA9IGFyZWE7XG4gICAgICAgIG1heEFyZWFQb2ludCA9IGRhdGFbal07XG4gICAgICAgIG5leHRBID0gajtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IG1heEFyZWFQb2ludDtcbiAgICBhID0gbmV4dEE7XG4gIH1cbiAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbZW5kSW5kZXhdO1xuICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKSB7XG4gIGxldCBhdmdYID0gMDtcbiAgbGV0IGNvdW50WCA9IDA7XG4gIGxldCBpLCBwb2ludCwgeCwgeSwgcHJldlgsIG1pbkluZGV4LCBtYXhJbmRleCwgc3RhcnRJbmRleCwgbWluWSwgbWF4WTtcbiAgY29uc3QgZGVjaW1hdGVkID0gW107XG4gIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gIGNvbnN0IHhNaW4gPSBkYXRhW3N0YXJ0XS54O1xuICBjb25zdCB4TWF4ID0gZGF0YVtlbmRJbmRleF0ueDtcbiAgY29uc3QgZHggPSB4TWF4IC0geE1pbjtcbiAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICBwb2ludCA9IGRhdGFbaV07XG4gICAgeCA9IChwb2ludC54IC0geE1pbikgLyBkeCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgIHkgPSBwb2ludC55O1xuICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgbWluWSA9IHk7XG4gICAgICAgIG1pbkluZGV4ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGF2Z1ggPSAoY291bnRYICogYXZnWCArIHBvaW50LngpIC8gKytjb3VudFg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGkgLSAxO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmKG1pbkluZGV4KSAmJiAhaXNOdWxsT3JVbmRlZihtYXhJbmRleCkpIHtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgxID0gTWF0aC5taW4obWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgyID0gTWF0aC5tYXgobWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MSAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDEgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgxXSxcbiAgICAgICAgICAgIHg6IGF2Z1gsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MiAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDIgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgyXSxcbiAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPiAwICYmIGxhc3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICBkZWNpbWF0ZWQucHVzaChkYXRhW2xhc3RJbmRleF0pO1xuICAgICAgfVxuICAgICAgZGVjaW1hdGVkLnB1c2gocG9pbnQpO1xuICAgICAgcHJldlggPSB0cnVuY1g7XG4gICAgICBjb3VudFggPSAwO1xuICAgICAgbWluWSA9IG1heFkgPSB5O1xuICAgICAgbWluSW5kZXggPSBtYXhJbmRleCA9IHN0YXJ0SW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpIHtcbiAgaWYgKGRhdGFzZXQuX2RlY2ltYXRlZCkge1xuICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0Ll9kYXRhO1xuICAgIGRlbGV0ZSBkYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgZGVsZXRlIGRhdGFzZXQuX2RhdGE7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge3ZhbHVlOiBkYXRhfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCkge1xuICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQpID0+IHtcbiAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgcG9pbnRzKSB7XG4gIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgY291bnQ7XG4gIGNvbnN0IHtpU2NhbGV9ID0gbWV0YTtcbiAgY29uc3Qge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgc3RhcnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWluKS5sbywgMCwgcG9pbnRDb3VudCAtIDEpO1xuICB9XG4gIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgY291bnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWF4KS5oaSArIDEsIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICB9IGVsc2Uge1xuICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICB9XG4gIHJldHVybiB7c3RhcnQsIGNvdW50fTtcbn1cbnZhciBwbHVnaW5fZGVjaW1hdGlvbiA9IHtcbiAgaWQ6ICdkZWNpbWF0aW9uJyxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGdvcml0aG06ICdtaW4tbWF4JyxcbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgfSxcbiAgYmVmb3JlRWxlbWVudHNVcGRhdGU6IChjaGFydCwgYXJncywgb3B0aW9ucykgPT4ge1xuICAgIGlmICghb3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IGNoYXJ0LndpZHRoO1xuICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCwgZGF0YXNldEluZGV4KSA9PiB7XG4gICAgICBjb25zdCB7X2RhdGEsIGluZGV4QXhpc30gPSBkYXRhc2V0O1xuICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBjb25zdCBkYXRhID0gX2RhdGEgfHwgZGF0YXNldC5kYXRhO1xuICAgICAgaWYgKHJlc29sdmUoW2luZGV4QXhpcywgY2hhcnQub3B0aW9ucy5pbmRleEF4aXNdKSA9PT0gJ3knKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChtZXRhLnR5cGUgIT09ICdsaW5lJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB4QXhpcyA9IGNoYXJ0LnNjYWxlc1ttZXRhLnhBeGlzSURdO1xuICAgICAgaWYgKHhBeGlzLnR5cGUgIT09ICdsaW5lYXInICYmIHhBeGlzLnR5cGUgIT09ICd0aW1lJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY2hhcnQub3B0aW9ucy5wYXJzaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCB7c3RhcnQsIGNvdW50fSA9IGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIGRhdGEpO1xuICAgICAgY29uc3QgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQgfHwgNCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgaWYgKGNvdW50IDw9IHRocmVzaG9sZCkge1xuICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc051bGxPclVuZGVmKF9kYXRhKSkge1xuICAgICAgICBkYXRhc2V0Ll9kYXRhID0gZGF0YTtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVjaW1hdGVkO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbGV0IGRlY2ltYXRlZDtcbiAgICAgIHN3aXRjaCAob3B0aW9ucy5hbGdvcml0aG0pIHtcbiAgICAgIGNhc2UgJ2x0dGInOlxuICAgICAgICBkZWNpbWF0ZWQgPSBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaW4tbWF4JzpcbiAgICAgICAgZGVjaW1hdGVkID0gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRlY2ltYXRpb24gYWxnb3JpdGhtICcke29wdGlvbnMuYWxnb3JpdGhtfSdgKTtcbiAgICAgIH1cbiAgICAgIGRhdGFzZXQuX2RlY2ltYXRlZCA9IGRlY2ltYXRlZDtcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveShjaGFydCkge1xuICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldExpbmVCeUluZGV4KGNoYXJ0LCBpbmRleCkge1xuICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICBjb25zdCB2aXNpYmxlID0gbWV0YSAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KTtcbiAgcmV0dXJuIHZpc2libGUgPyBtZXRhLmRhdGFzZXQgOiBudWxsO1xufVxuZnVuY3Rpb24gcGFyc2VGaWxsT3B0aW9uKGxpbmUpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgZmlsbE9wdGlvbiA9IG9wdGlvbnMuZmlsbDtcbiAgbGV0IGZpbGwgPSB2YWx1ZU9yRGVmYXVsdChmaWxsT3B0aW9uICYmIGZpbGxPcHRpb24udGFyZ2V0LCBmaWxsT3B0aW9uKTtcbiAgaWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuICAgIGZpbGwgPSAhIW9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICB9XG4gIGlmIChmaWxsID09PSBmYWxzZSB8fCBmaWxsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChmaWxsID09PSB0cnVlKSB7XG4gICAgcmV0dXJuICdvcmlnaW4nO1xuICB9XG4gIHJldHVybiBmaWxsO1xufVxuZnVuY3Rpb24gZGVjb2RlRmlsbChsaW5lLCBpbmRleCwgY291bnQpIHtcbiAgY29uc3QgZmlsbCA9IHBhcnNlRmlsbE9wdGlvbihsaW5lKTtcbiAgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgcmV0dXJuIGlzTmFOKGZpbGwudmFsdWUpID8gZmFsc2UgOiBmaWxsO1xuICB9XG4gIGxldCB0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwpO1xuICBpZiAoaXNOdW1iZXJGaW5pdGUodGFyZ2V0KSAmJiBNYXRoLmZsb29yKHRhcmdldCkgPT09IHRhcmdldCkge1xuICAgIGlmIChmaWxsWzBdID09PSAnLScgfHwgZmlsbFswXSA9PT0gJysnKSB7XG4gICAgICB0YXJnZXQgPSBpbmRleCArIHRhcmdldDtcbiAgICB9XG4gICAgaWYgKHRhcmdldCA9PT0gaW5kZXggfHwgdGFyZ2V0IDwgMCB8fCB0YXJnZXQgPj0gY291bnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gWydvcmlnaW4nLCAnc3RhcnQnLCAnZW5kJywgJ3N0YWNrJywgJ3NoYXBlJ10uaW5kZXhPZihmaWxsKSA+PSAwICYmIGZpbGw7XG59XG5mdW5jdGlvbiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSA9IHt9LCBmaWxsfSA9IHNvdXJjZTtcbiAgbGV0IHRhcmdldCA9IG51bGw7XG4gIGxldCBob3Jpem9udGFsO1xuICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgIHRhcmdldCA9IHNjYWxlLmJvdHRvbTtcbiAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgIHRhcmdldCA9IHNjYWxlLnRvcDtcbiAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgIHRhcmdldCA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoZmlsbC52YWx1ZSk7XG4gIH0gZWxzZSBpZiAoc2NhbGUuZ2V0QmFzZVBpeGVsKSB7XG4gICAgdGFyZ2V0ID0gc2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyRmluaXRlKHRhcmdldCkpIHtcbiAgICBob3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGhvcml6b250YWwgPyB0YXJnZXQgOiBudWxsLFxuICAgICAgeTogaG9yaXpvbnRhbCA/IG51bGwgOiB0YXJnZXRcbiAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuY2xhc3Mgc2ltcGxlQXJjIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHRoaXMueCA9IG9wdHMueDtcbiAgICB0aGlzLnkgPSBvcHRzLnk7XG4gICAgdGhpcy5yYWRpdXMgPSBvcHRzLnJhZGl1cztcbiAgfVxuICBwYXRoU2VnbWVudChjdHgsIGJvdW5kcywgb3B0cykge1xuICAgIGNvbnN0IHt4LCB5LCByYWRpdXN9ID0gdGhpcztcbiAgICBib3VuZHMgPSBib3VuZHMgfHwge3N0YXJ0OiAwLCBlbmQ6IFRBVX07XG4gICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIGJvdW5kcy5lbmQsIGJvdW5kcy5zdGFydCwgdHJ1ZSk7XG4gICAgcmV0dXJuICFvcHRzLmJvdW5kcztcbiAgfVxuICBpbnRlcnBvbGF0ZShwb2ludCkge1xuICAgIGNvbnN0IHt4LCB5LCByYWRpdXN9ID0gdGhpcztcbiAgICBjb25zdCBhbmdsZSA9IHBvaW50LmFuZ2xlO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzLFxuICAgICAgeTogeSArIE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgIGFuZ2xlXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSwgZmlsbH0gPSBzb3VyY2U7XG4gIGNvbnN0IG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zO1xuICBjb25zdCBsZW5ndGggPSBzY2FsZS5nZXRMYWJlbHMoKS5sZW5ndGg7XG4gIGNvbnN0IHRhcmdldCA9IFtdO1xuICBjb25zdCBzdGFydCA9IG9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1heCA6IHNjYWxlLm1pbjtcbiAgY29uc3QgZW5kID0gb3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4O1xuICBsZXQgaSwgY2VudGVyLCB2YWx1ZTtcbiAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICB2YWx1ZSA9IHN0YXJ0O1xuICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgdmFsdWUgPSBlbmQ7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICB2YWx1ZSA9IGZpbGwudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBzY2FsZS5nZXRCYXNlVmFsdWUoKTtcbiAgfVxuICBpZiAob3B0aW9ucy5ncmlkLmNpcmN1bGFyKSB7XG4gICAgY2VudGVyID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKDAsIHN0YXJ0KTtcbiAgICByZXR1cm4gbmV3IHNpbXBsZUFyYyh7XG4gICAgICB4OiBjZW50ZXIueCxcbiAgICAgIHk6IGNlbnRlci55LFxuICAgICAgcmFkaXVzOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSlcbiAgICB9KTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB0YXJnZXQucHVzaChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdmFsdWUpKTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuICBjb25zdCBzY2FsZSA9IHNvdXJjZS5zY2FsZSB8fCB7fTtcbiAgaWYgKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSkge1xuICAgIHJldHVybiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpO1xuICB9XG4gIHJldHVybiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKTtcbn1cbmZ1bmN0aW9uIGZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cykge1xuICBmb3IgKDtlbmQgPiBzdGFydDsgZW5kLS0pIHtcbiAgICBjb25zdCBwb2ludCA9IHBvaW50c1tlbmRdO1xuICAgIGlmICghaXNOYU4ocG9pbnQueCkgJiYgIWlzTmFOKHBvaW50LnkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVuZDtcbn1cbmZ1bmN0aW9uIHBvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSkge1xuICBjb25zdCB7eCA9IG51bGwsIHkgPSBudWxsfSA9IGJvdW5kYXJ5IHx8IHt9O1xuICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBsaW5lLnNlZ21lbnRzLmZvckVhY2goKHtzdGFydCwgZW5kfSkgPT4ge1xuICAgIGVuZCA9IGZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIGxpbmVQb2ludHMpO1xuICAgIGNvbnN0IGZpcnN0ID0gbGluZVBvaW50c1tzdGFydF07XG4gICAgY29uc3QgbGFzdCA9IGxpbmVQb2ludHNbZW5kXTtcbiAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgcG9pbnRzLnB1c2goe3g6IGZpcnN0LngsIHl9KTtcbiAgICAgIHBvaW50cy5wdXNoKHt4OiBsYXN0LngsIHl9KTtcbiAgICB9IGVsc2UgaWYgKHggIT09IG51bGwpIHtcbiAgICAgIHBvaW50cy5wdXNoKHt4LCB5OiBmaXJzdC55fSk7XG4gICAgICBwb2ludHMucHVzaCh7eCwgeTogbGFzdC55fSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHBvaW50cztcbn1cbmZ1bmN0aW9uIGJ1aWxkU3RhY2tMaW5lKHNvdXJjZSkge1xuICBjb25zdCB7c2NhbGUsIGluZGV4LCBsaW5lfSA9IHNvdXJjZTtcbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgY29uc3Qgc291cmNlUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IGxpbmVzQmVsb3cgPSBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCk7XG4gIGxpbmVzQmVsb3cucHVzaChjcmVhdGVCb3VuZGFyeUxpbmUoe3g6IG51bGwsIHk6IHNjYWxlLmJvdHRvbX0sIGxpbmUpKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBmb3IgKGxldCBqID0gc2VnbWVudC5zdGFydDsgaiA8PSBzZWdtZW50LmVuZDsgaisrKSB7XG4gICAgICBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50c1tqXSwgbGluZXNCZWxvdyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgTGluZUVsZW1lbnQoe3BvaW50cywgb3B0aW9uczoge319KTtcbn1cbmZ1bmN0aW9uIGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KSB7XG4gIGNvbnN0IGJlbG93ID0gW107XG4gIGNvbnN0IG1ldGFzID0gc2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoJ2xpbmUnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICBpZiAobWV0YS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIW1ldGEuaGlkZGVuKSB7XG4gICAgICBiZWxvdy51bnNoaWZ0KG1ldGEuZGF0YXNldCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiZWxvdztcbn1cbmZ1bmN0aW9uIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnQsIGxpbmVzQmVsb3cpIHtcbiAgY29uc3QgcG9zdHBvbmVkID0gW107XG4gIGZvciAobGV0IGogPSAwOyBqIDwgbGluZXNCZWxvdy5sZW5ndGg7IGorKykge1xuICAgIGNvbnN0IGxpbmUgPSBsaW5lc0JlbG93W2pdO1xuICAgIGNvbnN0IHtmaXJzdCwgbGFzdCwgcG9pbnR9ID0gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCAneCcpO1xuICAgIGlmICghcG9pbnQgfHwgKGZpcnN0ICYmIGxhc3QpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBwb3N0cG9uZWQudW5zaGlmdChwb2ludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgIGlmICghbGFzdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcG9pbnRzLnB1c2goLi4ucG9zdHBvbmVkKTtcbn1cbmZ1bmN0aW9uIGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgcHJvcGVydHkpIHtcbiAgY29uc3QgcG9pbnQgPSBsaW5lLmludGVycG9sYXRlKHNvdXJjZVBvaW50LCBwcm9wZXJ0eSk7XG4gIGlmICghcG9pbnQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgcG9pbnRWYWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGxldCBmaXJzdCA9IGZhbHNlO1xuICBsZXQgbGFzdCA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuc3RhcnRdW3Byb3BlcnR5XTtcbiAgICBjb25zdCBsYXN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuZW5kXVtwcm9wZXJ0eV07XG4gICAgaWYgKF9pc0JldHdlZW4ocG9pbnRWYWx1ZSwgZmlyc3RWYWx1ZSwgbGFzdFZhbHVlKSkge1xuICAgICAgZmlyc3QgPSBwb2ludFZhbHVlID09PSBmaXJzdFZhbHVlO1xuICAgICAgbGFzdCA9IHBvaW50VmFsdWUgPT09IGxhc3RWYWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge2ZpcnN0LCBsYXN0LCBwb2ludH07XG59XG5mdW5jdGlvbiBnZXRUYXJnZXQoc291cmNlKSB7XG4gIGNvbnN0IHtjaGFydCwgZmlsbCwgbGluZX0gPSBzb3VyY2U7XG4gIGlmIChpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgIHJldHVybiBnZXRMaW5lQnlJbmRleChjaGFydCwgZmlsbCk7XG4gIH1cbiAgaWYgKGZpbGwgPT09ICdzdGFjaycpIHtcbiAgICByZXR1cm4gYnVpbGRTdGFja0xpbmUoc291cmNlKTtcbiAgfVxuICBpZiAoZmlsbCA9PT0gJ3NoYXBlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGJvdW5kYXJ5ID0gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSk7XG4gIGlmIChib3VuZGFyeSBpbnN0YW5jZW9mIHNpbXBsZUFyYykge1xuICAgIHJldHVybiBib3VuZGFyeTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSkge1xuICBsZXQgcG9pbnRzID0gW107XG4gIGxldCBfbG9vcCA9IGZhbHNlO1xuICBpZiAoaXNBcnJheShib3VuZGFyeSkpIHtcbiAgICBfbG9vcCA9IHRydWU7XG4gICAgcG9pbnRzID0gYm91bmRhcnk7XG4gIH0gZWxzZSB7XG4gICAgcG9pbnRzID0gcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKTtcbiAgfVxuICByZXR1cm4gcG9pbnRzLmxlbmd0aCA/IG5ldyBMaW5lRWxlbWVudCh7XG4gICAgcG9pbnRzLFxuICAgIG9wdGlvbnM6IHt0ZW5zaW9uOiAwfSxcbiAgICBfbG9vcCxcbiAgICBfZnVsbExvb3A6IF9sb29wXG4gIH0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXQoc291cmNlcywgaW5kZXgsIHByb3BhZ2F0ZSkge1xuICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgbGV0IGZpbGwgPSBzb3VyY2UuZmlsbDtcbiAgY29uc3QgdmlzaXRlZCA9IFtpbmRleF07XG4gIGxldCB0YXJnZXQ7XG4gIGlmICghcHJvcGFnYXRlKSB7XG4gICAgcmV0dXJuIGZpbGw7XG4gIH1cbiAgd2hpbGUgKGZpbGwgIT09IGZhbHNlICYmIHZpc2l0ZWQuaW5kZXhPZihmaWxsKSA9PT0gLTEpIHtcbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgICByZXR1cm4gZmlsbDtcbiAgICB9XG4gICAgdGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0LnZpc2libGUpIHtcbiAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB2aXNpdGVkLnB1c2goZmlsbCk7XG4gICAgZmlsbCA9IHRhcmdldC5maWxsO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIF9jbGlwKGN0eCwgdGFyZ2V0LCBjbGlwWSkge1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIHRhcmdldC5wYXRoKGN0eCk7XG4gIGN0eC5saW5lVG8odGFyZ2V0Lmxhc3QoKS54LCBjbGlwWSk7XG4gIGN0eC5saW5lVG8odGFyZ2V0LmZpcnN0KCkueCwgY2xpcFkpO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiBnZXRCb3VuZHMocHJvcGVydHksIGZpcnN0LCBsYXN0LCBsb29wKSB7XG4gIGlmIChsb29wKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzdGFydCA9IGZpcnN0W3Byb3BlcnR5XTtcbiAgbGV0IGVuZCA9IGxhc3RbcHJvcGVydHldO1xuICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICBzdGFydCA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gICAgZW5kID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gIH1cbiAgcmV0dXJuIHtwcm9wZXJ0eSwgc3RhcnQsIGVuZH07XG59XG5mdW5jdGlvbiBfZ2V0RWRnZShhLCBiLCBwcm9wLCBmbikge1xuICBpZiAoYSAmJiBiKSB7XG4gICAgcmV0dXJuIGZuKGFbcHJvcF0sIGJbcHJvcF0pO1xuICB9XG4gIHJldHVybiBhID8gYVtwcm9wXSA6IGIgPyBiW3Byb3BdIDogMDtcbn1cbmZ1bmN0aW9uIF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHRwb2ludHMgPSB0YXJnZXQucG9pbnRzO1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBsZXQge3N0YXJ0LCBlbmR9ID0gc2VnbWVudDtcbiAgICBlbmQgPSBmaW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpO1xuICAgIGNvbnN0IGJvdW5kcyA9IGdldEJvdW5kcyhwcm9wZXJ0eSwgcG9pbnRzW3N0YXJ0XSwgcG9pbnRzW2VuZF0sIHNlZ21lbnQubG9vcCk7XG4gICAgaWYgKCF0YXJnZXQuc2VnbWVudHMpIHtcbiAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICBzb3VyY2U6IHNlZ21lbnQsXG4gICAgICAgIHRhcmdldDogYm91bmRzLFxuICAgICAgICBzdGFydDogcG9pbnRzW3N0YXJ0XSxcbiAgICAgICAgZW5kOiBwb2ludHNbZW5kXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0U2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0YXJnZXQsIGJvdW5kcyk7XG4gICAgZm9yIChjb25zdCB0Z3Qgb2YgdGFyZ2V0U2VnbWVudHMpIHtcbiAgICAgIGNvbnN0IHN1YkJvdW5kcyA9IGdldEJvdW5kcyhwcm9wZXJ0eSwgdHBvaW50c1t0Z3Quc3RhcnRdLCB0cG9pbnRzW3RndC5lbmRdLCB0Z3QubG9vcCk7XG4gICAgICBjb25zdCBmaWxsU291cmNlcyA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBzdWJCb3VuZHMpO1xuICAgICAgZm9yIChjb25zdCBmaWxsU291cmNlIG9mIGZpbGxTb3VyY2VzKSB7XG4gICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgIHNvdXJjZTogZmlsbFNvdXJjZSxcbiAgICAgICAgICB0YXJnZXQ6IHRndCxcbiAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdzdGFydCcsIE1hdGgubWF4KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ2VuZCcsIE1hdGgubWluKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgYm91bmRzKSB7XG4gIGNvbnN0IHt0b3AsIGJvdHRvbX0gPSBzY2FsZS5jaGFydC5jaGFydEFyZWE7XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQsIGVuZH0gPSBib3VuZHMgfHwge307XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3gnKSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5yZWN0KHN0YXJ0LCB0b3AsIGVuZCAtIHN0YXJ0LCBib3R0b20gLSB0b3ApO1xuICAgIGN0eC5jbGlwKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgcG9pbnQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IGludGVycG9sYXRlZFBvaW50ID0gdGFyZ2V0LmludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSk7XG4gIGlmIChpbnRlcnBvbGF0ZWRQb2ludCkge1xuICAgIGN0eC5saW5lVG8oaW50ZXJwb2xhdGVkUG9pbnQueCwgaW50ZXJwb2xhdGVkUG9pbnQueSk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9maWxsKGN0eCwgY2ZnKSB7XG4gIGNvbnN0IHtsaW5lLCB0YXJnZXQsIHByb3BlcnR5LCBjb2xvciwgc2NhbGV9ID0gY2ZnO1xuICBjb25zdCBzZWdtZW50cyA9IF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KTtcbiAgZm9yIChjb25zdCB7c291cmNlOiBzcmMsIHRhcmdldDogdGd0LCBzdGFydCwgZW5kfSBvZiBzZWdtZW50cykge1xuICAgIGNvbnN0IHtzdHlsZToge2JhY2tncm91bmRDb2xvciA9IGNvbG9yfSA9IHt9fSA9IHNyYztcbiAgICBjb25zdCBub3RTaGFwZSA9IHRhcmdldCAhPT0gdHJ1ZTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBub3RTaGFwZSAmJiBnZXRCb3VuZHMocHJvcGVydHksIHN0YXJ0LCBlbmQpKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY29uc3QgbGluZUxvb3AgPSAhIWxpbmUucGF0aFNlZ21lbnQoY3R4LCBzcmMpO1xuICAgIGxldCBsb29wO1xuICAgIGlmIChub3RTaGFwZSkge1xuICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgZW5kLCBwcm9wZXJ0eSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0YXJnZXRMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCB0Z3QsIHttb3ZlOiBsaW5lTG9vcCwgcmV2ZXJzZTogdHJ1ZX0pO1xuICAgICAgbG9vcCA9IGxpbmVMb29wICYmIHRhcmdldExvb3A7XG4gICAgICBpZiAoIWxvb3ApIHtcbiAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBzdGFydCwgcHJvcGVydHkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwobG9vcCA/ICdldmVub2RkJyA6ICdub256ZXJvJyk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuZnVuY3Rpb24gZG9GaWxsKGN0eCwgY2ZnKSB7XG4gIGNvbnN0IHtsaW5lLCB0YXJnZXQsIGFib3ZlLCBiZWxvdywgYXJlYSwgc2NhbGV9ID0gY2ZnO1xuICBjb25zdCBwcm9wZXJ0eSA9IGxpbmUuX2xvb3AgPyAnYW5nbGUnIDogY2ZnLmF4aXM7XG4gIGN0eC5zYXZlKCk7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3gnICYmIGJlbG93ICE9PSBhYm92ZSkge1xuICAgIF9jbGlwKGN0eCwgdGFyZ2V0LCBhcmVhLnRvcCk7XG4gICAgX2ZpbGwoY3R4LCB7bGluZSwgdGFyZ2V0LCBjb2xvcjogYWJvdmUsIHNjYWxlLCBwcm9wZXJ0eX0pO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBfY2xpcChjdHgsIHRhcmdldCwgYXJlYS5ib3R0b20pO1xuICB9XG4gIF9maWxsKGN0eCwge2xpbmUsIHRhcmdldCwgY29sb3I6IGJlbG93LCBzY2FsZSwgcHJvcGVydHl9KTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGRyYXdmaWxsKGN0eCwgc291cmNlLCBhcmVhKSB7XG4gIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChzb3VyY2UpO1xuICBjb25zdCB7bGluZSwgc2NhbGUsIGF4aXN9ID0gc291cmNlO1xuICBjb25zdCBsaW5lT3B0cyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgZmlsbE9wdGlvbiA9IGxpbmVPcHRzLmZpbGw7XG4gIGNvbnN0IGNvbG9yID0gbGluZU9wdHMuYmFja2dyb3VuZENvbG9yO1xuICBjb25zdCB7YWJvdmUgPSBjb2xvciwgYmVsb3cgPSBjb2xvcn0gPSBmaWxsT3B0aW9uIHx8IHt9O1xuICBpZiAodGFyZ2V0ICYmIGxpbmUucG9pbnRzLmxlbmd0aCkge1xuICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgZG9GaWxsKGN0eCwge2xpbmUsIHRhcmdldCwgYWJvdmUsIGJlbG93LCBhcmVhLCBzY2FsZSwgYXhpc30pO1xuICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgfVxufVxudmFyIHBsdWdpbl9maWxsZXIgPSB7XG4gIGlkOiAnZmlsbGVyJyxcbiAgYWZ0ZXJEYXRhc2V0c1VwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG4gICAgY29uc3Qgc291cmNlcyA9IFtdO1xuICAgIGxldCBtZXRhLCBpLCBsaW5lLCBzb3VyY2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgIGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICBzb3VyY2UgPSBudWxsO1xuICAgICAgaWYgKGxpbmUgJiYgbGluZS5vcHRpb25zICYmIGxpbmUgaW5zdGFuY2VvZiBMaW5lRWxlbWVudCkge1xuICAgICAgICBzb3VyY2UgPSB7XG4gICAgICAgICAgdmlzaWJsZTogY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICBmaWxsOiBkZWNvZGVGaWxsKGxpbmUsIGksIGNvdW50KSxcbiAgICAgICAgICBjaGFydCxcbiAgICAgICAgICBheGlzOiBtZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5pbmRleEF4aXMsXG4gICAgICAgICAgc2NhbGU6IG1ldGEudlNjYWxlLFxuICAgICAgICAgIGxpbmUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG4gICAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICBpZiAoIXNvdXJjZSB8fCBzb3VyY2UuZmlsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzb3VyY2UuZmlsbCA9IHJlc29sdmVUYXJnZXQoc291cmNlcywgaSwgb3B0aW9ucy5wcm9wYWdhdGUpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkcmF3ID0gb3B0aW9ucy5kcmF3VGltZSA9PT0gJ2JlZm9yZURyYXcnO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzb3VyY2UubGluZS51cGRhdGVDb250cm9sUG9pbnRzKGFyZWEsIHNvdXJjZS5heGlzKTtcbiAgICAgIGlmIChkcmF3KSB7XG4gICAgICAgIGRyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBhcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGJlZm9yZURhdGFzZXRzRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXRzRHJhdycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBkcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGJlZm9yZURhdGFzZXREcmF3KGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc291cmNlID0gYXJncy5tZXRhLiRmaWxsZXI7XG4gICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLmZpbGwgPT09IGZhbHNlIHx8IG9wdGlvbnMuZHJhd1RpbWUgIT09ICdiZWZvcmVEYXRhc2V0RHJhdycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgcHJvcGFnYXRlOiB0cnVlLFxuICAgIGRyYXdUaW1lOiAnYmVmb3JlRGF0YXNldERyYXcnXG4gIH1cbn07XG5cbmNvbnN0IGdldEJveFNpemUgPSAobGFiZWxPcHRzLCBmb250U2l6ZSkgPT4ge1xuICBsZXQge2JveEhlaWdodCA9IGZvbnRTaXplLCBib3hXaWR0aCA9IGZvbnRTaXplfSA9IGxhYmVsT3B0cztcbiAgaWYgKGxhYmVsT3B0cy51c2VQb2ludFN0eWxlKSB7XG4gICAgYm94SGVpZ2h0ID0gTWF0aC5taW4oYm94SGVpZ2h0LCBmb250U2l6ZSk7XG4gICAgYm94V2lkdGggPSBNYXRoLm1pbihib3hXaWR0aCwgZm9udFNpemUpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYm94V2lkdGgsXG4gICAgYm94SGVpZ2h0LFxuICAgIGl0ZW1IZWlnaHQ6IE1hdGgubWF4KGZvbnRTaXplLCBib3hIZWlnaHQpXG4gIH07XG59O1xuY29uc3QgaXRlbXNFcXVhbCA9IChhLCBiKSA9PiBhICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS5kYXRhc2V0SW5kZXggPT09IGIuZGF0YXNldEluZGV4ICYmIGEuaW5kZXggPT09IGIuaW5kZXg7XG5jbGFzcyBMZWdlbmQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9hZGRlZCA9IGZhbHNlO1xuICAgIHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IG51bGw7XG4gICAgdGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29sdW1uU2l6ZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5saW5lV2lkdGhzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9tYXJnaW5zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53ZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgIHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucztcbiAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICB0aGlzLmJ1aWxkTGFiZWxzKCk7XG4gICAgdGhpcy5maXQoKTtcbiAgfVxuICBzZXREaW1lbnNpb25zKCkge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgIHRoaXMubGVmdCA9IHRoaXMuX21hcmdpbnMubGVmdDtcbiAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgdGhpcy50b3AgPSB0aGlzLl9tYXJnaW5zLnRvcDtcbiAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgfVxuICB9XG4gIGJ1aWxkTGFiZWxzKCkge1xuICAgIGNvbnN0IGxhYmVsT3B0cyA9IHRoaXMub3B0aW9ucy5sYWJlbHMgfHwge307XG4gICAgbGV0IGxlZ2VuZEl0ZW1zID0gY2FsbGJhY2sobGFiZWxPcHRzLmdlbmVyYXRlTGFiZWxzLCBbdGhpcy5jaGFydF0sIHRoaXMpIHx8IFtdO1xuICAgIGlmIChsYWJlbE9wdHMuZmlsdGVyKSB7XG4gICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcigoaXRlbSkgPT4gbGFiZWxPcHRzLmZpbHRlcihpdGVtLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICB9XG4gICAgaWYgKGxhYmVsT3B0cy5zb3J0KSB7XG4gICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLnNvcnQoKGEsIGIpID0+IGxhYmVsT3B0cy5zb3J0KGEsIGIsIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcbiAgICB9XG4gICAgdGhpcy5sZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zO1xuICB9XG4gIGZpdCgpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgY3R4fSA9IHRoaXM7XG4gICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhYmVsT3B0cyA9IG9wdGlvbnMubGFiZWxzO1xuICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGNvbnN0IHtib3hXaWR0aCwgaXRlbUhlaWdodH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgd2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gdGhpcy5fZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgIHdpZHRoID0gdGhpcy5fZml0Q29scyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgIH1cbiAgICB0aGlzLndpZHRoID0gTWF0aC5taW4od2lkdGgsIG9wdGlvbnMubWF4V2lkdGggfHwgdGhpcy5tYXhXaWR0aCk7XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIG9wdGlvbnMubWF4SGVpZ2h0IHx8IHRoaXMubWF4SGVpZ2h0KTtcbiAgfVxuICBfZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgY29uc3Qge2N0eCwgbWF4V2lkdGgsIG9wdGlvbnM6IHtsYWJlbHM6IHtwYWRkaW5nfX19ID0gdGhpcztcbiAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICBjb25zdCBsaW5lV2lkdGhzID0gdGhpcy5saW5lV2lkdGhzID0gWzBdO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICBsZXQgdG90YWxIZWlnaHQgPSB0aXRsZUhlaWdodDtcbiAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBsZXQgcm93ID0gLTE7XG4gICAgbGV0IHRvcCA9IC1saW5lSGVpZ2h0O1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY29uc3QgaXRlbVdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgaWYgKGkgPT09IDAgfHwgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICsgaXRlbVdpZHRoICsgMiAqIHBhZGRpbmcgPiBtYXhXaWR0aCkge1xuICAgICAgICB0b3RhbEhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gKGkgPiAwID8gMCA6IDEpXSA9IDA7XG4gICAgICAgIHRvcCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICByb3crKztcbiAgICAgIH1cbiAgICAgIGhpdGJveGVzW2ldID0ge2xlZnQ6IDAsIHRvcCwgcm93LCB3aWR0aDogaXRlbVdpZHRoLCBoZWlnaHQ6IGl0ZW1IZWlnaHR9O1xuICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IGl0ZW1XaWR0aCArIHBhZGRpbmc7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdGFsSGVpZ2h0O1xuICB9XG4gIF9maXRDb2xzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpIHtcbiAgICBjb25zdCB7Y3R4LCBtYXhIZWlnaHQsIG9wdGlvbnM6IHtsYWJlbHM6IHtwYWRkaW5nfX19ID0gdGhpcztcbiAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICBjb25zdCBjb2x1bW5TaXplcyA9IHRoaXMuY29sdW1uU2l6ZXMgPSBbXTtcbiAgICBjb25zdCBoZWlnaHRMaW1pdCA9IG1heEhlaWdodCAtIHRpdGxlSGVpZ2h0O1xuICAgIGxldCB0b3RhbFdpZHRoID0gcGFkZGluZztcbiAgICBsZXQgY3VycmVudENvbFdpZHRoID0gMDtcbiAgICBsZXQgY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgbGV0IGxlZnQgPSAwO1xuICAgIGxldCBjb2wgPSAwO1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY29uc3QgaXRlbVdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgaWYgKGkgPiAwICYmIGN1cnJlbnRDb2xIZWlnaHQgKyBpdGVtSGVpZ2h0ICsgMiAqIHBhZGRpbmcgPiBoZWlnaHRMaW1pdCkge1xuICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIGNvbHVtblNpemVzLnB1c2goe3dpZHRoOiBjdXJyZW50Q29sV2lkdGgsIGhlaWdodDogY3VycmVudENvbEhlaWdodH0pO1xuICAgICAgICBsZWZ0ICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIGNvbCsrO1xuICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgIH1cbiAgICAgIGhpdGJveGVzW2ldID0ge2xlZnQsIHRvcDogY3VycmVudENvbEhlaWdodCwgY29sLCB3aWR0aDogaXRlbVdpZHRoLCBoZWlnaHQ6IGl0ZW1IZWlnaHR9O1xuICAgICAgY3VycmVudENvbFdpZHRoID0gTWF0aC5tYXgoY3VycmVudENvbFdpZHRoLCBpdGVtV2lkdGgpO1xuICAgICAgY3VycmVudENvbEhlaWdodCArPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICB9KTtcbiAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aDtcbiAgICBjb2x1bW5TaXplcy5wdXNoKHt3aWR0aDogY3VycmVudENvbFdpZHRoLCBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHR9KTtcbiAgICByZXR1cm4gdG90YWxXaWR0aDtcbiAgfVxuICBhZGp1c3RIaXRCb3hlcygpIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgY29uc3Qge2xlZ2VuZEhpdEJveGVzOiBoaXRib3hlcywgb3B0aW9uczoge2FsaWduLCBsYWJlbHM6IHtwYWRkaW5nfSwgcnRsfX0gPSB0aGlzO1xuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIocnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBsZXQgcm93ID0gMDtcbiAgICAgIGxldCBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcykge1xuICAgICAgICBpZiAocm93ICE9PSBoaXRib3gucm93KSB7XG4gICAgICAgICAgcm93ID0gaGl0Ym94LnJvdztcbiAgICAgICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICAgIH1cbiAgICAgICAgaGl0Ym94LnRvcCArPSB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChsZWZ0KSwgaGl0Ym94LndpZHRoKTtcbiAgICAgICAgbGVmdCArPSBoaXRib3gud2lkdGggKyBwYWRkaW5nO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY29sID0gMDtcbiAgICAgIGxldCB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcykge1xuICAgICAgICBpZiAoaGl0Ym94LmNvbCAhPT0gY29sKSB7XG4gICAgICAgICAgY29sID0gaGl0Ym94LmNvbDtcbiAgICAgICAgICB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaGl0Ym94LnRvcCA9IHRvcDtcbiAgICAgICAgaGl0Ym94LmxlZnQgKz0gdGhpcy5sZWZ0ICsgcGFkZGluZztcbiAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChoaXRib3gubGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgIHRvcCArPSBoaXRib3guaGVpZ2h0ICsgcGFkZGluZztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG4gIH1cbiAgZHJhdygpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgY2xpcEFyZWEoY3R4LCB0aGlzKTtcbiAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG4gIH1cbiAgX2RyYXcoKSB7XG4gICAgY29uc3Qge29wdGlvbnM6IG9wdHMsIGNvbHVtblNpemVzLCBsaW5lV2lkdGhzLCBjdHh9ID0gdGhpcztcbiAgICBjb25zdCB7YWxpZ24sIGxhYmVsczogbGFiZWxPcHRzfSA9IG9wdHM7XG4gICAgY29uc3QgZGVmYXVsdENvbG9yID0gZGVmYXVsdHMuY29sb3I7XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHtjb2xvcjogZm9udENvbG9yLCBwYWRkaW5nfSA9IGxhYmVsT3B0cztcbiAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcbiAgICBsZXQgY3Vyc29yO1xuICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oJ2xlZnQnKTtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDAuNTtcbiAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgY29uc3Qge2JveFdpZHRoLCBib3hIZWlnaHQsIGl0ZW1IZWlnaHR9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICBjb25zdCBkcmF3TGVnZW5kQm94ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgaWYgKGlzTmFOKGJveFdpZHRoKSB8fCBib3hXaWR0aCA8PSAwIHx8IGlzTmFOKGJveEhlaWdodCkgfHwgYm94SGVpZ2h0IDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY29uc3QgbGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIDEpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVDYXAsICdidXR0Jyk7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCAwKTtcbiAgICAgIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUpvaW4sICdtaXRlcicpO1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaCwgW10pKTtcbiAgICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgICByYWRpdXM6IGJveFdpZHRoICogTWF0aC5TUVJUMiAvIDIsXG4gICAgICAgICAgcG9pbnRTdHlsZTogbGVnZW5kSXRlbS5wb2ludFN0eWxlLFxuICAgICAgICAgIHJvdGF0aW9uOiBsZWdlbmRJdGVtLnJvdGF0aW9uLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiBsaW5lV2lkdGhcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCAvIDIpO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0geSArIGhhbGZGb250U2l6ZTtcbiAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeUJveFRvcCA9IHkgKyBNYXRoLm1heCgoZm9udFNpemUgLSBib3hIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IHhCb3hMZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpO1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxlZ2VuZEl0ZW0uYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUodiA9PiB2ICE9PSAwKSkge1xuICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgIHg6IHhCb3hMZWZ0LFxuICAgICAgICAgICAgeTogeUJveFRvcCxcbiAgICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3R4LnJlY3QoeEJveExlZnQsIHlCb3hUb3AsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGlmIChsaW5lV2lkdGggIT09IDApIHtcbiAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBjb25zdCBmaWxsVGV4dCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgIHJlbmRlclRleHQoY3R4LCBsZWdlbmRJdGVtLnRleHQsIHgsIHkgKyAoaXRlbUhlaWdodCAvIDIpLCBsYWJlbEZvbnQsIHtcbiAgICAgICAgc3RyaWtldGhyb3VnaDogbGVnZW5kSXRlbS5oaWRkZW4sXG4gICAgICAgIHRleHRBbGlnbjogcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbilcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgeDogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzWzBdKSxcbiAgICAgICAgeTogdGhpcy50b3AgKyBwYWRkaW5nICsgdGl0bGVIZWlnaHQsXG4gICAgICAgIGxpbmU6IDBcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgeDogdGhpcy5sZWZ0ICsgcGFkZGluZyxcbiAgICAgICAgeTogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzWzBdLmhlaWdodCksXG4gICAgICAgIGxpbmU6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbih0aGlzLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKSA9PiB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsZWdlbmRJdGVtLmZvbnRDb2xvciB8fCBmb250Q29sb3I7XG4gICAgICBjdHguZmlsbFN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3IgfHwgZm9udENvbG9yO1xuICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICBjb25zdCB0ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduIHx8IChsZWdlbmRJdGVtLnRleHRBbGlnbiA9IGxhYmVsT3B0cy50ZXh0QWxpZ24pKTtcbiAgICAgIGNvbnN0IHdpZHRoID0gYm94V2lkdGggKyBoYWxmRm9udFNpemUgKyB0ZXh0V2lkdGg7XG4gICAgICBsZXQgeCA9IGN1cnNvci54O1xuICAgICAgbGV0IHkgPSBjdXJzb3IueTtcbiAgICAgIHJ0bEhlbHBlci5zZXRXaWR0aCh0aGlzLndpZHRoKTtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgaWYgKGkgPiAwICYmIHggKyB3aWR0aCArIHBhZGRpbmcgPiB0aGlzLnJpZ2h0KSB7XG4gICAgICAgICAgeSA9IGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICB4ID0gY3Vyc29yLnggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIGxpbmVXaWR0aHNbY3Vyc29yLmxpbmVdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiB5ICsgbGluZUhlaWdodCA+IHRoaXMuYm90dG9tKSB7XG4gICAgICAgIHggPSBjdXJzb3IueCA9IHggKyBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0ud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICBjdXJzb3IubGluZSsrO1xuICAgICAgICB5ID0gY3Vyc29yLnkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBjb25zdCByZWFsWCA9IHJ0bEhlbHBlci54KHgpO1xuICAgICAgZHJhd0xlZ2VuZEJveChyZWFsWCwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICB4ID0gX3RleHRYKHRleHRBbGlnbiwgeCArIGJveFdpZHRoICsgaGFsZkZvbnRTaXplLCBpc0hvcml6b250YWwgPyB4ICsgd2lkdGggOiB0aGlzLnJpZ2h0LCBvcHRzLnJ0bCk7XG4gICAgICBmaWxsVGV4dChydGxIZWxwZXIueCh4KSwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGN1cnNvci54ICs9IHdpZHRoICsgcGFkZGluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdG9yZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gIH1cbiAgZHJhd1RpdGxlKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGl0bGVPcHRzID0gb3B0cy50aXRsZTtcbiAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgaWYgKCF0aXRsZU9wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGl0bGVPcHRzLnBvc2l0aW9uO1xuICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IHRpdGxlRm9udC5zaXplIC8gMjtcbiAgICBjb25zdCB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSA9IHRpdGxlUGFkZGluZy50b3AgKyBoYWxmRm9udFNpemU7XG4gICAgbGV0IHk7XG4gICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG4gICAgbGV0IG1heFdpZHRoID0gdGhpcy53aWR0aDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgbWF4V2lkdGggPSBNYXRoLm1heCguLi50aGlzLmxpbmVXaWR0aHMpO1xuICAgICAgeSA9IHRoaXMudG9wICsgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemU7XG4gICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgbGVmdCwgdGhpcy5yaWdodCAtIG1heFdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5TaXplcy5yZWR1Y2UoKGFjYywgc2l6ZSkgPT4gTWF0aC5tYXgoYWNjLCBzaXplLmhlaWdodCksIDApO1xuICAgICAgeSA9IHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplICsgX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgdGhpcy50b3AsIHRoaXMuYm90dG9tIC0gbWF4SGVpZ2h0IC0gb3B0cy5sYWJlbHMucGFkZGluZyAtIHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpKTtcbiAgICB9XG4gICAgY29uc3QgeCA9IF9hbGlnblN0YXJ0RW5kKHBvc2l0aW9uLCBsZWZ0LCBsZWZ0ICsgbWF4V2lkdGgpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKF90b0xlZnRSaWdodENlbnRlcihwb3NpdGlvbikpO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRpdGxlT3B0cy5jb2xvcjtcbiAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlT3B0cy50ZXh0LCB4LCB5LCB0aXRsZUZvbnQpO1xuICB9XG4gIF9jb21wdXRlVGl0bGVIZWlnaHQoKSB7XG4gICAgY29uc3QgdGl0bGVPcHRzID0gdGhpcy5vcHRpb25zLnRpdGxlO1xuICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgY29uc3QgdGl0bGVQYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlT3B0cy5wYWRkaW5nKTtcbiAgICByZXR1cm4gdGl0bGVPcHRzLmRpc3BsYXkgPyB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlUGFkZGluZy5oZWlnaHQgOiAwO1xuICB9XG4gIF9nZXRMZWdlbmRJdGVtQXQoeCwgeSkge1xuICAgIGxldCBpLCBoaXRCb3gsIGxoO1xuICAgIGlmIChfaXNCZXR3ZWVuKHgsIHRoaXMubGVmdCwgdGhpcy5yaWdodClcbiAgICAgICYmIF9pc0JldHdlZW4oeSwgdGhpcy50b3AsIHRoaXMuYm90dG9tKSkge1xuICAgICAgbGggPSB0aGlzLmxlZ2VuZEhpdEJveGVzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGhpdEJveCA9IGxoW2ldO1xuICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCBoaXRCb3gubGVmdCwgaGl0Qm94LmxlZnQgKyBoaXRCb3gud2lkdGgpXG4gICAgICAgICAgJiYgX2lzQmV0d2Vlbih5LCBoaXRCb3gudG9wLCBoaXRCb3gudG9wICsgaGl0Qm94LmhlaWdodCkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5sZWdlbmRJdGVtc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBoYW5kbGVFdmVudChlKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIWlzTGlzdGVuZWQoZS50eXBlLCBvcHRzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBob3ZlcmVkSXRlbSA9IHRoaXMuX2dldExlZ2VuZEl0ZW1BdChlLngsIGUueSk7XG4gICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5faG92ZXJlZEl0ZW07XG4gICAgICBjb25zdCBzYW1lSXRlbSA9IGl0ZW1zRXF1YWwocHJldmlvdXMsIGhvdmVyZWRJdGVtKTtcbiAgICAgIGlmIChwcmV2aW91cyAmJiAhc2FtZUl0ZW0pIHtcbiAgICAgICAgY2FsbGJhY2sob3B0cy5vbkxlYXZlLCBbZSwgcHJldmlvdXMsIHRoaXNdLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hvdmVyZWRJdGVtID0gaG92ZXJlZEl0ZW07XG4gICAgICBpZiAoaG92ZXJlZEl0ZW0gJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdHMub25Ib3ZlciwgW2UsIGhvdmVyZWRJdGVtLCB0aGlzXSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChob3ZlcmVkSXRlbSkge1xuICAgICAgY2FsbGJhY2sob3B0cy5vbkNsaWNrLCBbZSwgaG92ZXJlZEl0ZW0sIHRoaXNdLCB0aGlzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGlzTGlzdGVuZWQodHlwZSwgb3B0cykge1xuICBpZiAodHlwZSA9PT0gJ21vdXNlbW92ZScgJiYgKG9wdHMub25Ib3ZlciB8fCBvcHRzLm9uTGVhdmUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9wdHMub25DbGljayAmJiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09PSAnbW91c2V1cCcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxudmFyIHBsdWdpbl9sZWdlbmQgPSB7XG4gIGlkOiAnbGVnZW5kJyxcbiAgX2VsZW1lbnQ6IExlZ2VuZCxcbiAgc3RhcnQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kID0gbmV3IExlZ2VuZCh7Y3R4OiBjaGFydC5jdHgsIG9wdGlvbnMsIGNoYXJ0fSk7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgb3B0aW9ucyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgY2hhcnQubGVnZW5kKTtcbiAgICBkZWxldGUgY2hhcnQubGVnZW5kO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgIGxlZ2VuZC5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgYWZ0ZXJVcGRhdGUoY2hhcnQpIHtcbiAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgbGVnZW5kLmJ1aWxkTGFiZWxzKCk7XG4gICAgbGVnZW5kLmFkanVzdEhpdEJveGVzKCk7XG4gIH0sXG4gIGFmdGVyRXZlbnQoY2hhcnQsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MucmVwbGF5KSB7XG4gICAgICBjaGFydC5sZWdlbmQuaGFuZGxlRXZlbnQoYXJncy5ldmVudCk7XG4gICAgfVxuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgcG9zaXRpb246ICd0b3AnLFxuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICByZXZlcnNlOiBmYWxzZSxcbiAgICB3ZWlnaHQ6IDEwMDAsXG4gICAgb25DbGljayhlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG4gICAgICBjb25zdCBjaSA9IGxlZ2VuZC5jaGFydDtcbiAgICAgIGlmIChjaS5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KSkge1xuICAgICAgICBjaS5oaWRlKGluZGV4KTtcbiAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2kuc2hvdyhpbmRleCk7XG4gICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkhvdmVyOiBudWxsLFxuICAgIG9uTGVhdmU6IG51bGwsXG4gICAgbGFiZWxzOiB7XG4gICAgICBjb2xvcjogKGN0eCkgPT4gY3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICBib3hXaWR0aDogNDAsXG4gICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIGdlbmVyYXRlTGFiZWxzKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgY29uc3Qge2xhYmVsczoge3VzZVBvaW50U3R5bGUsIHBvaW50U3R5bGUsIHRleHRBbGlnbiwgY29sb3J9fSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICByZXR1cm4gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcygpLm1hcCgobWV0YSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRvUGFkZGluZyhzdHlsZS5ib3JkZXJXaWR0aCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLFxuICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgaGlkZGVuOiAhbWV0YS52aXNpYmxlLFxuICAgICAgICAgICAgbGluZUNhcDogc3R5bGUuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICBsaW5lRGFzaDogc3R5bGUuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgIGxpbmVEYXNoT2Zmc2V0OiBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgbGluZUpvaW46IHN0eWxlLmJvcmRlckpvaW5TdHlsZSxcbiAgICAgICAgICAgIGxpbmVXaWR0aDogKGJvcmRlcldpZHRoLndpZHRoICsgYm9yZGVyV2lkdGguaGVpZ2h0KSAvIDQsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlIHx8IHN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICByb3RhdGlvbjogc3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbiB8fCBzdHlsZS50ZXh0QWxpZ24sXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXhcbiAgICAgICAgICB9O1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICBjb2xvcjogKGN0eCkgPT4gY3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgIHRleHQ6ICcnLFxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgbGFiZWxzOiB7XG4gICAgICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFbJ2dlbmVyYXRlTGFiZWxzJywgJ2ZpbHRlcicsICdzb3J0J10uaW5jbHVkZXMobmFtZSksXG4gICAgfVxuICB9LFxufTtcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICB0aGlzLl9wYWRkaW5nID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICB9XG4gIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICB0aGlzLmxlZnQgPSAwO1xuICAgIHRoaXMudG9wID0gMDtcbiAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5yaWdodCA9IHRoaXMuYm90dG9tID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy53aWR0aCA9IHRoaXMucmlnaHQgPSBtYXhXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm90dG9tID0gbWF4SGVpZ2h0O1xuICAgIGNvbnN0IGxpbmVDb3VudCA9IGlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuICAgIHRoaXMuX3BhZGRpbmcgPSB0b1BhZGRpbmcob3B0cy5wYWRkaW5nKTtcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IGxpbmVDb3VudCAqIHRvRm9udChvcHRzLmZvbnQpLmxpbmVIZWlnaHQgKyB0aGlzLl9wYWRkaW5nLmhlaWdodDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5oZWlnaHQgPSB0ZXh0U2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53aWR0aCA9IHRleHRTaXplO1xuICAgIH1cbiAgfVxuICBpc0hvcml6b250YWwoKSB7XG4gICAgY29uc3QgcG9zID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgIHJldHVybiBwb3MgPT09ICd0b3AnIHx8IHBvcyA9PT0gJ2JvdHRvbSc7XG4gIH1cbiAgX2RyYXdBcmdzKG9mZnNldCkge1xuICAgIGNvbnN0IHt0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjb25zdCBhbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgbGV0IHJvdGF0aW9uID0gMDtcbiAgICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgdGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgdGl0bGVYID0gbGVmdCArIG9mZnNldDtcbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgcm90YXRpb24gPSBQSSAqIC0wLjU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aXRsZVggPSByaWdodCAtIG9mZnNldDtcbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRvcCwgYm90dG9tKTtcbiAgICAgICAgcm90YXRpb24gPSBQSSAqIDAuNTtcbiAgICAgIH1cbiAgICAgIG1heFdpZHRoID0gYm90dG9tIC0gdG9wO1xuICAgIH1cbiAgICByZXR1cm4ge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259O1xuICB9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb250T3B0cyA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBmb250T3B0cy5saW5lSGVpZ2h0O1xuICAgIGNvbnN0IG9mZnNldCA9IGxpbmVIZWlnaHQgLyAyICsgdGhpcy5fcGFkZGluZy50b3A7XG4gICAgY29uc3Qge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259ID0gdGhpcy5fZHJhd0FyZ3Mob2Zmc2V0KTtcbiAgICByZW5kZXJUZXh0KGN0eCwgb3B0cy50ZXh0LCAwLCAwLCBmb250T3B0cywge1xuICAgICAgY29sb3I6IG9wdHMuY29sb3IsXG4gICAgICBtYXhXaWR0aCxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgdGV4dEFsaWduOiBfdG9MZWZ0UmlnaHRDZW50ZXIob3B0cy5hbGlnbiksXG4gICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgdHJhbnNsYXRpb246IFt0aXRsZVgsIHRpdGxlWV0sXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpdGxlKGNoYXJ0LCB0aXRsZU9wdHMpIHtcbiAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgIGN0eDogY2hhcnQuY3R4LFxuICAgIG9wdGlvbnM6IHRpdGxlT3B0cyxcbiAgICBjaGFydFxuICB9KTtcbiAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCB0aXRsZU9wdHMpO1xuICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICBjaGFydC50aXRsZUJsb2NrID0gdGl0bGU7XG59XG52YXIgcGx1Z2luX3RpdGxlID0ge1xuICBpZDogJ3RpdGxlJyxcbiAgX2VsZW1lbnQ6IFRpdGxlLFxuICBzdGFydChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjcmVhdGVUaXRsZShjaGFydCwgb3B0aW9ucyk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBjb25zdCB0aXRsZUJsb2NrID0gY2hhcnQudGl0bGVCbG9jaztcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgdGl0bGVCbG9jayk7XG4gICAgZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgZm9udDoge1xuICAgICAgd2VpZ2h0OiAnYm9sZCcsXG4gICAgfSxcbiAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICBwYWRkaW5nOiAxMCxcbiAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgdGV4dDogJycsXG4gICAgd2VpZ2h0OiAyMDAwXG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBjb2xvcjogJ2NvbG9yJ1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9LFxufTtcblxuY29uc3QgbWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBwbHVnaW5fc3VidGl0bGUgPSB7XG4gIGlkOiAnc3VidGl0bGUnLFxuICBzdGFydChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IG5ldyBUaXRsZSh7XG4gICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjaGFydFxuICAgIH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgICBtYXAuc2V0KGNoYXJ0LCB0aXRsZSk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgbWFwLmdldChjaGFydCkpO1xuICAgIG1hcC5kZWxldGUoY2hhcnQpO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSBtYXAuZ2V0KGNoYXJ0KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICBmb250OiB7XG4gICAgICB3ZWlnaHQ6ICdub3JtYWwnLFxuICAgIH0sXG4gICAgZnVsbFNpemU6IHRydWUsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgdGV4dDogJycsXG4gICAgd2VpZ2h0OiAxNTAwXG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBjb2xvcjogJ2NvbG9yJ1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9LFxufTtcblxuY29uc3QgcG9zaXRpb25lcnMgPSB7XG4gIGF2ZXJhZ2UoaXRlbXMpIHtcbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgaSwgbGVuO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY29uc3QgcG9zID0gZWwudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgIHggKz0gcG9zLng7XG4gICAgICAgIHkgKz0gcG9zLnk7XG4gICAgICAgICsrY291bnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4IC8gY291bnQsXG4gICAgICB5OiB5IC8gY291bnRcbiAgICB9O1xuICB9LFxuICBuZWFyZXN0KGl0ZW1zLCBldmVudFBvc2l0aW9uKSB7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHggPSBldmVudFBvc2l0aW9uLng7XG4gICAgbGV0IHkgPSBldmVudFBvc2l0aW9uLnk7XG4gICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGxldCBpLCBsZW4sIG5lYXJlc3RFbGVtZW50O1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgICBjb25zdCBkID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50UG9zaXRpb24sIGNlbnRlcik7XG4gICAgICAgIGlmIChkIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICBtaW5EaXN0YW5jZSA9IGQ7XG4gICAgICAgICAgbmVhcmVzdEVsZW1lbnQgPSBlbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmVhcmVzdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICB4ID0gdHAueDtcbiAgICAgIHkgPSB0cC55O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gcHVzaE9yQ29uY2F0KGJhc2UsIHRvUHVzaCkge1xuICBpZiAodG9QdXNoKSB7XG4gICAgaWYgKGlzQXJyYXkodG9QdXNoKSkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYmFzZSwgdG9QdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZS5wdXNoKHRvUHVzaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlO1xufVxuZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcbiAgaWYgKCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBJdGVtKGNoYXJ0LCBpdGVtKSB7XG4gIGNvbnN0IHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSA9IGl0ZW07XG4gIGNvbnN0IGNvbnRyb2xsZXIgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gIGNvbnN0IHtsYWJlbCwgdmFsdWV9ID0gY29udHJvbGxlci5nZXRMYWJlbEFuZFZhbHVlKGluZGV4KTtcbiAgcmV0dXJuIHtcbiAgICBjaGFydCxcbiAgICBsYWJlbCxcbiAgICBwYXJzZWQ6IGNvbnRyb2xsZXIuZ2V0UGFyc2VkKGluZGV4KSxcbiAgICByYXc6IGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSxcbiAgICBmb3JtYXR0ZWRWYWx1ZTogdmFsdWUsXG4gICAgZGF0YXNldDogY29udHJvbGxlci5nZXREYXRhc2V0KCksXG4gICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICBkYXRhc2V0SW5kZXgsXG4gICAgZWxlbWVudFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VG9vbHRpcFNpemUodG9vbHRpcCwgb3B0aW9ucykge1xuICBjb25zdCBjdHggPSB0b29sdGlwLmNoYXJ0LmN0eDtcbiAgY29uc3Qge2JvZHksIGZvb3RlciwgdGl0bGV9ID0gdG9vbHRpcDtcbiAgY29uc3Qge2JveFdpZHRoLCBib3hIZWlnaHR9ID0gb3B0aW9ucztcbiAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gIGNvbnN0IGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgY29uc3QgdGl0bGVMaW5lQ291bnQgPSB0aXRsZS5sZW5ndGg7XG4gIGNvbnN0IGZvb3RlckxpbmVDb3VudCA9IGZvb3Rlci5sZW5ndGg7XG4gIGNvbnN0IGJvZHlMaW5lSXRlbUNvdW50ID0gYm9keS5sZW5ndGg7XG4gIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgbGV0IGhlaWdodCA9IHBhZGRpbmcuaGVpZ2h0O1xuICBsZXQgd2lkdGggPSAwO1xuICBsZXQgY29tYmluZWRCb2R5TGVuZ3RoID0gYm9keS5yZWR1Y2UoKGNvdW50LCBib2R5SXRlbSkgPT4gY291bnQgKyBib2R5SXRlbS5iZWZvcmUubGVuZ3RoICsgYm9keUl0ZW0ubGluZXMubGVuZ3RoICsgYm9keUl0ZW0uYWZ0ZXIubGVuZ3RoLCAwKTtcbiAgY29tYmluZWRCb2R5TGVuZ3RoICs9IHRvb2x0aXAuYmVmb3JlQm9keS5sZW5ndGggKyB0b29sdGlwLmFmdGVyQm9keS5sZW5ndGg7XG4gIGlmICh0aXRsZUxpbmVDb3VudCkge1xuICAgIGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udC5saW5lSGVpZ2h0XG5cdFx0XHQrICh0aXRsZUxpbmVDb3VudCAtIDEpICogb3B0aW9ucy50aXRsZVNwYWNpbmdcblx0XHRcdCsgb3B0aW9ucy50aXRsZU1hcmdpbkJvdHRvbTtcbiAgfVxuICBpZiAoY29tYmluZWRCb2R5TGVuZ3RoKSB7XG4gICAgY29uc3QgYm9keUxpbmVIZWlnaHQgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBNYXRoLm1heChib3hIZWlnaHQsIGJvZHlGb250LmxpbmVIZWlnaHQpIDogYm9keUZvbnQubGluZUhlaWdodDtcbiAgICBoZWlnaHQgKz0gYm9keUxpbmVJdGVtQ291bnQgKiBib2R5TGluZUhlaWdodFxuXHRcdFx0KyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gYm9keUxpbmVJdGVtQ291bnQpICogYm9keUZvbnQubGluZUhlaWdodFxuXHRcdFx0KyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gMSkgKiBvcHRpb25zLmJvZHlTcGFjaW5nO1xuICB9XG4gIGlmIChmb290ZXJMaW5lQ291bnQpIHtcbiAgICBoZWlnaHQgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3Bcblx0XHRcdCsgZm9vdGVyTGluZUNvdW50ICogZm9vdGVyRm9udC5saW5lSGVpZ2h0XG5cdFx0XHQrIChmb290ZXJMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgfVxuICBsZXQgd2lkdGhQYWRkaW5nID0gMDtcbiAgY29uc3QgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG4gIH07XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgZWFjaCh0b29sdGlwLnRpdGxlLCBtYXhMaW5lV2lkdGgpO1xuICBjdHguZm9udCA9IGJvZHlGb250LnN0cmluZztcbiAgZWFjaCh0b29sdGlwLmJlZm9yZUJvZHkuY29uY2F0KHRvb2x0aXAuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcbiAgd2lkdGhQYWRkaW5nID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gKGJveFdpZHRoICsgMiArIG9wdGlvbnMuYm94UGFkZGluZykgOiAwO1xuICBlYWNoKGJvZHksIChib2R5SXRlbSkgPT4ge1xuICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBtYXhMaW5lV2lkdGgpO1xuICAgIGVhY2goYm9keUl0ZW0ubGluZXMsIG1heExpbmVXaWR0aCk7XG4gICAgZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcbiAgfSk7XG4gIHdpZHRoUGFkZGluZyA9IDA7XG4gIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gIGVhY2godG9vbHRpcC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG4gIGN0eC5yZXN0b3JlKCk7XG4gIHdpZHRoICs9IHBhZGRpbmcud2lkdGg7XG4gIHJldHVybiB7d2lkdGgsIGhlaWdodH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpIHtcbiAgY29uc3Qge3ksIGhlaWdodH0gPSBzaXplO1xuICBpZiAoeSA8IGhlaWdodCAvIDIpIHtcbiAgICByZXR1cm4gJ3RvcCc7XG4gIH0gZWxzZSBpZiAoeSA+IChjaGFydC5oZWlnaHQgLSBoZWlnaHQgLyAyKSkge1xuICAgIHJldHVybiAnYm90dG9tJztcbiAgfVxuICByZXR1cm4gJ2NlbnRlcic7XG59XG5mdW5jdGlvbiBkb2VzTm90Rml0V2l0aEFsaWduKHhBbGlnbiwgY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgY29uc3Qge3gsIHdpZHRofSA9IHNpemU7XG4gIGNvbnN0IGNhcmV0ID0gb3B0aW9ucy5jYXJldFNpemUgKyBvcHRpb25zLmNhcmV0UGFkZGluZztcbiAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnICYmIHggKyB3aWR0aCArIGNhcmV0ID4gY2hhcnQud2lkdGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoeEFsaWduID09PSAncmlnaHQnICYmIHggLSB3aWR0aCAtIGNhcmV0IDwgMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbikge1xuICBjb25zdCB7eCwgd2lkdGh9ID0gc2l6ZTtcbiAgY29uc3Qge3dpZHRoOiBjaGFydFdpZHRoLCBjaGFydEFyZWE6IHtsZWZ0LCByaWdodH19ID0gY2hhcnQ7XG4gIGxldCB4QWxpZ24gPSAnY2VudGVyJztcbiAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4QWxpZ24gPSB4IDw9IChsZWZ0ICsgcmlnaHQpIC8gMiA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIH0gZWxzZSBpZiAoeCA8PSB3aWR0aCAvIDIpIHtcbiAgICB4QWxpZ24gPSAnbGVmdCc7XG4gIH0gZWxzZSBpZiAoeCA+PSBjaGFydFdpZHRoIC0gd2lkdGggLyAyKSB7XG4gICAgeEFsaWduID0gJ3JpZ2h0JztcbiAgfVxuICBpZiAoZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSkge1xuICAgIHhBbGlnbiA9ICdjZW50ZXInO1xuICB9XG4gIHJldHVybiB4QWxpZ247XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgY29uc3QgeUFsaWduID0gc2l6ZS55QWxpZ24gfHwgb3B0aW9ucy55QWxpZ24gfHwgZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKTtcbiAgcmV0dXJuIHtcbiAgICB4QWxpZ246IHNpemUueEFsaWduIHx8IG9wdGlvbnMueEFsaWduIHx8IGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSxcbiAgICB5QWxpZ25cbiAgfTtcbn1cbmZ1bmN0aW9uIGFsaWduWChzaXplLCB4QWxpZ24pIHtcbiAgbGV0IHt4LCB3aWR0aH0gPSBzaXplO1xuICBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgeCAtPSB3aWR0aDtcbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgeCAtPSAod2lkdGggLyAyKTtcbiAgfVxuICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKSB7XG4gIGxldCB7eSwgaGVpZ2h0fSA9IHNpemU7XG4gIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgeSArPSBwYWRkaW5nQW5kU2l6ZTtcbiAgfSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgeSAtPSBoZWlnaHQgKyBwYWRkaW5nQW5kU2l6ZTtcbiAgfSBlbHNlIHtcbiAgICB5IC09IChoZWlnaHQgLyAyKTtcbiAgfVxuICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBzaXplLCBhbGlnbm1lbnQsIGNoYXJ0KSB7XG4gIGNvbnN0IHtjYXJldFNpemUsIGNhcmV0UGFkZGluZywgY29ybmVyUmFkaXVzfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHt4QWxpZ24sIHlBbGlnbn0gPSBhbGlnbm1lbnQ7XG4gIGNvbnN0IHBhZGRpbmdBbmRTaXplID0gY2FyZXRTaXplICsgY2FyZXRQYWRkaW5nO1xuICBjb25zdCB7dG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0fSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgbGV0IHggPSBhbGlnblgoc2l6ZSwgeEFsaWduKTtcbiAgY29uc3QgeSA9IGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKTtcbiAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgIHggKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgIHggLT0gcGFkZGluZ0FuZFNpemU7XG4gICAgfVxuICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgeCAtPSBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICB4ICs9IE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgKyBjYXJldFNpemU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBfbGltaXRWYWx1ZSh4LCAwLCBjaGFydC53aWR0aCAtIHNpemUud2lkdGgpLFxuICAgIHk6IF9saW1pdFZhbHVlKHksIDAsIGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25lZFgodG9vbHRpcCwgYWxpZ24sIG9wdGlvbnMpIHtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInXG4gICAgPyB0b29sdGlwLnggKyB0b29sdGlwLndpZHRoIC8gMlxuICAgIDogYWxpZ24gPT09ICdyaWdodCdcbiAgICAgID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAtIHBhZGRpbmcucmlnaHRcbiAgICAgIDogdG9vbHRpcC54ICsgcGFkZGluZy5sZWZ0O1xufVxuZnVuY3Rpb24gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoY2FsbGJhY2spIHtcbiAgcmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcENvbnRleHQocGFyZW50LCB0b29sdGlwLCB0b29sdGlwSXRlbXMpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgdG9vbHRpcCxcbiAgICB0b29sdGlwSXRlbXMsXG4gICAgdHlwZTogJ3Rvb2x0aXAnXG4gIH0pO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KSB7XG4gIGNvbnN0IG92ZXJyaWRlID0gY29udGV4dCAmJiBjb250ZXh0LmRhdGFzZXQgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO1xuICByZXR1cm4gb3ZlcnJpZGUgPyBjYWxsYmFja3Mub3ZlcnJpZGUob3ZlcnJpZGUpIDogY2FsbGJhY2tzO1xufVxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zaXplID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gW107XG4gICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQgfHwgY29uZmlnLl9jaGFydDtcbiAgICB0aGlzLl9jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgdGhpcy5kYXRhUG9pbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudGl0bGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5iZWZvcmVCb2R5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFmdGVyQm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZvb3RlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnhBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnlBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jYXJldFggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jYXJldFkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgX3Jlc29sdmVBbmltYXRpb25zKCkge1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuX2NhY2hlZEFuaW1hdGlvbnM7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMuZW5hYmxlZCAmJiBjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAmJiBvcHRpb25zLmFuaW1hdGlvbnM7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKHRoaXMuY2hhcnQsIG9wdHMpO1xuICAgIGlmIChvcHRzLl9jYWNoZWFibGUpIHtcbiAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICBnZXRDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8XG5cdFx0XHQodGhpcy4kY29udGV4dCA9IGNyZWF0ZVRvb2x0aXBDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLCB0aGlzLl90b29sdGlwSXRlbXMpKTtcbiAgfVxuICBnZXRUaXRsZShjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJlZm9yZVRpdGxlID0gY2FsbGJhY2tzLmJlZm9yZVRpdGxlLmFwcGx5KHRoaXMsIFtjb250ZXh0XSk7XG4gICAgY29uc3QgdGl0bGUgPSBjYWxsYmFja3MudGl0bGUuYXBwbHkodGhpcywgW2NvbnRleHRdKTtcbiAgICBjb25zdCBhZnRlclRpdGxlID0gY2FsbGJhY2tzLmFmdGVyVGl0bGUuYXBwbHkodGhpcywgW2NvbnRleHRdKTtcbiAgICBsZXQgbGluZXMgPSBbXTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVUaXRsZSkpO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKHRpdGxlKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuICAgIHJldHVybiBsaW5lcztcbiAgfVxuICBnZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhvcHRpb25zLmNhbGxiYWNrcy5iZWZvcmVCb2R5LmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKSk7XG4gIH1cbiAgZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7Y2FsbGJhY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUl0ZW1zID0gW107XG4gICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBib2R5SXRlbSA9IHtcbiAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgbGluZXM6IFtdLFxuICAgICAgICBhZnRlcjogW11cbiAgICAgIH07XG4gICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhjYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmJlZm9yZSwgc3BsaXROZXdsaW5lcyhzY29wZWQuYmVmb3JlTGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBzY29wZWQubGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYWZ0ZXIsIHNwbGl0TmV3bGluZXMoc2NvcGVkLmFmdGVyTGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgYm9keUl0ZW1zLnB1c2goYm9keUl0ZW0pO1xuICAgIH0pO1xuICAgIHJldHVybiBib2R5SXRlbXM7XG4gIH1cbiAgZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhvcHRpb25zLmNhbGxiYWNrcy5hZnRlckJvZHkuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pKTtcbiAgfVxuICBnZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJlZm9yZUZvb3RlciA9IGNhbGxiYWNrcy5iZWZvcmVGb290ZXIuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pO1xuICAgIGNvbnN0IGZvb3RlciA9IGNhbGxiYWNrcy5mb290ZXIuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pO1xuICAgIGNvbnN0IGFmdGVyRm9vdGVyID0gY2FsbGJhY2tzLmFmdGVyRm9vdGVyLmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKTtcbiAgICBsZXQgbGluZXMgPSBbXTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVGb290ZXIpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlckZvb3RlcikpO1xuICAgIHJldHVybiBsaW5lcztcbiAgfVxuICBfY3JlYXRlSXRlbXMob3B0aW9ucykge1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gW107XG4gICAgY29uc3QgbGFiZWxQb2ludFN0eWxlcyA9IFtdO1xuICAgIGNvbnN0IGxhYmVsVGV4dENvbG9ycyA9IFtdO1xuICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICBsZXQgaSwgbGVuO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGFjdGl2ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgdG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0odGhpcy5jaGFydCwgYWN0aXZlW2ldKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmZpbHRlcikge1xuICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcigoZWxlbWVudCwgaW5kZXgsIGFycmF5KSA9PiBvcHRpb25zLmZpbHRlcihlbGVtZW50LCBpbmRleCwgYXJyYXksIGRhdGEpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaXRlbVNvcnQpIHtcbiAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5zb3J0KChhLCBiKSA9PiBvcHRpb25zLml0ZW1Tb3J0KGEsIGIsIGRhdGEpKTtcbiAgICB9XG4gICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhvcHRpb25zLmNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICBsYWJlbENvbG9ycy5wdXNoKHNjb3BlZC5sYWJlbENvbG9yLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgICAgbGFiZWxQb2ludFN0eWxlcy5wdXNoKHNjb3BlZC5sYWJlbFBvaW50U3R5bGUuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgICBsYWJlbFRleHRDb2xvcnMucHVzaChzY29wZWQubGFiZWxUZXh0Q29sb3IuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgfSk7XG4gICAgdGhpcy5sYWJlbENvbG9ycyA9IGxhYmVsQ29sb3JzO1xuICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IGxhYmVsUG9pbnRTdHlsZXM7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSBsYWJlbFRleHRDb2xvcnM7XG4gICAgdGhpcy5kYXRhUG9pbnRzID0gdG9vbHRpcEl0ZW1zO1xuICAgIHJldHVybiB0b29sdGlwSXRlbXM7XG4gIH1cbiAgdXBkYXRlKGNoYW5nZWQsIHJlcGxheSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgIGxldCBwcm9wZXJ0aWVzO1xuICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICBpZiAoIWFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IDApIHtcbiAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgdG9vbHRpcEl0ZW1zID0gdGhpcy5fY3JlYXRlSXRlbXMob3B0aW9ucyk7XG4gICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdGhpcy5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmJvZHkgPSB0aGlzLmdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdGhpcy5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuZm9vdGVyID0gdGhpcy5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgc2l6ZSk7XG4gICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcy5jaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgIGNvbnN0IGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgdGhpcy5jaGFydCk7XG4gICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB4OiBiYWNrZ3JvdW5kUG9pbnQueCxcbiAgICAgICAgeTogYmFja2dyb3VuZFBvaW50LnksXG4gICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgICAgICBjYXJldFg6IHBvc2l0aW9uLngsXG4gICAgICAgIGNhcmV0WTogcG9zaXRpb24ueVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlZCAmJiBvcHRpb25zLmV4dGVybmFsKSB7XG4gICAgICBvcHRpb25zLmV4dGVybmFsLmNhbGwodGhpcywge2NoYXJ0OiB0aGlzLmNoYXJ0LCB0b29sdGlwOiB0aGlzLCByZXBsYXl9KTtcbiAgICB9XG4gIH1cbiAgZHJhd0NhcmV0KHRvb2x0aXBQb2ludCwgY3R4LCBzaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY2FyZXRQb3NpdGlvbiA9IHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIG9wdGlvbnMpO1xuICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG4gICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngyLCBjYXJldFBvc2l0aW9uLnkyKTtcbiAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDMsIGNhcmV0UG9zaXRpb24ueTMpO1xuICB9XG4gIGdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge3hBbGlnbiwgeUFsaWdufSA9IHRoaXM7XG4gICAgY29uc3Qge2NhcmV0U2l6ZSwgY29ybmVyUmFkaXVzfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gICAgY29uc3Qge3g6IHB0WCwgeTogcHRZfSA9IHRvb2x0aXBQb2ludDtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBzaXplO1xuICAgIGxldCB4MSwgeDIsIHgzLCB5MSwgeTIsIHkzO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICB5MiA9IHB0WSArIChoZWlnaHQgLyAyKTtcbiAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICB4MSA9IHB0WDtcbiAgICAgICAgeDIgPSB4MSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgeTEgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgeTMgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgxID0gcHRYICsgd2lkdGg7XG4gICAgICAgIHgyID0geDEgKyBjYXJldFNpemU7XG4gICAgICAgIHkxID0geTIgLSBjYXJldFNpemU7XG4gICAgICAgIHkzID0geTIgKyBjYXJldFNpemU7XG4gICAgICB9XG4gICAgICB4MyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeDIgPSBwdFggKyBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIChjYXJldFNpemUpO1xuICAgICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeDIgPSBwdFggKyB3aWR0aCAtIE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgLSBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHRoaXMuY2FyZXRYO1xuICAgICAgfVxuICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgeTEgPSBwdFk7XG4gICAgICAgIHkyID0geTEgLSBjYXJldFNpemU7XG4gICAgICAgIHgxID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgIHgzID0geDIgKyBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5MSA9IHB0WSArIGhlaWdodDtcbiAgICAgICAgeTIgPSB5MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgeDEgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgeDMgPSB4MiAtIGNhcmV0U2l6ZTtcbiAgICAgIH1cbiAgICAgIHkzID0geTE7XG4gICAgfVxuICAgIHJldHVybiB7eDEsIHgyLCB4MywgeTEsIHkyLCB5M307XG4gIH1cbiAgZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMudGl0bGU7XG4gICAgY29uc3QgbGVuZ3RoID0gdGl0bGUubGVuZ3RoO1xuICAgIGxldCB0aXRsZUZvbnQsIHRpdGxlU3BhY2luZywgaTtcbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIG9wdGlvbnMudGl0bGVBbGlnbiwgb3B0aW9ucyk7XG4gICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLnRpdGxlQWxpZ24pO1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICAgIHRpdGxlU3BhY2luZyA9IG9wdGlvbnMudGl0bGVTcGFjaW5nO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMudGl0bGVDb2xvcjtcbiAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBjdHguZmlsbFRleHQodGl0bGVbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgdGl0bGVGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgcHQueSArPSB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlU3BhY2luZztcbiAgICAgICAgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBwdC55ICs9IG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b20gLSB0aXRsZVNwYWNpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsYWJlbENvbG9ycyA9IHRoaXMubGFiZWxDb2xvcnNbaV07XG4gICAgY29uc3QgbGFiZWxQb2ludFN0eWxlID0gdGhpcy5sYWJlbFBvaW50U3R5bGVzW2ldO1xuICAgIGNvbnN0IHtib3hIZWlnaHQsIGJveFdpZHRoLCBib3hQYWRkaW5nfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICBjb25zdCBydGxDb2xvclggPSBydGxIZWxwZXIueChjb2xvclgpO1xuICAgIGNvbnN0IHlPZmZTZXQgPSBib3hIZWlnaHQgPCBib2R5Rm9udC5saW5lSGVpZ2h0ID8gKGJvZHlGb250LmxpbmVIZWlnaHQgLSBib3hIZWlnaHQpIC8gMiA6IDA7XG4gICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgaWYgKG9wdGlvbnMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgY29uc3QgZHJhd09wdGlvbnMgPSB7XG4gICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICBwb2ludFN0eWxlOiBsYWJlbFBvaW50U3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgcm90YXRpb246IGxhYmVsUG9pbnRTdHlsZS5yb3RhdGlvbixcbiAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgIH07XG4gICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnMuYm9yZGVyQ29sb3I7XG4gICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHgubGluZVdpZHRoID0gbGFiZWxDb2xvcnMuYm9yZGVyV2lkdGggfHwgMTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3JzLmJvcmRlckNvbG9yO1xuICAgICAgY3R4LnNldExpbmVEYXNoKGxhYmVsQ29sb3JzLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gbGFiZWxDb2xvcnMuYm9yZGVyRGFzaE9mZnNldCB8fCAwO1xuICAgICAgY29uc3Qgb3V0ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCAtIGJveFBhZGRpbmcpO1xuICAgICAgY29uc3QgaW5uZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLnhQbHVzKHJ0bENvbG9yWCwgMSksIGJveFdpZHRoIC0gYm94UGFkZGluZyAtIDIpO1xuICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsYWJlbENvbG9ycy5ib3JkZXJSYWRpdXMpO1xuICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKHYgPT4gdiAhPT0gMCkpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICB4OiBvdXRlclgsXG4gICAgICAgICAgeTogY29sb3JZLFxuICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3JzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgIHk6IGNvbG9yWSArIDEsXG4gICAgICAgICAgdzogYm94V2lkdGggLSAyLFxuICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICBjdHguZmlsbFJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBjdHguc3Ryb2tlUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5maWxsUmVjdChpbm5lclgsIGNvbG9yWSArIDEsIGJveFdpZHRoIC0gMiwgYm94SGVpZ2h0IC0gMik7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgfVxuICBkcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2JvZHl9ID0gdGhpcztcbiAgICBjb25zdCB7Ym9keVNwYWNpbmcsIGJvZHlBbGlnbiwgZGlzcGxheUNvbG9ycywgYm94SGVpZ2h0LCBib3hXaWR0aCwgYm94UGFkZGluZ30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgIGxldCBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgbGV0IHhMaW5lUGFkZGluZyA9IDA7XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBmaWxsTGluZU9mVGV4dCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIGN0eC5maWxsVGV4dChsaW5lLCBydGxIZWxwZXIueChwdC54ICsgeExpbmVQYWRkaW5nKSwgcHQueSArIGJvZHlMaW5lSGVpZ2h0IC8gMik7XG4gICAgICBwdC55ICs9IGJvZHlMaW5lSGVpZ2h0ICsgYm9keVNwYWNpbmc7XG4gICAgfTtcbiAgICBjb25zdCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oYm9keUFsaWduKTtcbiAgICBsZXQgYm9keUl0ZW0sIHRleHRDb2xvciwgbGluZXMsIGksIGosIGlsZW4sIGpsZW47XG4gICAgY3R4LnRleHRBbGlnbiA9IGJvZHlBbGlnbjtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uLCBvcHRpb25zKTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgZWFjaCh0aGlzLmJlZm9yZUJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICB4TGluZVBhZGRpbmcgPSBkaXNwbGF5Q29sb3JzICYmIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uICE9PSAncmlnaHQnXG4gICAgICA/IGJvZHlBbGlnbiA9PT0gJ2NlbnRlcicgPyAoYm94V2lkdGggLyAyICsgYm94UGFkZGluZykgOiAoYm94V2lkdGggKyAyICsgYm94UGFkZGluZylcbiAgICAgIDogMDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gYm9keS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGJvZHlJdGVtID0gYm9keVtpXTtcbiAgICAgIHRleHRDb2xvciA9IHRoaXMubGFiZWxUZXh0Q29sb3JzW2ldO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcbiAgICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICBsaW5lcyA9IGJvZHlJdGVtLmxpbmVzO1xuICAgICAgaWYgKGRpc3BsYXlDb2xvcnMgJiYgbGluZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IE1hdGgubWF4KGJvZHlGb250LmxpbmVIZWlnaHQsIGJveEhlaWdodCk7XG4gICAgICB9XG4gICAgICBmb3IgKGogPSAwLCBqbGVuID0gbGluZXMubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG4gICAgICAgIGZpbGxMaW5lT2ZUZXh0KGxpbmVzW2pdKTtcbiAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgZmlsbExpbmVPZlRleHQpO1xuICAgIH1cbiAgICB4TGluZVBhZGRpbmcgPSAwO1xuICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICBlYWNoKHRoaXMuYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgcHQueSAtPSBib2R5U3BhY2luZztcbiAgfVxuICBkcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmb290ZXIgPSB0aGlzLmZvb3RlcjtcbiAgICBjb25zdCBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuICAgIGxldCBmb290ZXJGb250LCBpO1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy5mb290ZXJBbGlnbiwgb3B0aW9ucyk7XG4gICAgICBwdC55ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wO1xuICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy5mb290ZXJBbGlnbik7XG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5mb290ZXJDb2xvcjtcbiAgICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3R4LmZpbGxUZXh0KGZvb3RlcltpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyBmb290ZXJGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgcHQueSArPSBmb290ZXJGb250LmxpbmVIZWlnaHQgKyBvcHRpb25zLmZvb3RlclNwYWNpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge3hBbGlnbiwgeUFsaWdufSA9IHRoaXM7XG4gICAgY29uc3Qge3gsIHl9ID0gcHQ7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdG9vbHRpcFNpemU7XG4gICAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKG9wdGlvbnMuY29ybmVyUmFkaXVzKTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgdG9wTGVmdCwgeSk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSB0b3BSaWdodCwgeSk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyB0b3BSaWdodCk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gYm90dG9tUmlnaHQpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gYm90dG9tUmlnaHQsIHkgKyBoZWlnaHQpO1xuICAgIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIGJvdHRvbUxlZnQsIHkgKyBoZWlnaHQpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSBib3R0b21MZWZ0KTtcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHgsIHkgKyB0b3BMZWZ0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgdG9wTGVmdCwgeSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICB9XG4gIF91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgY29uc3QgYW5pbVggPSBhbmltcyAmJiBhbmltcy54O1xuICAgIGNvbnN0IGFuaW1ZID0gYW5pbXMgJiYgYW5pbXMueTtcbiAgICBpZiAoYW5pbVggfHwgYW5pbVkpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCB0aGlzLl9hY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHRoaXMuX3NpemUpO1xuICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUpO1xuICAgICAgY29uc3QgcG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIGNoYXJ0KTtcbiAgICAgIGlmIChhbmltWC5fdG8gIT09IHBvaW50LnggfHwgYW5pbVkuX3RvICE9PSBwb2ludC55KSB7XG4gICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgICB0aGlzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgdGhpcy5jYXJldFggPSBwb3NpdGlvbi54O1xuICAgICAgICB0aGlzLmNhcmV0WSA9IHBvc2l0aW9uLnk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHBvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGxldCBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuICAgIGlmICghb3BhY2l0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucyk7XG4gICAgY29uc3QgdG9vbHRpcFNpemUgPSB7XG4gICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5oZWlnaHRcbiAgICB9O1xuICAgIGNvbnN0IHB0ID0ge1xuICAgICAgeDogdGhpcy54LFxuICAgICAgeTogdGhpcy55XG4gICAgfTtcbiAgICBvcGFjaXR5ID0gTWF0aC5hYnMob3BhY2l0eSkgPCAxZS0zID8gMCA6IG9wYWNpdHk7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGNvbnN0IGhhc1Rvb2x0aXBDb250ZW50ID0gdGhpcy50aXRsZS5sZW5ndGggfHwgdGhpcy5iZWZvcmVCb2R5Lmxlbmd0aCB8fCB0aGlzLmJvZHkubGVuZ3RoIHx8IHRoaXMuYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB0aGlzLmZvb3Rlci5sZW5ndGg7XG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICBwdC55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgdGhpcy5kcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5kcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgfVxuICBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7ZGF0YXNldEluZGV4LCBpbmRleH0pID0+IHtcbiAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBhIGRhdGFzZXQgYXQgaW5kZXggJyArIGRhdGFzZXRJbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnQ6IG1ldGEuZGF0YVtpbmRleF0sXG4gICAgICAgIGluZGV4LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGxhc3RBY3RpdmUsIGFjdGl2ZSk7XG4gICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZXZlbnRQb3NpdGlvbik7XG4gICAgaWYgKGNoYW5nZWQgfHwgcG9zaXRpb25DaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gZXZlbnRQb3NpdGlvbjtcbiAgICAgIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cyA9IHRydWU7XG4gICAgICB0aGlzLnVwZGF0ZSh0cnVlKTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSA9IHRydWUpIHtcbiAgICBpZiAocmVwbGF5ICYmIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSBmYWxzZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSk7XG4gICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSk7XG4gICAgY29uc3QgY2hhbmdlZCA9IHJlcGxheSB8fCAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKSB8fCBwb3NpdGlvbkNoYW5nZWQ7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgfHwgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0ge1xuICAgICAgICAgIHg6IGUueCxcbiAgICAgICAgICB5OiBlLnlcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSwgcmVwbGF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cbiAgX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgfVxuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBvcHRpb25zLm1vZGUsIG9wdGlvbnMsIHJlcGxheSk7XG4gICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgYWN0aXZlLnJldmVyc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZTtcbiAgfVxuICBfcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSkge1xuICAgIGNvbnN0IHtjYXJldFgsIGNhcmV0WSwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIGUpO1xuICAgIHJldHVybiBwb3NpdGlvbiAhPT0gZmFsc2UgJiYgKGNhcmV0WCAhPT0gcG9zaXRpb24ueCB8fCBjYXJldFkgIT09IHBvc2l0aW9uLnkpO1xuICB9XG59XG5Ub29sdGlwLnBvc2l0aW9uZXJzID0gcG9zaXRpb25lcnM7XG52YXIgcGx1Z2luX3Rvb2x0aXAgPSB7XG4gIGlkOiAndG9vbHRpcCcsXG4gIF9lbGVtZW50OiBUb29sdGlwLFxuICBwb3NpdGlvbmVycyxcbiAgYWZ0ZXJJbml0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBjaGFydC50b29sdGlwID0gbmV3IFRvb2x0aXAoe2NoYXJ0LCBvcHRpb25zfSk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG4gIH0sXG4gIHJlc2V0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxuICB9LFxuICBhZnRlckRyYXcoY2hhcnQpIHtcbiAgICBjb25zdCB0b29sdGlwID0gY2hhcnQudG9vbHRpcDtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgdG9vbHRpcFxuICAgIH07XG4gICAgaWYgKGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVRvb2x0aXBEcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0b29sdGlwKSB7XG4gICAgICB0b29sdGlwLmRyYXcoY2hhcnQuY3R4KTtcbiAgICB9XG4gICAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJUb29sdGlwRHJhdycsIGFyZ3MpO1xuICB9LFxuICBhZnRlckV2ZW50KGNoYXJ0LCBhcmdzKSB7XG4gICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSBhcmdzLnJlcGxheTtcbiAgICAgIGlmIChjaGFydC50b29sdGlwLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQsIHVzZUZpbmFsUG9zaXRpb24sIGFyZ3MuaW5DaGFydEFyZWEpKSB7XG4gICAgICAgIGFyZ3MuY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgZXh0ZXJuYWw6IG51bGwsXG4gICAgcG9zaXRpb246ICdhdmVyYWdlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknLFxuICAgIHRpdGxlQ29sb3I6ICcjZmZmJyxcbiAgICB0aXRsZUZvbnQ6IHtcbiAgICAgIHdlaWdodDogJ2JvbGQnLFxuICAgIH0sXG4gICAgdGl0bGVTcGFjaW5nOiAyLFxuICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgIHRpdGxlQWxpZ246ICdsZWZ0JyxcbiAgICBib2R5Q29sb3I6ICcjZmZmJyxcbiAgICBib2R5U3BhY2luZzogMixcbiAgICBib2R5Rm9udDoge1xuICAgIH0sXG4gICAgYm9keUFsaWduOiAnbGVmdCcsXG4gICAgZm9vdGVyQ29sb3I6ICcjZmZmJyxcbiAgICBmb290ZXJTcGFjaW5nOiAyLFxuICAgIGZvb3Rlck1hcmdpblRvcDogNixcbiAgICBmb290ZXJGb250OiB7XG4gICAgICB3ZWlnaHQ6ICdib2xkJyxcbiAgICB9LFxuICAgIGZvb3RlckFsaWduOiAnbGVmdCcsXG4gICAgcGFkZGluZzogNixcbiAgICBjYXJldFBhZGRpbmc6IDIsXG4gICAgY2FyZXRTaXplOiA1LFxuICAgIGNvcm5lclJhZGl1czogNixcbiAgICBib3hIZWlnaHQ6IChjdHgsIG9wdHMpID0+IG9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICBib3hXaWR0aDogKGN0eCwgb3B0cykgPT4gb3B0cy5ib2R5Rm9udC5zaXplLFxuICAgIG11bHRpS2V5QmFja2dyb3VuZDogJyNmZmYnLFxuICAgIGRpc3BsYXlDb2xvcnM6IHRydWUsXG4gICAgYm94UGFkZGluZzogMCxcbiAgICBib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgIGJvcmRlcldpZHRoOiAwLFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgZHVyYXRpb246IDQwMCxcbiAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCcsXG4gICAgfSxcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICBudW1iZXJzOiB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICd3aWR0aCcsICdoZWlnaHQnLCAnY2FyZXRYJywgJ2NhcmV0WSddLFxuICAgICAgfSxcbiAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgfVxuICAgIH0sXG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBiZWZvcmVUaXRsZTogbm9vcCxcbiAgICAgIHRpdGxlKHRvb2x0aXBJdGVtcykge1xuICAgICAgICBpZiAodG9vbHRpcEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuICAgICAgICAgIGNvbnN0IGxhYmVscyA9IGl0ZW0uY2hhcnQuZGF0YS5sYWJlbHM7XG4gICAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IGxhYmVscyA/IGxhYmVscy5sZW5ndGggOiAwO1xuICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5kYXRhc2V0LmxhYmVsIHx8ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubGFiZWw7XG4gICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmRhdGFJbmRleCA8IGxhYmVsQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbHNbaXRlbS5kYXRhSW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9LFxuICAgICAgYWZ0ZXJUaXRsZTogbm9vcCxcbiAgICAgIGJlZm9yZUJvZHk6IG5vb3AsXG4gICAgICBiZWZvcmVMYWJlbDogbm9vcCxcbiAgICAgIGxhYmVsKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRvb2x0aXBJdGVtLmxhYmVsICsgJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlIHx8IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYWJlbCA9IHRvb2x0aXBJdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgIGxhYmVsICs9ICc6ICc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgIGxhYmVsICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgIH0sXG4gICAgICBsYWJlbENvbG9yKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBsYWJlbFRleHRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgICB9LFxuICAgICAgbGFiZWxQb2ludFN0eWxlKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9pbnRTdHlsZTogb3B0aW9ucy5wb2ludFN0eWxlLFxuICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGFmdGVyTGFiZWw6IG5vb3AsXG4gICAgICBhZnRlckJvZHk6IG5vb3AsXG4gICAgICBiZWZvcmVGb290ZXI6IG5vb3AsXG4gICAgICBmb290ZXI6IG5vb3AsXG4gICAgICBhZnRlckZvb3Rlcjogbm9vcFxuICAgIH1cbiAgfSxcbiAgZGVmYXVsdFJvdXRlczoge1xuICAgIGJvZHlGb250OiAnZm9udCcsXG4gICAgZm9vdGVyRm9udDogJ2ZvbnQnLFxuICAgIHRpdGxlRm9udDogJ2ZvbnQnXG4gIH0sXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnZmlsdGVyJyAmJiBuYW1lICE9PSAnaXRlbVNvcnQnICYmIG5hbWUgIT09ICdleHRlcm5hbCcsXG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICB9LFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgX2ZhbGxiYWNrOiBmYWxzZVxuICAgIH0sXG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgIH1cbiAgfSxcbiAgYWRkaXRpb25hbE9wdGlvblNjb3BlczogWydpbnRlcmFjdGlvbiddXG59O1xuXG52YXIgcGx1Z2lucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkRlY2ltYXRpb246IHBsdWdpbl9kZWNpbWF0aW9uLFxuRmlsbGVyOiBwbHVnaW5fZmlsbGVyLFxuTGVnZW5kOiBwbHVnaW5fbGVnZW5kLFxuU3ViVGl0bGU6IHBsdWdpbl9zdWJ0aXRsZSxcblRpdGxlOiBwbHVnaW5fdGl0bGUsXG5Ub29sdGlwOiBwbHVnaW5fdG9vbHRpcFxufSk7XG5cbmNvbnN0IGFkZElmU3RyaW5nID0gKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpID0+IHtcbiAgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBsYWJlbHMucHVzaChyYXcpIC0gMTtcbiAgICBhZGRlZExhYmVscy51bnNoaWZ0KHtpbmRleCwgbGFiZWw6IHJhd30pO1xuICB9IGVsc2UgaWYgKGlzTmFOKHJhdykpIHtcbiAgICBpbmRleCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcbmZ1bmN0aW9uIGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpIHtcbiAgY29uc3QgZmlyc3QgPSBsYWJlbHMuaW5kZXhPZihyYXcpO1xuICBpZiAoZmlyc3QgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFkZElmU3RyaW5nKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpO1xuICB9XG4gIGNvbnN0IGxhc3QgPSBsYWJlbHMubGFzdEluZGV4T2YocmF3KTtcbiAgcmV0dXJuIGZpcnN0ICE9PSBsYXN0ID8gaW5kZXggOiBmaXJzdDtcbn1cbmNvbnN0IHZhbGlkSW5kZXggPSAoaW5kZXgsIG1heCkgPT4gaW5kZXggPT09IG51bGwgPyBudWxsIDogX2xpbWl0VmFsdWUoTWF0aC5yb3VuZChpbmRleCksIDAsIG1heCk7XG5jbGFzcyBDYXRlZ29yeVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgfVxuICBpbml0KHNjYWxlT3B0aW9ucykge1xuICAgIGNvbnN0IGFkZGVkID0gdGhpcy5fYWRkZWRMYWJlbHM7XG4gICAgaWYgKGFkZGVkLmxlbmd0aCkge1xuICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgIGZvciAoY29uc3Qge2luZGV4LCBsYWJlbH0gb2YgYWRkZWQpIHtcbiAgICAgICAgaWYgKGxhYmVsc1tpbmRleF0gPT09IGxhYmVsKSB7XG4gICAgICAgICAgbGFiZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2FkZGVkTGFiZWxzID0gW107XG4gICAgfVxuICAgIHN1cGVyLmluaXQoc2NhbGVPcHRpb25zKTtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgaW5kZXggPSBpc0Zpbml0ZShpbmRleCkgJiYgbGFiZWxzW2luZGV4XSA9PT0gcmF3ID8gaW5kZXhcbiAgICAgIDogZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIHZhbHVlT3JEZWZhdWx0KGluZGV4LCByYXcpLCB0aGlzLl9hZGRlZExhYmVscyk7XG4gICAgcmV0dXJuIHZhbGlkSW5kZXgoaW5kZXgsIGxhYmVscy5sZW5ndGggLSAxKTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIGlmICghbWluRGVmaW5lZCkge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgIG1heCA9IHRoaXMuZ2V0TGFiZWxzKCkubGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLm9wdGlvbnMub2Zmc2V0O1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgbGV0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgbGFiZWxzID0gKG1pbiA9PT0gMCAmJiBtYXggPT09IGxhYmVscy5sZW5ndGggLSAxKSA/IGxhYmVscyA6IGxhYmVscy5zbGljZShtaW4sIG1heCArIDEpO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heChsYWJlbHMubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHRoaXMubWluIC0gKG9mZnNldCA/IDAuNSA6IDApO1xuICAgIGZvciAobGV0IHZhbHVlID0gbWluOyB2YWx1ZSA8PSBtYXg7IHZhbHVlKyspIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlfSk7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8IGxhYmVscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBsYWJlbHNbdmFsdWVdO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIGlmICghdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9ICF0aGlzLl9yZXZlcnNlUGl4ZWxzO1xuICAgIH1cbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0QmFzZVBpeGVsKCkge1xuICAgIHJldHVybiB0aGlzLmJvdHRvbTtcbiAgfVxufVxuQ2F0ZWdvcnlTY2FsZS5pZCA9ICdjYXRlZ29yeSc7XG5DYXRlZ29yeVNjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBDYXRlZ29yeVNjYWxlLnByb3RvdHlwZS5nZXRMYWJlbEZvclZhbHVlXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MkMShnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGNvbnN0IE1JTl9TUEFDSU5HID0gMWUtMTQ7XG4gIGNvbnN0IHtib3VuZHMsIHN0ZXAsIG1pbiwgbWF4LCBwcmVjaXNpb24sIGNvdW50LCBtYXhUaWNrcywgbWF4RGlnaXRzLCBpbmNsdWRlQm91bmRzfSA9IGdlbmVyYXRpb25PcHRpb25zO1xuICBjb25zdCB1bml0ID0gc3RlcCB8fCAxO1xuICBjb25zdCBtYXhTcGFjZXMgPSBtYXhUaWNrcyAtIDE7XG4gIGNvbnN0IHttaW46IHJtaW4sIG1heDogcm1heH0gPSBkYXRhUmFuZ2U7XG4gIGNvbnN0IG1pbkRlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtaW4pO1xuICBjb25zdCBtYXhEZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYobWF4KTtcbiAgY29uc3QgY291bnREZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYoY291bnQpO1xuICBjb25zdCBtaW5TcGFjaW5nID0gKHJtYXggLSBybWluKSAvIChtYXhEaWdpdHMgKyAxKTtcbiAgbGV0IHNwYWNpbmcgPSBuaWNlTnVtKChybWF4IC0gcm1pbikgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gIGxldCBmYWN0b3IsIG5pY2VNaW4sIG5pY2VNYXgsIG51bVNwYWNlcztcbiAgaWYgKHNwYWNpbmcgPCBNSU5fU1BBQ0lORyAmJiAhbWluRGVmaW5lZCAmJiAhbWF4RGVmaW5lZCkge1xuICAgIHJldHVybiBbe3ZhbHVlOiBybWlufSwge3ZhbHVlOiBybWF4fV07XG4gIH1cbiAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAtIE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpO1xuICBpZiAobnVtU3BhY2VzID4gbWF4U3BhY2VzKSB7XG4gICAgc3BhY2luZyA9IG5pY2VOdW0obnVtU3BhY2VzICogc3BhY2luZyAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgfVxuICBpZiAoIWlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSkge1xuICAgIGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIH1cbiAgaWYgKGJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgIG5pY2VNaW4gPSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG4gICAgbmljZU1heCA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICB9IGVsc2Uge1xuICAgIG5pY2VNaW4gPSBybWluO1xuICAgIG5pY2VNYXggPSBybWF4O1xuICB9XG4gIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQgJiYgc3RlcCAmJiBhbG1vc3RXaG9sZSgobWF4IC0gbWluKSAvIHN0ZXAsIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQoTWF0aC5taW4oKG1heCAtIG1pbikgLyBzcGFjaW5nLCBtYXhUaWNrcykpO1xuICAgIHNwYWNpbmcgPSAobWF4IC0gbWluKSAvIG51bVNwYWNlcztcbiAgICBuaWNlTWluID0gbWluO1xuICAgIG5pY2VNYXggPSBtYXg7XG4gIH0gZWxzZSBpZiAoY291bnREZWZpbmVkKSB7XG4gICAgbmljZU1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiBuaWNlTWluO1xuICAgIG5pY2VNYXggPSBtYXhEZWZpbmVkID8gbWF4IDogbmljZU1heDtcbiAgICBudW1TcGFjZXMgPSBjb3VudCAtIDE7XG4gICAgc3BhY2luZyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBudW1TcGFjZXM7XG4gIH0gZWxzZSB7XG4gICAgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG4gICAgaWYgKGFsbW9zdEVxdWFscyhudW1TcGFjZXMsIE1hdGgucm91bmQobnVtU3BhY2VzKSwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKG51bVNwYWNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bVNwYWNlcyA9IE1hdGguY2VpbChudW1TcGFjZXMpO1xuICAgIH1cbiAgfVxuICBjb25zdCBkZWNpbWFsUGxhY2VzID0gTWF0aC5tYXgoXG4gICAgX2RlY2ltYWxQbGFjZXMoc3BhY2luZyksXG4gICAgX2RlY2ltYWxQbGFjZXMobmljZU1pbilcbiAgKTtcbiAgZmFjdG9yID0gTWF0aC5wb3coMTAsIGlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSA/IGRlY2ltYWxQbGFjZXMgOiBwcmVjaXNpb24pO1xuICBuaWNlTWluID0gTWF0aC5yb3VuZChuaWNlTWluICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgbmljZU1heCA9IE1hdGgucm91bmQobmljZU1heCAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIGxldCBqID0gMDtcbiAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICBpZiAoaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWluICE9PSBtaW4pIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBtaW59KTtcbiAgICAgIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICAgIGlmIChhbG1vc3RFcXVhbHMoTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3IsIG1pbiwgcmVsYXRpdmVMYWJlbFNpemUobWluLCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgIGorKztcbiAgICB9XG4gIH1cbiAgZm9yICg7IGogPCBudW1TcGFjZXM7ICsraikge1xuICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBNYXRoLnJvdW5kKChuaWNlTWluICsgaiAqIHNwYWNpbmcpICogZmFjdG9yKSAvIGZhY3Rvcn0pO1xuICB9XG4gIGlmIChtYXhEZWZpbmVkICYmIGluY2x1ZGVCb3VuZHMgJiYgbmljZU1heCAhPT0gbWF4KSB7XG4gICAgaWYgKHRpY2tzLmxlbmd0aCAmJiBhbG1vc3RFcXVhbHModGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUsIG1heCwgcmVsYXRpdmVMYWJlbFNpemUobWF4LCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSA9IG1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGlja3MucHVzaCh7dmFsdWU6IG1heH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmICghbWF4RGVmaW5lZCB8fCBuaWNlTWF4ID09PSBtYXgpIHtcbiAgICB0aWNrcy5wdXNoKHt2YWx1ZTogbmljZU1heH0pO1xuICB9XG4gIHJldHVybiB0aWNrcztcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlTGFiZWxTaXplKHZhbHVlLCBtaW5TcGFjaW5nLCB7aG9yaXpvbnRhbCwgbWluUm90YXRpb259KSB7XG4gIGNvbnN0IHJhZCA9IHRvUmFkaWFucyhtaW5Sb3RhdGlvbik7XG4gIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gIGNvbnN0IGxlbmd0aCA9IDAuNzUgKiBtaW5TcGFjaW5nICogKCcnICsgdmFsdWUpLmxlbmd0aDtcbiAgcmV0dXJuIE1hdGgubWluKG1pblNwYWNpbmcgLyByYXRpbywgbGVuZ3RoKTtcbn1cbmNsYXNzIExpbmVhclNjYWxlQmFzZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5kID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZW5kVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKHJhdykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoKHR5cGVvZiByYXcgPT09ICdudW1iZXInIHx8IHJhdyBpbnN0YW5jZW9mIE51bWJlcikgJiYgIWlzRmluaXRlKCtyYXcpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuICtyYXc7XG4gIH1cbiAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICBjb25zdCB7YmVnaW5BdFplcm99ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCB7bWluLCBtYXh9ID0gdGhpcztcbiAgICBjb25zdCBzZXRNaW4gPSB2ID0+IChtaW4gPSBtaW5EZWZpbmVkID8gbWluIDogdik7XG4gICAgY29uc3Qgc2V0TWF4ID0gdiA9PiAobWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IHYpO1xuICAgIGlmIChiZWdpbkF0WmVybykge1xuICAgICAgY29uc3QgbWluU2lnbiA9IHNpZ24obWluKTtcbiAgICAgIGNvbnN0IG1heFNpZ24gPSBzaWduKG1heCk7XG4gICAgICBpZiAobWluU2lnbiA8IDAgJiYgbWF4U2lnbiA8IDApIHtcbiAgICAgICAgc2V0TWF4KDApO1xuICAgICAgfSBlbHNlIGlmIChtaW5TaWduID4gMCAmJiBtYXhTaWduID4gMCkge1xuICAgICAgICBzZXRNaW4oMCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgbGV0IG9mZnNldCA9IDE7XG4gICAgICBpZiAobWF4ID49IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IG1pbiA8PSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLmFicyhtYXggKiAwLjA1KTtcbiAgICAgIH1cbiAgICAgIHNldE1heChtYXggKyBvZmZzZXQpO1xuICAgICAgaWYgKCFiZWdpbkF0WmVybykge1xuICAgICAgICBzZXRNaW4obWluIC0gb2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cbiAgZ2V0VGlja0xpbWl0KCkge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGxldCB7bWF4VGlja3NMaW1pdCwgc3RlcFNpemV9ID0gdGlja09wdHM7XG4gICAgbGV0IG1heFRpY2tzO1xuICAgIGlmIChzdGVwU2l6ZSkge1xuICAgICAgbWF4VGlja3MgPSBNYXRoLmNlaWwodGhpcy5tYXggLyBzdGVwU2l6ZSkgLSBNYXRoLmZsb29yKHRoaXMubWluIC8gc3RlcFNpemUpICsgMTtcbiAgICAgIGlmIChtYXhUaWNrcyA+IDEwMDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgIG1heFRpY2tzID0gMTAwMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgIH1cbiAgICBpZiAobWF4VGlja3NMaW1pdCkge1xuICAgICAgbWF4VGlja3MgPSBNYXRoLm1pbihtYXhUaWNrc0xpbWl0LCBtYXhUaWNrcyk7XG4gICAgfVxuICAgIHJldHVybiBtYXhUaWNrcztcbiAgfVxuICBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICBsZXQgbWF4VGlja3MgPSB0aGlzLmdldFRpY2tMaW1pdCgpO1xuICAgIG1heFRpY2tzID0gTWF0aC5tYXgoMiwgbWF4VGlja3MpO1xuICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgbWF4VGlja3MsXG4gICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgfTtcbiAgICBjb25zdCBkYXRhUmFuZ2UgPSB0aGlzLl9yYW5nZSB8fCB0aGlzO1xuICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgIGlmIChvcHRzLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgX3NldE1pbkFuZE1heEJ5S2V5KHRpY2tzLCB0aGlzLCAndmFsdWUnKTtcbiAgICB9XG4gICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWluO1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1heDtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgbGV0IGVuZCA9IHRoaXMubWF4O1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgfVxuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBzdGFydDtcbiAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gZW5kIC0gc3RhcnQ7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICB9XG59XG5cbmNsYXNzIExpbmVhclNjYWxlIGV4dGVuZHMgTGluZWFyU2NhbGVCYXNlIHtcbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgPyBtYXggOiAxO1xuICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG4gIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgY29uc3QgaG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgbGVuZ3RoID0gaG9yaXpvbnRhbCA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodDtcbiAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihtaW5Sb3RhdGlvbikgOiBNYXRoLmNvcyhtaW5Sb3RhdGlvbikpIHx8IDAuMDAxO1xuICAgIGNvbnN0IHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKHZhbHVlIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlO1xuICB9XG59XG5MaW5lYXJTY2FsZS5pZCA9ICdsaW5lYXInO1xuTGluZWFyU2NhbGUuZGVmYXVsdHMgPSB7XG4gIHRpY2tzOiB7XG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgY29uc3QgcmVtYWluID0gdGlja1ZhbCAvIChNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMCh0aWNrVmFsKSkpKTtcbiAgcmV0dXJuIHJlbWFpbiA9PT0gMTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuICBjb25zdCBlbmRFeHAgPSBNYXRoLmZsb29yKGxvZzEwKGRhdGFSYW5nZS5tYXgpKTtcbiAgY29uc3QgZW5kU2lnbmlmaWNhbmQgPSBNYXRoLmNlaWwoZGF0YVJhbmdlLm1heCAvIE1hdGgucG93KDEwLCBlbmRFeHApKTtcbiAgY29uc3QgdGlja3MgPSBbXTtcbiAgbGV0IHRpY2tWYWwgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWluLCBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWluKSkpKTtcbiAgbGV0IGV4cCA9IE1hdGguZmxvb3IobG9nMTAodGlja1ZhbCkpO1xuICBsZXQgc2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKHRpY2tWYWwgLyBNYXRoLnBvdygxMCwgZXhwKSk7XG4gIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgZG8ge1xuICAgIHRpY2tzLnB1c2goe3ZhbHVlOiB0aWNrVmFsLCBtYWpvcjogaXNNYWpvcih0aWNrVmFsKX0pO1xuICAgICsrc2lnbmlmaWNhbmQ7XG4gICAgaWYgKHNpZ25pZmljYW5kID09PSAxMCkge1xuICAgICAgc2lnbmlmaWNhbmQgPSAxO1xuICAgICAgKytleHA7XG4gICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgfVxuICAgIHRpY2tWYWwgPSBNYXRoLnJvdW5kKHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICB9IHdoaWxlIChleHAgPCBlbmRFeHAgfHwgKGV4cCA9PT0gZW5kRXhwICYmIHNpZ25pZmljYW5kIDwgZW5kU2lnbmlmaWNhbmQpKTtcbiAgY29uc3QgbGFzdFRpY2sgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWF4LCB0aWNrVmFsKTtcbiAgdGlja3MucHVzaCh7dmFsdWU6IGxhc3RUaWNrLCBtYWpvcjogaXNNYWpvcih0aWNrVmFsKX0pO1xuICByZXR1cm4gdGlja3M7XG59XG5jbGFzcyBMb2dhcml0aG1pY1NjYWxlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgY29uc3QgdmFsdWUgPSBMaW5lYXJTY2FsZUJhc2UucHJvdG90eXBlLnBhcnNlLmFwcGx5KHRoaXMsIFtyYXcsIGluZGV4XSk7XG4gICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLl96ZXJvID0gdHJ1ZTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSA/IE1hdGgubWF4KDAsIG1pbikgOiBudWxsO1xuICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSA/IE1hdGgubWF4KDAsIG1heCkgOiBudWxsO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxuICBoYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCkge1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCBtaW4gPSB0aGlzLm1pbjtcbiAgICBsZXQgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgc2V0TWluID0gdiA9PiAobWluID0gbWluRGVmaW5lZCA/IG1pbiA6IHYpO1xuICAgIGNvbnN0IHNldE1heCA9IHYgPT4gKG1heCA9IG1heERlZmluZWQgPyBtYXggOiB2KTtcbiAgICBjb25zdCBleHAgPSAodiwgbSkgPT4gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodikpICsgbSk7XG4gICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgc2V0TWluKDEpO1xuICAgICAgICBzZXRNYXgoMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0TWluKGV4cChtaW4sIC0xKSk7XG4gICAgICAgIHNldE1heChleHAobWF4LCArMSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWluIDw9IDApIHtcbiAgICAgIHNldE1pbihleHAobWF4LCAtMSkpO1xuICAgIH1cbiAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgIHNldE1heChleHAobWluLCArMSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5femVybyAmJiB0aGlzLm1pbiAhPT0gdGhpcy5fc3VnZ2VzdGVkTWluICYmIG1pbiA9PT0gZXhwKHRoaXMubWluLCAwKSkge1xuICAgICAgc2V0TWluKGV4cChtaW4sIC0xKSk7XG4gICAgfVxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgIH07XG4gICAgY29uc3QgdGlja3MgPSBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCB0aGlzKTtcbiAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChvcHRzLnJldmVyc2UpIHtcbiAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1heDtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5taW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgID8gJzAnXG4gICAgICA6IGZvcm1hdE51bWJlcih2YWx1ZSwgdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gbG9nMTAodGhpcy5tYXgpIC0gbG9nMTAoc3RhcnQpO1xuICB9XG4gIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKHZhbHVlID09PSB0aGlzLm1pblxuICAgICAgPyAwXG4gICAgICA6IChsb2cxMCh2YWx1ZSkgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpO1xuICAgIHJldHVybiBNYXRoLnBvdygxMCwgdGhpcy5fc3RhcnRWYWx1ZSArIGRlY2ltYWwgKiB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxufVxuTG9nYXJpdGhtaWNTY2FsZS5pZCA9ICdsb2dhcml0aG1pYyc7XG5Mb2dhcml0aG1pY1NjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgIG1ham9yOiB7XG4gICAgICBlbmFibGVkOiB0cnVlXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykge1xuICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIG9wdHMuZGlzcGxheSkge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udCAmJiB0aWNrT3B0cy5mb250LnNpemUsIGRlZmF1bHRzLmZvbnQuc2l6ZSkgKyBwYWRkaW5nLmhlaWdodDtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVMYWJlbFNpemUoY3R4LCBmb250LCBsYWJlbCkge1xuICBsYWJlbCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwgOiBbbGFiZWxdO1xuICByZXR1cm4ge1xuICAgIHc6IF9sb25nZXN0VGV4dChjdHgsIGZvbnQuc3RyaW5nLCBsYWJlbCksXG4gICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvcywgc2l6ZSwgbWluLCBtYXgpIHtcbiAgaWYgKGFuZ2xlID09PSBtaW4gfHwgYW5nbGUgPT09IG1heCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcG9zIC0gKHNpemUgLyAyKSxcbiAgICAgIGVuZDogcG9zICsgKHNpemUgLyAyKVxuICAgIH07XG4gIH0gZWxzZSBpZiAoYW5nbGUgPCBtaW4gfHwgYW5nbGUgPiBtYXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHBvcyAtIHNpemUsXG4gICAgICBlbmQ6IHBvc1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogcG9zLFxuICAgIGVuZDogcG9zICsgc2l6ZVxuICB9O1xufVxuZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gIGNvbnN0IG9yaWcgPSB7XG4gICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgcjogc2NhbGUucmlnaHQgLSBzY2FsZS5fcGFkZGluZy5yaWdodCxcbiAgICB0OiBzY2FsZS50b3AgKyBzY2FsZS5fcGFkZGluZy50b3AsXG4gICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gIH07XG4gIGNvbnN0IGxpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWcpO1xuICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gIGNvbnN0IHBhZGRpbmcgPSBbXTtcbiAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgY29uc3QgYWRkaXRpb25hbEFuZ2xlID0gcG9pbnRMYWJlbE9wdHMuY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICBwYWRkaW5nW2ldID0gb3B0cy5wYWRkaW5nO1xuICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHNjYWxlLmRyYXdpbmdBcmVhICsgcGFkZGluZ1tpXSwgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoc2NhbGUuY3R4LCBwbEZvbnQsIHNjYWxlLl9wb2ludExhYmVsc1tpXSk7XG4gICAgbGFiZWxTaXplc1tpXSA9IHRleHRTaXplO1xuICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKGFuZ2xlUmFkaWFucykpO1xuICAgIGNvbnN0IGhMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueCwgdGV4dFNpemUudywgMCwgMTgwKTtcbiAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlUmFkaWFucywgaExpbWl0cywgdkxpbWl0cyk7XG4gIH1cbiAgc2NhbGUuc2V0Q2VudGVyUG9pbnQoXG4gICAgb3JpZy5sIC0gbGltaXRzLmwsXG4gICAgbGltaXRzLnIgLSBvcmlnLnIsXG4gICAgb3JpZy50IC0gbGltaXRzLnQsXG4gICAgbGltaXRzLmIgLSBvcmlnLmJcbiAgKTtcbiAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gIGNvbnN0IHNpbiA9IE1hdGguYWJzKE1hdGguc2luKGFuZ2xlKSk7XG4gIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKGFuZ2xlKSk7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBpZiAoaExpbWl0cy5zdGFydCA8IG9yaWcubCkge1xuICAgIHggPSAob3JpZy5sIC0gaExpbWl0cy5zdGFydCkgLyBzaW47XG4gICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gIH0gZWxzZSBpZiAoaExpbWl0cy5lbmQgPiBvcmlnLnIpIHtcbiAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICBsaW1pdHMuciA9IE1hdGgubWF4KGxpbWl0cy5yLCBvcmlnLnIgKyB4KTtcbiAgfVxuICBpZiAodkxpbWl0cy5zdGFydCA8IG9yaWcudCkge1xuICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgbGltaXRzLnQgPSBNYXRoLm1pbihsaW1pdHMudCwgb3JpZy50IC0geSk7XG4gIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICB5ID0gKHZMaW1pdHMuZW5kIC0gb3JpZy5iKSAvIGNvcztcbiAgICBsaW1pdHMuYiA9IE1hdGgubWF4KGxpbWl0cy5iLCBvcmlnLmIgKyB5KTtcbiAgfVxufVxuZnVuY3Rpb24gYnVpbGRQb2ludExhYmVsSXRlbXMoc2NhbGUsIGxhYmVsU2l6ZXMsIHBhZGRpbmcpIHtcbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gIGNvbnN0IG9wdHMgPSBzY2FsZS5vcHRpb25zO1xuICBjb25zdCBleHRyYSA9IGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSAvIDI7XG4gIGNvbnN0IG91dGVyRGlzdGFuY2UgPSBzY2FsZS5kcmF3aW5nQXJlYTtcbiAgY29uc3QgYWRkaXRpb25hbEFuZ2xlID0gb3B0cy5wb2ludExhYmVscy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG4gICAgY29uc3QgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlICsgZXh0cmEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5yb3VuZCh0b0RlZ3JlZXMoX25vcm1hbGl6ZUFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi5hbmdsZSArIEhBTEZfUEkpKSk7XG4gICAgY29uc3Qgc2l6ZSA9IGxhYmVsU2l6ZXNbaV07XG4gICAgY29uc3QgeSA9IHlGb3JBbmdsZShwb2ludExhYmVsUG9zaXRpb24ueSwgc2l6ZS5oLCBhbmdsZSk7XG4gICAgY29uc3QgdGV4dEFsaWduID0gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpO1xuICAgIGNvbnN0IGxlZnQgPSBsZWZ0Rm9yVGV4dEFsaWduKHBvaW50TGFiZWxQb3NpdGlvbi54LCBzaXplLncsIHRleHRBbGlnbik7XG4gICAgaXRlbXMucHVzaCh7XG4gICAgICB4OiBwb2ludExhYmVsUG9zaXRpb24ueCxcbiAgICAgIHksXG4gICAgICB0ZXh0QWxpZ24sXG4gICAgICBsZWZ0LFxuICAgICAgdG9wOiB5LFxuICAgICAgcmlnaHQ6IGxlZnQgKyBzaXplLncsXG4gICAgICBib3R0b206IHkgKyBzaXplLmhcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuICBpZiAoYW5nbGUgPT09IDAgfHwgYW5nbGUgPT09IDE4MCkge1xuICAgIHJldHVybiAnY2VudGVyJztcbiAgfSBlbHNlIGlmIChhbmdsZSA8IDE4MCkge1xuICAgIHJldHVybiAnbGVmdCc7XG4gIH1cbiAgcmV0dXJuICdyaWdodCc7XG59XG5mdW5jdGlvbiBsZWZ0Rm9yVGV4dEFsaWduKHgsIHcsIGFsaWduKSB7XG4gIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHggLT0gdztcbiAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4IC09ICh3IC8gMik7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiB5Rm9yQW5nbGUoeSwgaCwgYW5nbGUpIHtcbiAgaWYgKGFuZ2xlID09PSA5MCB8fCBhbmdsZSA9PT0gMjcwKSB7XG4gICAgeSAtPSAoaCAvIDIpO1xuICB9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcbiAgICB5IC09IGg7XG4gIH1cbiAgcmV0dXJuIHk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMYWJlbHMoc2NhbGUsIGxhYmVsQ291bnQpIHtcbiAgY29uc3Qge2N0eCwgb3B0aW9uczoge3BvaW50TGFiZWxzfX0gPSBzY2FsZTtcbiAgZm9yIChsZXQgaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gcG9pbnRMYWJlbHMuc2V0Q29udGV4dChzY2FsZS5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgY29uc3QgcGxGb250ID0gdG9Gb250KG9wdHNBdEluZGV4LmZvbnQpO1xuICAgIGNvbnN0IHt4LCB5LCB0ZXh0QWxpZ24sIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbX0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgIGNvbnN0IHtiYWNrZHJvcENvbG9yfSA9IG9wdHNBdEluZGV4O1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihiYWNrZHJvcENvbG9yKSkge1xuICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tkcm9wQ29sb3I7XG4gICAgICBjdHguZmlsbFJlY3QobGVmdCAtIHBhZGRpbmcubGVmdCwgdG9wIC0gcGFkZGluZy50b3AsIHJpZ2h0IC0gbGVmdCArIHBhZGRpbmcud2lkdGgsIGJvdHRvbSAtIHRvcCArIHBhZGRpbmcuaGVpZ2h0KTtcbiAgICB9XG4gICAgcmVuZGVyVGV4dChcbiAgICAgIGN0eCxcbiAgICAgIHNjYWxlLl9wb2ludExhYmVsc1tpXSxcbiAgICAgIHgsXG4gICAgICB5ICsgKHBsRm9udC5saW5lSGVpZ2h0IC8gMiksXG4gICAgICBwbEZvbnQsXG4gICAgICB7XG4gICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZSdcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBwYXRoUmFkaXVzTGluZShzY2FsZSwgcmFkaXVzLCBjaXJjdWxhciwgbGFiZWxDb3VudCkge1xuICBjb25zdCB7Y3R4fSA9IHNjYWxlO1xuICBpZiAoY2lyY3VsYXIpIHtcbiAgICBjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgVEFVKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcbiAgICBjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxhYmVsQ291bnQ7IGkrKykge1xuICAgICAgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgcmFkaXVzKTtcbiAgICAgIGN0eC5saW5lVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZHJhd1JhZGl1c0xpbmUoc2NhbGUsIGdyaWRMaW5lT3B0cywgcmFkaXVzLCBsYWJlbENvdW50KSB7XG4gIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgY29uc3QgY2lyY3VsYXIgPSBncmlkTGluZU9wdHMuY2lyY3VsYXI7XG4gIGNvbnN0IHtjb2xvciwgbGluZVdpZHRofSA9IGdyaWRMaW5lT3B0cztcbiAgaWYgKCghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQpIHx8ICFjb2xvciB8fCAhbGluZVdpZHRoIHx8IHJhZGl1cyA8IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY3R4LnNhdmUoKTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gIGN0eC5zZXRMaW5lRGFzaChncmlkTGluZU9wdHMuYm9yZGVyRGFzaCk7XG4gIGN0eC5saW5lRGFzaE9mZnNldCA9IGdyaWRMaW5lT3B0cy5ib3JkZXJEYXNoT2Zmc2V0O1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguc3Ryb2tlKCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBsYWJlbCxcbiAgICBpbmRleCxcbiAgICB0eXBlOiAncG9pbnRMYWJlbCdcbiAgfSk7XG59XG5jbGFzcyBSYWRpYWxMaW5lYXJTY2FsZSBleHRlbmRzIExpbmVhclNjYWxlQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKGNmZyk7XG4gICAgdGhpcy54Q2VudGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueUNlbnRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BvaW50TGFiZWxzID0gW107XG4gICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gIH1cbiAgc2V0RGltZW5zaW9ucygpIHtcbiAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5fcGFkZGluZyA9IHRvUGFkZGluZyhnZXRUaWNrQmFja2Ryb3BIZWlnaHQodGhpcy5vcHRpb25zKSAvIDIpO1xuICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgY29uc3QgaCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBwYWRkaW5nLmhlaWdodDtcbiAgICB0aGlzLnhDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMubGVmdCArIHcgLyAyICsgcGFkZGluZy5sZWZ0KTtcbiAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgdGhpcy5kcmF3aW5nQXJlYSA9IE1hdGguZmxvb3IoTWF0aC5taW4odywgaCkgLyAyKTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzLmdldE1pbk1heChmYWxzZSk7XG4gICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pICYmICFpc05hTihtaW4pID8gbWluIDogMDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG4gIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUuZ2VuZXJhdGVUaWNrTGFiZWxzLmNhbGwodGhpcywgdGlja3MpO1xuICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKVxuICAgICAgLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbdmFsdWUsIGluZGV4XSwgdGhpcyk7XG4gICAgICAgIHJldHVybiBsYWJlbCB8fCBsYWJlbCA9PT0gMCA/IGxhYmVsIDogJyc7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigodiwgaSkgPT4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gIH1cbiAgZml0KCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRDZW50ZXJQb2ludCgwLCAwLCAwLCAwKTtcbiAgICB9XG4gIH1cbiAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICB0aGlzLnhDZW50ZXIgKz0gTWF0aC5mbG9vcigobGVmdE1vdmVtZW50IC0gcmlnaHRNb3ZlbWVudCkgLyAyKTtcbiAgICB0aGlzLnlDZW50ZXIgKz0gTWF0aC5mbG9vcigodG9wTW92ZW1lbnQgLSBib3R0b21Nb3ZlbWVudCkgLyAyKTtcbiAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICB9XG4gIGdldEluZGV4QW5nbGUoaW5kZXgpIHtcbiAgICBjb25zdCBhbmdsZU11bHRpcGxpZXIgPSBUQVUgLyAodGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoIHx8IDEpO1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgIHJldHVybiBfbm9ybWFsaXplQW5nbGUoaW5kZXggKiBhbmdsZU11bHRpcGxpZXIgKyB0b1JhZGlhbnMoc3RhcnRBbmdsZSkpO1xuICB9XG4gIGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBjb25zdCBzY2FsaW5nRmFjdG9yID0gdGhpcy5kcmF3aW5nQXJlYSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gKHZhbHVlIC0gdGhpcy5taW4pICogc2NhbGluZ0ZhY3RvcjtcbiAgfVxuICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgIGlmIChpc051bGxPclVuZGVmKGRpc3RhbmNlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJldmVyc2UgPyB0aGlzLm1heCAtIHNjYWxlZERpc3RhbmNlIDogdGhpcy5taW4gKyBzY2FsZWREaXN0YW5jZTtcbiAgfVxuICBnZXRQb2ludExhYmVsQ29udGV4dChpbmRleCkge1xuICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCBwb2ludExhYmVscy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHBvaW50TGFiZWwgPSBwb2ludExhYmVsc1tpbmRleF07XG4gICAgICByZXR1cm4gY3JlYXRlUG9pbnRMYWJlbENvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBwb2ludExhYmVsKTtcbiAgICB9XG4gIH1cbiAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgY29uc3QgYW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gSEFMRl9QSSArIGFkZGl0aW9uYWxBbmdsZTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5jb3MoYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy54Q2VudGVyLFxuICAgICAgeTogTWF0aC5zaW4oYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy55Q2VudGVyLFxuICAgICAgYW5nbGVcbiAgICB9O1xuICB9XG4gIGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG4gIH1cbiAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGluZGV4IHx8IDAsIHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICB9XG4gIGdldFBvaW50TGFiZWxQb3NpdGlvbihpbmRleCkge1xuICAgIGNvbnN0IHtsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b219ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdCxcbiAgICAgIHRvcCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgIH07XG4gIH1cbiAgZHJhd0JhY2tncm91bmQoKSB7XG4gICAgY29uc3Qge2JhY2tncm91bmRDb2xvciwgZ3JpZDoge2NpcmN1bGFyfX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgcGF0aFJhZGl1c0xpbmUodGhpcywgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLl9lbmRWYWx1ZSksIGNpcmN1bGFyLCB0aGlzLl9wb2ludExhYmVscy5sZW5ndGgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBkcmF3R3JpZCgpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHthbmdsZUxpbmVzLCBncmlkfSA9IG9wdHM7XG4gICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBsZXQgaSwgb2Zmc2V0LCBwb3NpdGlvbjtcbiAgICBpZiAob3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG4gICAgICBkcmF3UG9pbnRMYWJlbHModGhpcywgbGFiZWxDb3VudCk7XG4gICAgfVxuICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMudGlja3MuZm9yRWFjaCgodGljaywgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aWNrLnZhbHVlKTtcbiAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXggLSAxKSk7XG4gICAgICAgICAgZHJhd1JhZGl1c0xpbmUodGhpcywgb3B0c0F0SW5kZXgsIG9mZnNldCwgbGFiZWxDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgZm9yIChpID0gbGFiZWxDb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICBjb25zdCB7Y29sb3IsIGxpbmVXaWR0aH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgaWYgKCFsaW5lV2lkdGggfHwgIWNvbG9yKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgIGN0eC5zZXRMaW5lRGFzaChvcHRzQXRJbmRleC5ib3JkZXJEYXNoKTtcbiAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXguYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgb2Zmc2V0KTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgY3R4LmxpbmVUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZHJhd0JvcmRlcigpIHt9XG4gIGRyYXdMYWJlbHMoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoMCk7XG4gICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSAwICYmICFvcHRzLnJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICBjdHguZm9udCA9IHRpY2tGb250LnN0cmluZztcbiAgICAgICAgd2lkdGggPSBjdHgubWVhc3VyZVRleHQodGljay5sYWJlbCkud2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAtd2lkdGggLyAyIC0gcGFkZGluZy5sZWZ0LFxuICAgICAgICAgIC1vZmZzZXQgLSB0aWNrRm9udC5zaXplIC8gMiAtIHBhZGRpbmcudG9wLFxuICAgICAgICAgIHdpZHRoICsgcGFkZGluZy53aWR0aCxcbiAgICAgICAgICB0aWNrRm9udC5zaXplICsgcGFkZGluZy5oZWlnaHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguY29sb3IsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGRyYXdUaXRsZSgpIHt9XG59XG5SYWRpYWxMaW5lYXJTY2FsZS5pZCA9ICdyYWRpYWxMaW5lYXInO1xuUmFkaWFsTGluZWFyU2NhbGUuZGVmYXVsdHMgPSB7XG4gIGRpc3BsYXk6IHRydWUsXG4gIGFuaW1hdGU6IHRydWUsXG4gIHBvc2l0aW9uOiAnY2hhcnRBcmVhJyxcbiAgYW5nbGVMaW5lczoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgbGluZVdpZHRoOiAxLFxuICAgIGJvcmRlckRhc2g6IFtdLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuICB9LFxuICBncmlkOiB7XG4gICAgY2lyY3VsYXI6IGZhbHNlXG4gIH0sXG4gIHN0YXJ0QW5nbGU6IDAsXG4gIHRpY2tzOiB7XG4gICAgc2hvd0xhYmVsQmFja2Ryb3A6IHRydWUsXG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICB9LFxuICBwb2ludExhYmVsczoge1xuICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBiYWNrZHJvcFBhZGRpbmc6IDIsXG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBmb250OiB7XG4gICAgICBzaXplOiAxMFxuICAgIH0sXG4gICAgY2FsbGJhY2sobGFiZWwpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIHBhZGRpbmc6IDUsXG4gICAgY2VudGVyUG9pbnRMYWJlbHM6IGZhbHNlXG4gIH1cbn07XG5SYWRpYWxMaW5lYXJTY2FsZS5kZWZhdWx0Um91dGVzID0ge1xuICAnYW5nbGVMaW5lcy5jb2xvcic6ICdib3JkZXJDb2xvcicsXG4gICdwb2ludExhYmVscy5jb2xvcic6ICdjb2xvcicsXG4gICd0aWNrcy5jb2xvcic6ICdjb2xvcidcbn07XG5SYWRpYWxMaW5lYXJTY2FsZS5kZXNjcmlwdG9ycyA9IHtcbiAgYW5nbGVMaW5lczoge1xuICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gIH1cbn07XG5cbmNvbnN0IElOVEVSVkFMUyA9IHtcbiAgbWlsbGlzZWNvbmQ6IHtjb21tb246IHRydWUsIHNpemU6IDEsIHN0ZXBzOiAxMDAwfSxcbiAgc2Vjb25kOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAxMDAwLCBzdGVwczogNjB9LFxuICBtaW51dGU6IHtjb21tb246IHRydWUsIHNpemU6IDYwMDAwLCBzdGVwczogNjB9LFxuICBob3VyOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAzNjAwMDAwLCBzdGVwczogMjR9LFxuICBkYXk6IHtjb21tb246IHRydWUsIHNpemU6IDg2NDAwMDAwLCBzdGVwczogMzB9LFxuICB3ZWVrOiB7Y29tbW9uOiBmYWxzZSwgc2l6ZTogNjA0ODAwMDAwLCBzdGVwczogNH0sXG4gIG1vbnRoOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAyLjYyOGU5LCBzdGVwczogMTJ9LFxuICBxdWFydGVyOiB7Y29tbW9uOiBmYWxzZSwgc2l6ZTogNy44ODRlOSwgc3RlcHM6IDR9LFxuICB5ZWFyOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAzLjE1NGUxMH1cbn07XG5jb25zdCBVTklUUyA9IChPYmplY3Qua2V5cyhJTlRFUlZBTFMpKTtcbmZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cbmZ1bmN0aW9uIHBhcnNlKHNjYWxlLCBpbnB1dCkge1xuICBpZiAoaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG4gIGNvbnN0IHtwYXJzZXIsIHJvdW5kLCBpc29XZWVrZGF5fSA9IHNjYWxlLl9wYXJzZU9wdHM7XG4gIGxldCB2YWx1ZSA9IGlucHV0O1xuICBpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbHVlID0gcGFyc2VyKHZhbHVlKTtcbiAgfVxuICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgIHZhbHVlID0gdHlwZW9mIHBhcnNlciA9PT0gJ3N0cmluZydcbiAgICAgID8gYWRhcHRlci5wYXJzZSh2YWx1ZSwgcGFyc2VyKVxuICAgICAgOiBhZGFwdGVyLnBhcnNlKHZhbHVlKTtcbiAgfVxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocm91bmQpIHtcbiAgICB2YWx1ZSA9IHJvdW5kID09PSAnd2VlaycgJiYgKGlzTnVtYmVyKGlzb1dlZWtkYXkpIHx8IGlzb1dlZWtkYXkgPT09IHRydWUpXG4gICAgICA/IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgJ2lzb1dlZWsnLCBpc29XZWVrZGF5KVxuICAgICAgOiBhZGFwdGVyLnN0YXJ0T2YodmFsdWUsIHJvdW5kKTtcbiAgfVxuICByZXR1cm4gK3ZhbHVlO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyhtaW5Vbml0LCBtaW4sIG1heCwgY2FwYWNpdHkpIHtcbiAgY29uc3QgaWxlbiA9IFVOSVRTLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGkgPCBpbGVuIC0gMTsgKytpKSB7XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbVU5JVFNbaV1dO1xuICAgIGNvbnN0IGZhY3RvciA9IGludGVydmFsLnN0ZXBzID8gaW50ZXJ2YWwuc3RlcHMgOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFVOSVRTW2lsZW4gLSAxXTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHNjYWxlLCBudW1UaWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKSB7XG4gICAgY29uc3QgdW5pdCA9IFVOSVRTW2ldO1xuICAgIGlmIChJTlRFUlZBTFNbdW5pdF0uY29tbW9uICYmIHNjYWxlLl9hZGFwdGVyLmRpZmYobWF4LCBtaW4sIHVuaXQpID49IG51bVRpY2tzIC0gMSkge1xuICAgICAgcmV0dXJuIHVuaXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWFqb3JVbml0KHVuaXQpIHtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaWYgKElOVEVSVkFMU1tVTklUU1tpXV0uY29tbW9uKSB7XG4gICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKSB7XG4gIGlmICghdGltZXN0YW1wcykge1xuICAgIHRpY2tzW3RpbWVdID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgIGNvbnN0IHtsbywgaGl9ID0gX2xvb2t1cCh0aW1lc3RhbXBzLCB0aW1lKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2xvXSA+PSB0aW1lID8gdGltZXN0YW1wc1tsb10gOiB0aW1lc3RhbXBzW2hpXTtcbiAgICB0aWNrc1t0aW1lc3RhbXBdID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KSB7XG4gIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgY29uc3QgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKHRpY2tzWzBdLnZhbHVlLCBtYWpvclVuaXQpO1xuICBjb25zdCBsYXN0ID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWU7XG4gIGxldCBtYWpvciwgaW5kZXg7XG4gIGZvciAobWFqb3IgPSBmaXJzdDsgbWFqb3IgPD0gbGFzdDsgbWFqb3IgPSArYWRhcHRlci5hZGQobWFqb3IsIDEsIG1ham9yVW5pdCkpIHtcbiAgICBpbmRleCA9IG1hcFttYWpvcl07XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRpY2tzW2luZGV4XS5tYWpvciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aWNrcztcbn1cbmZ1bmN0aW9uIHRpY2tzRnJvbVRpbWVzdGFtcHMoc2NhbGUsIHZhbHVlcywgbWFqb3JVbml0KSB7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBjb25zdCBpbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgbGV0IGksIHZhbHVlO1xuICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgbWFwW3ZhbHVlXSA9IGk7XG4gICAgdGlja3MucHVzaCh7XG4gICAgICB2YWx1ZSxcbiAgICAgIG1ham9yOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiAoaWxlbiA9PT0gMCB8fCAhbWFqb3JVbml0KSA/IHRpY2tzIDogc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KTtcbn1cbmNsYXNzIFRpbWVTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGxhYmVsczogW10sXG4gICAgICBhbGw6IFtdXG4gICAgfTtcbiAgICB0aGlzLl91bml0ID0gJ2RheSc7XG4gICAgdGhpcy5fbWFqb3JVbml0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX29mZnNldHMgPSB7fTtcbiAgICB0aGlzLl9ub3JtYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5fcGFyc2VPcHRzID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXQoc2NhbGVPcHRzLCBvcHRzKSB7XG4gICAgY29uc3QgdGltZSA9IHNjYWxlT3B0cy50aW1lIHx8IChzY2FsZU9wdHMudGltZSA9IHt9KTtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlciA9IG5ldyBhZGFwdGVycy5fZGF0ZShzY2FsZU9wdHMuYWRhcHRlcnMuZGF0ZSk7XG4gICAgbWVyZ2VJZih0aW1lLmRpc3BsYXlGb3JtYXRzLCBhZGFwdGVyLmZvcm1hdHMoKSk7XG4gICAgdGhpcy5fcGFyc2VPcHRzID0ge1xuICAgICAgcGFyc2VyOiB0aW1lLnBhcnNlcixcbiAgICAgIHJvdW5kOiB0aW1lLnJvdW5kLFxuICAgICAgaXNvV2Vla2RheTogdGltZS5pc29XZWVrZGF5XG4gICAgfTtcbiAgICBzdXBlci5pbml0KHNjYWxlT3B0cyk7XG4gICAgdGhpcy5fbm9ybWFsaXplZCA9IG9wdHMubm9ybWFsaXplZDtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgaWYgKHJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlKHRoaXMsIHJhdyk7XG4gIH1cbiAgYmVmb3JlTGF5b3V0KCkge1xuICAgIHN1cGVyLmJlZm9yZUxheW91dCgpO1xuICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgZGF0YTogW10sXG4gICAgICBsYWJlbHM6IFtdLFxuICAgICAgYWxsOiBbXVxuICAgIH07XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5JztcbiAgICBsZXQge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGZ1bmN0aW9uIF9hcHBseUJvdW5kcyhib3VuZHMpIHtcbiAgICAgIGlmICghbWluRGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1pbikpIHtcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBib3VuZHMubWluKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1heCkpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBib3VuZHMubWF4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFtaW5EZWZpbmVkIHx8ICFtYXhEZWZpbmVkKSB7XG4gICAgICBfYXBwbHlCb3VuZHModGhpcy5fZ2V0TGFiZWxCb3VuZHMoKSk7XG4gICAgICBpZiAob3B0aW9ucy5ib3VuZHMgIT09ICd0aWNrcycgfHwgb3B0aW9ucy50aWNrcy5zb3VyY2UgIT09ICdsYWJlbHMnKSB7XG4gICAgICAgIF9hcHBseUJvdW5kcyh0aGlzLmdldE1pbk1heChmYWxzZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBtaW4gPSBpc051bWJlckZpbml0ZShtaW4pICYmICFpc05hTihtaW4pID8gbWluIDogK2FkYXB0ZXIuc3RhcnRPZihEYXRlLm5vdygpLCB1bml0KTtcbiAgICBtYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxO1xuICAgIHRoaXMubWluID0gTWF0aC5taW4obWluLCBtYXggLSAxKTtcbiAgICB0aGlzLm1heCA9IE1hdGgubWF4KG1pbiArIDEsIG1heCk7XG4gIH1cbiAgX2dldExhYmVsQm91bmRzKCkge1xuICAgIGNvbnN0IGFyciA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgbGV0IG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICBtaW4gPSBhcnJbMF07XG4gICAgICBtYXggPSBhcnJbYXJyLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4ge21pbiwgbWF4fTtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aWNrT3B0cy5zb3VyY2UgPT09ICdsYWJlbHMnID8gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKSA6IHRoaXMuX2dlbmVyYXRlKCk7XG4gICAgaWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1pbiA9IHRoaXMuX3VzZXJNaW4gfHwgdGltZXN0YW1wc1swXTtcbiAgICAgIHRoaXMubWF4ID0gdGhpcy5fdXNlck1heCB8fCB0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IHRpY2tzID0gX2ZpbHRlckJldHdlZW4odGltZXN0YW1wcywgbWluLCBtYXgpO1xuICAgIHRoaXMuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcFxuICAgICAgPyBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKVxuICAgICAgOiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aGlzLCB0aWNrcy5sZW5ndGgsIHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCkpO1xuICAgIHRoaXMuX21ham9yVW5pdCA9ICF0aWNrT3B0cy5tYWpvci5lbmFibGVkIHx8IHRoaXMuX3VuaXQgPT09ICd5ZWFyJyA/IHVuZGVmaW5lZFxuICAgICAgOiBkZXRlcm1pbmVNYWpvclVuaXQodGhpcy5fdW5pdCk7XG4gICAgdGhpcy5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aWNrc0Zyb21UaW1lc3RhbXBzKHRoaXMsIHRpY2tzLCB0aGlzLl9tYWpvclVuaXQpO1xuICB9XG4gIGluaXRPZmZzZXRzKHRpbWVzdGFtcHMpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSAwO1xuICAgIGxldCBmaXJzdCwgbGFzdDtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9mZnNldCAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgZmlyc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzWzBdKTtcbiAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzdGFydCA9IDEgLSBmaXJzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gKHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMV0pIC0gZmlyc3QpIC8gMjtcbiAgICAgIH1cbiAgICAgIGxhc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVuZCA9IGxhc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSAobGFzdCAtIHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAyXSkpIC8gMjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGltaXQgPSB0aW1lc3RhbXBzLmxlbmd0aCA8IDMgPyAwLjUgOiAwLjI1O1xuICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoc3RhcnQsIDAsIGxpbWl0KTtcbiAgICBlbmQgPSBfbGltaXRWYWx1ZShlbmQsIDAsIGxpbWl0KTtcbiAgICB0aGlzLl9vZmZzZXRzID0ge3N0YXJ0LCBlbmQsIGZhY3RvcjogMSAvIChzdGFydCArIDEgKyBlbmQpfTtcbiAgfVxuICBfZ2VuZXJhdGUoKSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcbiAgICBjb25zdCBtaW5vciA9IHRpbWVPcHRzLnVuaXQgfHwgZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtaW4sIG1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IHZhbHVlT3JEZWZhdWx0KHRpbWVPcHRzLnN0ZXBTaXplLCAxKTtcbiAgICBjb25zdCB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcbiAgICBjb25zdCBoYXNXZWVrZGF5ID0gaXNOdW1iZXIod2Vla2RheSkgfHwgd2Vla2RheSA9PT0gdHJ1ZTtcbiAgICBjb25zdCB0aWNrcyA9IHt9O1xuICAgIGxldCBmaXJzdCA9IG1pbjtcbiAgICBsZXQgdGltZSwgY291bnQ7XG4gICAgaWYgKGhhc1dlZWtkYXkpIHtcbiAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcbiAgICB9XG4gICAgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCBoYXNXZWVrZGF5ID8gJ2RheScgOiBtaW5vcik7XG4gICAgaWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yKTtcbiAgICB9XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IG9wdGlvbnMudGlja3Muc291cmNlID09PSAnZGF0YScgJiYgdGhpcy5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgIGZvciAodGltZSA9IGZpcnN0LCBjb3VudCA9IDA7IHRpbWUgPCBtYXg7IHRpbWUgPSArYWRhcHRlci5hZGQodGltZSwgc3RlcFNpemUsIG1pbm9yKSwgY291bnQrKykge1xuICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgfVxuICAgIGlmICh0aW1lID09PSBtYXggfHwgb3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgfHwgY291bnQgPT09IDEpIHtcbiAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXModGlja3MpLnNvcnQoKGEsIGIpID0+IGEgLSBiKS5tYXAoeCA9PiAreCk7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IHRpbWVPcHRzID0gdGhpcy5vcHRpb25zLnRpbWU7XG4gICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgfVxuICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMuZGlzcGxheUZvcm1hdHMuZGF0ZXRpbWUpO1xuICB9XG4gIF90aWNrRm9ybWF0RnVuY3Rpb24odGltZSwgaW5kZXgsIHRpY2tzLCBmb3JtYXQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgY29uc3QgdW5pdCA9IHRoaXMuX3VuaXQ7XG4gICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgIGNvbnN0IG1pbm9yRm9ybWF0ID0gdW5pdCAmJiBmb3JtYXRzW3VuaXRdO1xuICAgIGNvbnN0IG1ham9yRm9ybWF0ID0gbWFqb3JVbml0ICYmIGZvcm1hdHNbbWFqb3JVbml0XTtcbiAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgIGNvbnN0IG1ham9yID0gbWFqb3JVbml0ICYmIG1ham9yRm9ybWF0ICYmIHRpY2sgJiYgdGljay5tYWpvcjtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHRpbWUsIGZvcm1hdCB8fCAobWFqb3IgPyBtYWpvckZvcm1hdCA6IG1pbm9yRm9ybWF0KSk7XG4gICAgY29uc3QgZm9ybWF0dGVyID0gb3B0aW9ucy50aWNrcy5jYWxsYmFjaztcbiAgICByZXR1cm4gZm9ybWF0dGVyID8gY2FsbGJhY2soZm9ybWF0dGVyLCBbbGFiZWwsIGluZGV4LCB0aWNrc10sIHRoaXMpIDogbGFiZWw7XG4gIH1cbiAgZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgdGljay5sYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbih0aWNrLnZhbHVlLCBpLCB0aWNrcyk7XG4gICAgfVxuICB9XG4gIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6ICh2YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgY29uc3QgcG9zID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgcmV0dXJuIHRoaXMubWluICsgcG9zICogKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICB9XG4gIF9nZXRMYWJlbFNpemUobGFiZWwpIHtcbiAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgdGlja0xhYmVsV2lkdGggPSB0aGlzLmN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG4gICAgY29uc3QgYW5nbGUgPSB0b1JhZGlhbnModGhpcy5pc0hvcml6b250YWwoKSA/IHRpY2tzT3B0cy5tYXhSb3RhdGlvbiA6IHRpY2tzT3B0cy5taW5Sb3RhdGlvbik7XG4gICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgY29uc3Qgc2luUm90YXRpb24gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgY29uc3QgdGlja0ZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5zaXplO1xuICAgIHJldHVybiB7XG4gICAgICB3OiAodGlja0xhYmVsV2lkdGggKiBjb3NSb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogc2luUm90YXRpb24pLFxuICAgICAgaDogKHRpY2tMYWJlbFdpZHRoICogc2luUm90YXRpb24pICsgKHRpY2tGb250U2l6ZSAqIGNvc1JvdGF0aW9uKVxuICAgIH07XG4gIH1cbiAgX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICBjb25zdCB0aW1lT3B0cyA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgIGNvbnN0IGRpc3BsYXlGb3JtYXRzID0gdGltZU9wdHMuZGlzcGxheUZvcm1hdHM7XG4gICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgY29uc3QgZXhhbXBsZUxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKGV4YW1wbGVUaW1lLCAwLCB0aWNrc0Zyb21UaW1lc3RhbXBzKHRoaXMsIFtleGFtcGxlVGltZV0sIHRoaXMuX21ham9yVW5pdCksIGZvcm1hdCk7XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuX2dldExhYmVsU2l6ZShleGFtcGxlTGFiZWwpO1xuICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgcmV0dXJuIGNhcGFjaXR5ID4gMCA/IGNhcGFjaXR5IDogMTtcbiAgfVxuICBnZXREYXRhVGltZXN0YW1wcygpIHtcbiAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgaWYgKHRoaXMuX25vcm1hbGl6ZWQgJiYgbWV0YXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmRhdGEgPSBtZXRhc1swXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5fY2FjaGUuZGF0YSA9IHRoaXMubm9ybWFsaXplKHRpbWVzdGFtcHMpKTtcbiAgfVxuICBnZXRMYWJlbFRpbWVzdGFtcHMoKSB7XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmxhYmVscyB8fCBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aW1lc3RhbXBzLnB1c2gocGFyc2UodGhpcywgbGFiZWxzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKSk7XG4gIH1cbiAgbm9ybWFsaXplKHZhbHVlcykge1xuICAgIHJldHVybiBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoc29ydGVyKSk7XG4gIH1cbn1cblRpbWVTY2FsZS5pZCA9ICd0aW1lJztcblRpbWVTY2FsZS5kZWZhdWx0cyA9IHtcbiAgYm91bmRzOiAnZGF0YScsXG4gIGFkYXB0ZXJzOiB7fSxcbiAgdGltZToge1xuICAgIHBhcnNlcjogZmFsc2UsXG4gICAgdW5pdDogZmFsc2UsXG4gICAgcm91bmQ6IGZhbHNlLFxuICAgIGlzb1dlZWtkYXk6IGZhbHNlLFxuICAgIG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG4gICAgZGlzcGxheUZvcm1hdHM6IHt9XG4gIH0sXG4gIHRpY2tzOiB7XG4gICAgc291cmNlOiAnYXV0bycsXG4gICAgbWFqb3I6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSh0YWJsZSwgdmFsLCByZXZlcnNlKSB7XG4gIGxldCBsbyA9IDA7XG4gIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gIGxldCBwcmV2U291cmNlLCBuZXh0U291cmNlLCBwcmV2VGFyZ2V0LCBuZXh0VGFyZ2V0O1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGlmICh2YWwgPj0gdGFibGVbbG9dLnBvcyAmJiB2YWwgPD0gdGFibGVbaGldLnBvcykge1xuICAgICAgKHtsbywgaGl9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAncG9zJywgdmFsKSk7XG4gICAgfVxuICAgICh7cG9zOiBwcmV2U291cmNlLCB0aW1lOiBwcmV2VGFyZ2V0fSA9IHRhYmxlW2xvXSk7XG4gICAgKHtwb3M6IG5leHRTb3VyY2UsIHRpbWU6IG5leHRUYXJnZXR9ID0gdGFibGVbaGldKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsID49IHRhYmxlW2xvXS50aW1lICYmIHZhbCA8PSB0YWJsZVtoaV0udGltZSkge1xuICAgICAgKHtsbywgaGl9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAndGltZScsIHZhbCkpO1xuICAgIH1cbiAgICAoe3RpbWU6IHByZXZTb3VyY2UsIHBvczogcHJldlRhcmdldH0gPSB0YWJsZVtsb10pO1xuICAgICh7dGltZTogbmV4dFNvdXJjZSwgcG9zOiBuZXh0VGFyZ2V0fSA9IHRhYmxlW2hpXSk7XG4gIH1cbiAgY29uc3Qgc3BhbiA9IG5leHRTb3VyY2UgLSBwcmV2U291cmNlO1xuICByZXR1cm4gc3BhbiA/IHByZXZUYXJnZXQgKyAobmV4dFRhcmdldCAtIHByZXZUYXJnZXQpICogKHZhbCAtIHByZXZTb3VyY2UpIC8gc3BhbiA6IHByZXZUYXJnZXQ7XG59XG5jbGFzcyBUaW1lU2VyaWVzU2NhbGUgZXh0ZW5kcyBUaW1lU2NhbGUge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLl90YWJsZSA9IFtdO1xuICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl90YWJsZVJhbmdlID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXRPZmZzZXRzKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLl9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKTtcbiAgICBjb25zdCB0YWJsZSA9IHRoaXMuX3RhYmxlID0gdGhpcy5idWlsZExvb2t1cFRhYmxlKHRpbWVzdGFtcHMpO1xuICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgdGhpcy5fdGFibGVSYW5nZSA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1heCkgLSB0aGlzLl9taW5Qb3M7XG4gICAgc3VwZXIuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gIH1cbiAgYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXM7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB0YWJsZSA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBwcmV2LCBjdXJyLCBuZXh0O1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aW1lc3RhbXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY3VyciA9IHRpbWVzdGFtcHNbaV07XG4gICAgICBpZiAoY3VyciA+PSBtaW4gJiYgY3VyciA8PSBtYXgpIHtcbiAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHt0aW1lOiBtaW4sIHBvczogMH0sXG4gICAgICAgIHt0aW1lOiBtYXgsIHBvczogMX1cbiAgICAgIF07XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIG5leHQgPSBpdGVtc1tpICsgMV07XG4gICAgICBwcmV2ID0gaXRlbXNbaSAtIDFdO1xuICAgICAgY3VyciA9IGl0ZW1zW2ldO1xuICAgICAgaWYgKE1hdGgucm91bmQoKG5leHQgKyBwcmV2KSAvIDIpICE9PSBjdXJyKSB7XG4gICAgICAgIHRhYmxlLnB1c2goe3RpbWU6IGN1cnIsIHBvczogaSAvIChpbGVuIC0gMSl9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9XG4gIF9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKSB7XG4gICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgfHwgW107XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgaWYgKGRhdGEubGVuZ3RoICYmIGxhYmVsLmxlbmd0aCkge1xuICAgICAgdGltZXN0YW1wcyA9IHRoaXMubm9ybWFsaXplKGRhdGEuY29uY2F0KGxhYmVsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVzdGFtcHMgPSBkYXRhLmxlbmd0aCA/IGRhdGEgOiBsYWJlbDtcbiAgICB9XG4gICAgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCA9IHRpbWVzdGFtcHM7XG4gICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gIH1cbiAgZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgdmFsdWUpIC0gdGhpcy5fbWluUG9zKSAvIHRoaXMuX3RhYmxlUmFuZ2U7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IGRlY2ltYWwgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgZGVjaW1hbCAqIHRoaXMuX3RhYmxlUmFuZ2UgKyB0aGlzLl9taW5Qb3MsIHRydWUpO1xuICB9XG59XG5UaW1lU2VyaWVzU2NhbGUuaWQgPSAndGltZXNlcmllcyc7XG5UaW1lU2VyaWVzU2NhbGUuZGVmYXVsdHMgPSBUaW1lU2NhbGUuZGVmYXVsdHM7XG5cbnZhciBzY2FsZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5DYXRlZ29yeVNjYWxlOiBDYXRlZ29yeVNjYWxlLFxuTGluZWFyU2NhbGU6IExpbmVhclNjYWxlLFxuTG9nYXJpdGhtaWNTY2FsZTogTG9nYXJpdGhtaWNTY2FsZSxcblJhZGlhbExpbmVhclNjYWxlOiBSYWRpYWxMaW5lYXJTY2FsZSxcblRpbWVTY2FsZTogVGltZVNjYWxlLFxuVGltZVNlcmllc1NjYWxlOiBUaW1lU2VyaWVzU2NhbGVcbn0pO1xuXG5jb25zdCByZWdpc3RlcmFibGVzID0gW1xuICBjb250cm9sbGVycyxcbiAgZWxlbWVudHMsXG4gIHBsdWdpbnMsXG4gIHNjYWxlcyxcbl07XG5cbmV4cG9ydCB7IEFuaW1hdGlvbiwgQW5pbWF0aW9ucywgQXJjRWxlbWVudCwgQmFyQ29udHJvbGxlciwgQmFyRWxlbWVudCwgQmFzZVBsYXRmb3JtLCBCYXNpY1BsYXRmb3JtLCBCdWJibGVDb250cm9sbGVyLCBDYXRlZ29yeVNjYWxlLCBDaGFydCwgRGF0YXNldENvbnRyb2xsZXIsIHBsdWdpbl9kZWNpbWF0aW9uIGFzIERlY2ltYXRpb24sIERvbVBsYXRmb3JtLCBEb3VnaG51dENvbnRyb2xsZXIsIEVsZW1lbnQsIHBsdWdpbl9maWxsZXIgYXMgRmlsbGVyLCBJbnRlcmFjdGlvbiwgcGx1Z2luX2xlZ2VuZCBhcyBMZWdlbmQsIExpbmVDb250cm9sbGVyLCBMaW5lRWxlbWVudCwgTGluZWFyU2NhbGUsIExvZ2FyaXRobWljU2NhbGUsIFBpZUNvbnRyb2xsZXIsIFBvaW50RWxlbWVudCwgUG9sYXJBcmVhQ29udHJvbGxlciwgUmFkYXJDb250cm9sbGVyLCBSYWRpYWxMaW5lYXJTY2FsZSwgU2NhbGUsIFNjYXR0ZXJDb250cm9sbGVyLCBwbHVnaW5fc3VidGl0bGUgYXMgU3ViVGl0bGUsIFRpY2tzLCBUaW1lU2NhbGUsIFRpbWVTZXJpZXNTY2FsZSwgcGx1Z2luX3RpdGxlIGFzIFRpdGxlLCBwbHVnaW5fdG9vbHRpcCBhcyBUb29sdGlwLCBhZGFwdGVycyBhcyBfYWRhcHRlcnMsIF9kZXRlY3RQbGF0Zm9ybSwgYW5pbWF0b3IsIGNvbnRyb2xsZXJzLCBlbGVtZW50cywgbGF5b3V0cywgcGx1Z2lucywgcmVnaXN0ZXJhYmxlcywgcmVnaXN0cnksIHNjYWxlcyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgdGVzdCA9IFtdO1xudmFyIG5hdGl2ZVNvcnQgPSB0ZXN0LnNvcnQ7XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29ydCcpO1xuXG52YXIgRk9SQ0VEID0gRkFJTFNfT05fVU5ERUZJTkVEIHx8ICFGQUlMU19PTl9OVUxMIHx8ICFTVFJJQ1RfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvcnRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGB0aGlzTnVtYmVyVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInICYmIGNsYXNzb2YodmFsdWUpICE9ICdOdW1iZXInKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xuICB9XG4gIHJldHVybiArdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG5tb2R1bGUuZXhwb3J0cyA9ICcnLnJlcGVhdCB8fCBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBudW1iZXIgb2YgcmVwZXRpdGlvbnMnKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlc3VsdCArPSBzdHI7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2hhcnQgYXMgQ2hhcnQkMSwgTGluZUNvbnRyb2xsZXIsIEJhckNvbnRyb2xsZXIsIFJhZGFyQ29udHJvbGxlciwgRG91Z2hudXRDb250cm9sbGVyLCBQb2xhckFyZWFDb250cm9sbGVyLCBCdWJibGVDb250cm9sbGVyLCBQaWVDb250cm9sbGVyLCBTY2F0dGVyQ29udHJvbGxlciB9IGZyb20gJ2NoYXJ0LmpzJztcblxuY29uc3QgZGVmYXVsdERhdGFzZXRJZEtleSA9ICdsYWJlbCc7XG5mdW5jdGlvbiByZWZvcndhcmRSZWYocmVmLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlZih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRPcHRpb25zKGNoYXJ0LCBuZXh0T3B0aW9ucykge1xuICAgIGNoYXJ0Lm9wdGlvbnMgPSB7XG4gICAgICAgIC4uLm5leHRPcHRpb25zXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldExhYmVscyhjdXJyZW50RGF0YSwgbmV4dExhYmVscykge1xuICAgIGN1cnJlbnREYXRhLmxhYmVscyA9IG5leHRMYWJlbHM7XG59XG5mdW5jdGlvbiBzZXREYXRhc2V0cyhjdXJyZW50RGF0YSwgbmV4dERhdGFzZXRzKSB7XG4gICAgbGV0IGRhdGFzZXRJZEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdm9pZCAwID8gYXJndW1lbnRzWzJdIDogZGVmYXVsdERhdGFzZXRJZEtleTtcbiAgICBjb25zdCBhZGRlZERhdGFzZXRzID0gW107XG4gICAgY3VycmVudERhdGEuZGF0YXNldHMgPSBuZXh0RGF0YXNldHMubWFwKChuZXh0RGF0YXNldCk9PntcbiAgICAgICAgLy8gZ2l2ZW4gdGhlIG5ldyBzZXQsIGZpbmQgaXQncyBjdXJyZW50IG1hdGNoXG4gICAgICAgIGNvbnN0IGN1cnJlbnREYXRhc2V0ID0gY3VycmVudERhdGEuZGF0YXNldHMuZmluZCgoZGF0YXNldCk9PmRhdGFzZXRbZGF0YXNldElkS2V5XSA9PT0gbmV4dERhdGFzZXRbZGF0YXNldElkS2V5XVxuICAgICAgICApO1xuICAgICAgICAvLyBUaGVyZSBpcyBubyBvcmlnaW5hbCB0byB1cGRhdGUsIHNvIHNpbXBseSBhZGQgbmV3IG9uZVxuICAgICAgICBpZiAoIWN1cnJlbnREYXRhc2V0IHx8ICFuZXh0RGF0YXNldC5kYXRhIHx8IGFkZGVkRGF0YXNldHMuaW5jbHVkZXMoY3VycmVudERhdGFzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLm5leHREYXRhc2V0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGFkZGVkRGF0YXNldHMucHVzaChjdXJyZW50RGF0YXNldCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY3VycmVudERhdGFzZXQsIG5leHREYXRhc2V0KTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRhc2V0O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY2xvbmVEYXRhKGRhdGEpIHtcbiAgICBsZXQgZGF0YXNldElkS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB2b2lkIDAgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0RGF0YXNldElkS2V5O1xuICAgIGNvbnN0IG5leHREYXRhID0ge1xuICAgICAgICBsYWJlbHM6IFtdLFxuICAgICAgICBkYXRhc2V0czogW11cbiAgICB9O1xuICAgIHNldExhYmVscyhuZXh0RGF0YSwgZGF0YS5sYWJlbHMpO1xuICAgIHNldERhdGFzZXRzKG5leHREYXRhLCBkYXRhLmRhdGFzZXRzLCBkYXRhc2V0SWRLZXkpO1xuICAgIHJldHVybiBuZXh0RGF0YTtcbn1cbi8qKlxuICogR2V0IGRhdGFzZXQgZnJvbSBtb3VzZSBjbGljayBldmVudFxuICogQHBhcmFtIGNoYXJ0IC0gQ2hhcnQuanMgaW5zdGFuY2VcbiAqIEBwYXJhbSBldmVudCAtIE1vdXNlIGNsaWNrIGV2ZW50XG4gKiBAcmV0dXJucyBEYXRhc2V0XG4gKi8gZnVuY3Rpb24gZ2V0RGF0YXNldEF0RXZlbnQoY2hhcnQsIGV2ZW50KSB7XG4gICAgcmV0dXJuIGNoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZXZlbnQubmF0aXZlRXZlbnQsICdkYXRhc2V0Jywge1xuICAgICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICB9LCBmYWxzZSk7XG59XG4vKipcbiAqIEdldCBzaW5nbGUgZGF0YXNldCBlbGVtZW50IGZyb20gbW91c2UgY2xpY2sgZXZlbnRcbiAqIEBwYXJhbSBjaGFydCAtIENoYXJ0LmpzIGluc3RhbmNlXG4gKiBAcGFyYW0gZXZlbnQgLSBNb3VzZSBjbGljayBldmVudFxuICogQHJldHVybnMgRGF0YXNldFxuICovIGZ1bmN0aW9uIGdldEVsZW1lbnRBdEV2ZW50KGNoYXJ0LCBldmVudCkge1xuICAgIHJldHVybiBjaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGV2ZW50Lm5hdGl2ZUV2ZW50LCAnbmVhcmVzdCcsIHtcbiAgICAgICAgaW50ZXJzZWN0OiB0cnVlXG4gICAgfSwgZmFsc2UpO1xufVxuLyoqXG4gKiBHZXQgYWxsIGRhdGFzZXQgZWxlbWVudHMgZnJvbSBtb3VzZSBjbGljayBldmVudFxuICogQHBhcmFtIGNoYXJ0IC0gQ2hhcnQuanMgaW5zdGFuY2VcbiAqIEBwYXJhbSBldmVudCAtIE1vdXNlIGNsaWNrIGV2ZW50XG4gKiBAcmV0dXJucyBEYXRhc2V0XG4gKi8gZnVuY3Rpb24gZ2V0RWxlbWVudHNBdEV2ZW50KGNoYXJ0LCBldmVudCkge1xuICAgIHJldHVybiBjaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGV2ZW50Lm5hdGl2ZUV2ZW50LCAnaW5kZXgnLCB7XG4gICAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgIH0sIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gQ2hhcnRDb21wb25lbnQocGFyYW0sIHJlZikge1xuICAgIGxldCB7IGhlaWdodCA9MTUwICwgd2lkdGggPTMwMCAsIHJlZHJhdyA9ZmFsc2UgLCBkYXRhc2V0SWRLZXkgLCB0eXBlICwgZGF0YSAsIG9wdGlvbnMgLCBwbHVnaW5zID1bXSAsIGZhbGxiYWNrQ29udGVudCAsIC4uLnByb3BzIH0gPSBwYXJhbTtcbiAgICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3QgY2hhcnRSZWYgPSB1c2VSZWYoKTtcbiAgICBjb25zdCByZW5kZXJDaGFydCA9ICgpPT57XG4gICAgICAgIGlmICghY2FudmFzUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICAgICAgY2hhcnRSZWYuY3VycmVudCA9IG5ldyBDaGFydCQxKGNhbnZhc1JlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgZGF0YTogY2xvbmVEYXRhKGRhdGEsIGRhdGFzZXRJZEtleSksXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgcGx1Z2luc1xuICAgICAgICB9KTtcbiAgICAgICAgcmVmb3J3YXJkUmVmKHJlZiwgY2hhcnRSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgICBjb25zdCBkZXN0cm95Q2hhcnQgPSAoKT0+e1xuICAgICAgICByZWZvcndhcmRSZWYocmVmLCBudWxsKTtcbiAgICAgICAgaWYgKGNoYXJ0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNoYXJ0UmVmLmN1cnJlbnQuZGVzdHJveSgpO1xuICAgICAgICAgICAgY2hhcnRSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoIXJlZHJhdyAmJiBjaGFydFJlZi5jdXJyZW50ICYmIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHNldE9wdGlvbnMoY2hhcnRSZWYuY3VycmVudCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIHJlZHJhdyxcbiAgICAgICAgb3B0aW9uc1xuICAgIF0pO1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoIXJlZHJhdyAmJiBjaGFydFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBzZXRMYWJlbHMoY2hhcnRSZWYuY3VycmVudC5jb25maWcuZGF0YSwgZGF0YS5sYWJlbHMpO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICByZWRyYXcsXG4gICAgICAgIGRhdGEubGFiZWxzXG4gICAgXSk7XG4gICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGlmICghcmVkcmF3ICYmIGNoYXJ0UmVmLmN1cnJlbnQgJiYgZGF0YS5kYXRhc2V0cykge1xuICAgICAgICAgICAgc2V0RGF0YXNldHMoY2hhcnRSZWYuY3VycmVudC5jb25maWcuZGF0YSwgZGF0YS5kYXRhc2V0cywgZGF0YXNldElkS2V5KTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgcmVkcmF3LFxuICAgICAgICBkYXRhLmRhdGFzZXRzXG4gICAgXSk7XG4gICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGlmICghY2hhcnRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgICBpZiAocmVkcmF3KSB7XG4gICAgICAgICAgICBkZXN0cm95Q2hhcnQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVuZGVyQ2hhcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhcnRSZWYuY3VycmVudC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgcmVkcmF3LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBkYXRhLmxhYmVscyxcbiAgICAgICAgZGF0YS5kYXRhc2V0c1xuICAgIF0pO1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICByZW5kZXJDaGFydCgpO1xuICAgICAgICByZXR1cm4gKCk9PmRlc3Ryb3lDaGFydCgpXG4gICAgICAgIDtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuKC8qI19fUFVSRV9fKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgcmVmOiBjYW52YXNSZWYsXG4gICAgICAgIHJvbGU6IFwiaW1nXCIsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICB3aWR0aDogd2lkdGhcbiAgICB9LCBwcm9wcyksIGZhbGxiYWNrQ29udGVudCkpO1xufVxuY29uc3QgQ2hhcnQgPSAvKiNfX1BVUkVfXyovIGZvcndhcmRSZWYoQ2hhcnRDb21wb25lbnQpO1xuXG5mdW5jdGlvbiBjcmVhdGVUeXBlZENoYXJ0KHR5cGUsIHJlZ2lzdGVyYWJsZXMpIHtcbiAgICBDaGFydCQxLnJlZ2lzdGVyKHJlZ2lzdGVyYWJsZXMpO1xuICAgIHJldHVybigvKiNfX1BVUkVfXyovIGZvcndhcmRSZWYoKHByb3BzLCByZWYpPT4vKiNfX1BVUkVfXyovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hhcnQsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgICByZWY6IHJlZixcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSkpXG4gICAgKSk7XG59XG5jb25zdCBMaW5lID0gLyogI19fUFVSRV9fICovIGNyZWF0ZVR5cGVkQ2hhcnQoJ2xpbmUnLCBMaW5lQ29udHJvbGxlcik7XG5jb25zdCBCYXIgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydCgnYmFyJywgQmFyQ29udHJvbGxlcik7XG5jb25zdCBSYWRhciA9IC8qICNfX1BVUkVfXyAqLyBjcmVhdGVUeXBlZENoYXJ0KCdyYWRhcicsIFJhZGFyQ29udHJvbGxlcik7XG5jb25zdCBEb3VnaG51dCA9IC8qICNfX1BVUkVfXyAqLyBjcmVhdGVUeXBlZENoYXJ0KCdkb3VnaG51dCcsIERvdWdobnV0Q29udHJvbGxlcik7XG5jb25zdCBQb2xhckFyZWEgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydCgncG9sYXJBcmVhJywgUG9sYXJBcmVhQ29udHJvbGxlcik7XG5jb25zdCBCdWJibGUgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydCgnYnViYmxlJywgQnViYmxlQ29udHJvbGxlcik7XG5jb25zdCBQaWUgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydCgncGllJywgUGllQ29udHJvbGxlcik7XG5jb25zdCBTY2F0dGVyID0gLyogI19fUFVSRV9fICovIGNyZWF0ZVR5cGVkQ2hhcnQoJ3NjYXR0ZXInLCBTY2F0dGVyQ29udHJvbGxlcik7XG5cbmV4cG9ydCB7IEJhciwgQnViYmxlLCBDaGFydCwgRG91Z2hudXQsIExpbmUsIFBpZSwgUG9sYXJBcmVhLCBSYWRhciwgU2NhdHRlciwgZ2V0RGF0YXNldEF0RXZlbnQsIGdldEVsZW1lbnRBdEV2ZW50LCBnZXRFbGVtZW50c0F0RXZlbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==