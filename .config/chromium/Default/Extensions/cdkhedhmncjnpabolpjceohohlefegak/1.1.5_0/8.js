(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{249:function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i}));var o=function(e,t,n,o){return new(n||(n=Promise))((function(a,c){function r(e){try{s(o.next(e))}catch(e){c(e)}}function i(e){try{s(o.throw(e))}catch(e){c(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,i)}s((o=o.apply(e,t||[])).next())}))};const a=()=>o(void 0,void 0,void 0,(function*(){const[t]=yield e.tabs.query({active:!0,currentWindow:!0});return t})),c=(t,n)=>o(void 0,void 0,void 0,(function*(){const{id:o,url:c}=yield a();return yield e.runtime.sendMessage(Object.assign({type:t,tabId:o,tabUrl:c},null!=n?n:{}))})),r=(e,t)=>o(void 0,void 0,void 0,(function*(){return yield c("savePopupToggle",{origin:e,action:t})})),i=e=>o(void 0,void 0,void 0,(function*(){return yield c("revertDomainControl",{origin:e})}))}).call(this,n(18))},270:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));n(22),n(27);var o=n(67),a=n(0),c=n.n(a),r=n(1),i=n(249),s=n(6);var l={name:"lviczn-titleCss",styles:"color:#6573ff;font-family:'Inter',sans-serif;font-size:16px;font-weight:600;line-height:1;padding:12px 8px;;label:titleCss;"},b={name:"1n2qqnt-optionsLabelCss",styles:"white-space:pre-wrap;width:calc(100% / 3);;label:optionsLabelCss;"},d={name:"m0hm40-TrackerSettings",styles:";label:TrackerSettings;"},p=e=>{var{trackers:t,title:n,height:a,labelBgColor:c,labelFontSize:i,lColWidthPercent:p,rColWidthPercent:u,alternateRowColors:f,cssOverrides:g,onActionChange:k,onRevert:h,onConfirmSiteBreak:v}=e,j=Object(r.b)("border-bottom:1px solid #dee0f7;font-family:'Inter',sans-serif;",a&&"height: ".concat(a,"px; overflow-y: auto;")," &:last-of-type{border-bottom:none;};label:trackerSettingsCss;"),w=l,m=Object(r.b)("background:",c||"transparent",";align-items:center;display:flex;font-size:",i||"14px",";font-weight:500;margin-bottom:6px;padding:8px;position:sticky;z-index:1;top:0;border-radius:4px;background:#f2f3ff;;label:labelRowCss;"),y=Object(r.b)("min-width:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:",p,"%;;label:domainColCss;"),x=Object(r.b)("align-items:center;display:flex;justify-content:space-around;text-align:center;width:",u,"%;;label:optionsColCss;"),C=b;return Object(r.c)("div",{css:Object(o.a)([j,g||d],";label:TrackerSettings;")},n&&Object(r.c)("div",{css:w},n),Object(r.c)("div",{css:m},Object(r.c)("div",{css:y},Object(s.b)("popupManageTrackersDomainLabel")),Object(r.c)("div",{css:x},Object(r.c)("div",{css:C},Object(s.b)("popupManageTrackersBlockAllLabel")),Object(r.c)("div",{css:C},Object(s.b)("popupManageTrackersBlockCookiesLabel")),Object(r.c)("div",{css:C},Object(s.b)("popupManageTrackersAllowAllLabel")))),Object.entries(t).filter(e=>{var[t,n]=e;return"noaction"!==n.action}).map((e,t)=>{var[n,o]=e;return Object(r.c)(O,{host:n,info:o,index:f?t:void 0,lColWidthPercent:p,rColWidthPercent:u,onActionChange:k,onRevert:h,onConfirmSiteBreak:v})}))},u={name:"bc0p8h-optionSelectCss",styles:"appearance:none;background:#fbfbfd;border:1px solid #ced1dd;border-radius:50%;height:16px;margin:0;padding:0;width:16px;&:focus{outline:none;};label:optionSelectCss;"},f={name:"1f5fkwd-TrackerRow",styles:"display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;;label:TrackerRow;"},g={name:"g6ysrs-TrackerRow",styles:"display:flex;position:relative;;label:TrackerRow;"},k={name:"g6ysrs-TrackerRow",styles:"display:flex;position:relative;;label:TrackerRow;"},h={name:"g6ysrs-TrackerRow",styles:"display:flex;position:relative;;label:TrackerRow;"},v={name:"alc60x-TrackerRow",styles:"margin-right:auto;width:60%;;label:TrackerRow;"},j={name:"1j35ba-TrackerRow",styles:"background:transparent;border:0;color:#ffffff;cursor:pointer;font-size:14px;font-weight:600;margin-right:24px;padding:0;text-decoration:underline;&:focus{outline:none;};label:TrackerRow;"},w={name:"6nrdgt-TrackerRow",styles:"background:transparent;border:0;color:#ffffff;cursor:pointer;font-size:14px;font-weight:600;padding:0;text-decoration:underline;&:focus{outline:none;};label:TrackerRow;"},O=e=>{var t,{host:n,info:l,index:b,lColWidthPercent:d,rColWidthPercent:p,onActionChange:O,onRevert:m,onConfirmSiteBreak:y}=e,[x,C]=Object(a.useState)(!1),T=u,R=Object(r.b)("align-items:center;border-radius:4px;display:flex;font-size:14px;margin:1px 0;padding:10px 8px;input[type='radio']{",T,";};label:trackerRowCss;"),M=Object(r.b)("display:flex;justify-content:space-around;text-align:center;width:",p,"%;;label:optionsColCss;"),B=Object(r.b)("align-items:center;display:flex;min-width:0;width:",d,"%;;label:domainColCss;"),P=Object(r.b)("background:",x||"user_block"===l.action&&l.cookieBlocklisted?"#EB5757":"#6573ff",";border-radius:50%;height:16px;left:0;position:absolute;top:0;width:16px;;label:optionSelectFillCss;"),S=Object(r.b)("background:","user_block"===l.action&&l.cookieBlocklisted?"#EB5757":"#6573ff",";border:none;cursor:pointer;flex-shrink:0;height:16px;margin:0 8px 0 0;mask:url('revert-arrow.svg');padding:0;width:16px;&:focus{outline:none;};label:revertBtnCss;"),F=["user_block","user_allow","user_cookieblock"].includes(l.action),W=e=>{var t=e.target.value;x||(l.cookieBlocklisted&&"block"===t?C(!0):O(n,t))},z=["block","user_block"].includes(l.action)||x,_=["cookieblock","user_cookieblock"].includes(l.action)&&!x,A=["allow","user_allow","dnt"].includes(l.action)&&!x;return Object(r.c)(c.a.Fragment,null,Object(r.c)("div",{css:Object(o.a)([R,Object(r.b)("background:",(t=F,t?"user_block"===l.action&&l.cookieBlocklisted?"#FFEDEE":"#F0F1FF":void 0!==b&&b%2==0?"#fbfbfd":"transparent"),";;label:TrackerRow;")],";label:TrackerRow;")},Object(r.c)("div",{css:B},F&&Object(r.c)("button",{type:"submit",css:S,"aria-label":"revert",onClick:()=>{Object(i.a)(n).then(()=>{m()})}}),Object(r.c)("span",{css:f},n)),Object(r.c)("div",{css:M},Object(r.c)("label",{htmlFor:"".concat(n),css:g},Object(r.c)("input",{type:"radio",checked:z,name:n,value:"block",onChange:W,css:T}),z&&Object(r.c)("span",{css:P})),Object(r.c)("label",{htmlFor:"".concat(n),css:k},Object(r.c)("input",{type:"radio",checked:_,name:n,value:"cookieblock",onChange:W,css:T}),_&&Object(r.c)("span",{css:P})),Object(r.c)("label",{htmlFor:"".concat(n),css:h},Object(r.c)("input",{type:"radio",checked:A&&!x,name:n,value:"allow",onChange:W,css:T}),A&&!x&&Object(r.c)("span",{css:P})))),Object(r.c)("div",{css:Object(o.a)([R,Object(r.b)("background:#eb5757;color:#ffffff;font-weight:600;",!x&&"display: none",";;label:TrackerRow;")],";label:TrackerRow;")},Object(r.c)("div",{css:v},Object(s.b)("popupManageTrackersWarning")),Object(r.c)("button",{type:"submit",onClick:()=>{C(!1),Object(i.b)(n,"block").then(()=>{y()})},css:j},Object(s.b)("popupManageTrackersWarningProceed")),Object(r.c)("button",{type:"submit",onClick:()=>{C(!1)},css:w},Object(s.b)("popupManageTrackersWarningCancel"))))}},413:function(e,t,n){"use strict";n.r(t),function(e){n(22),n(27),n(0);var o=n(1),a=n(44),c=n(249),r=n(385),i=n.n(r),s=n(386),l=n.n(s),b=n(6),d=n(71),p=n(270);var u={name:"ysslze-titleCss",styles:"border-bottom:1px solid #ebecf7;font-weight:600;font-size:22px;padding:16px;;label:titleCss;"},f={name:"gc75tx-ManageTrackers",styles:"padding:0 8px 16px;;label:ManageTrackers;"},g={name:"gc75tx-ManageTrackers",styles:"padding:0 8px 16px;;label:ManageTrackers;"};t.default=()=>{var{trackers:t}=Object(a.c)(d.d),n={};Object.entries(t).forEach(e=>{var[t,o]=e;"major"!==o.type||["allow","dnt"].includes(o.action)||(n[t]=o)});var r={};Object.entries(t).forEach(e=>{var[t,n]=e;"minor"!==n.type||["allow","dnt"].includes(n.action)||(r[t]=n)});var s=u;return Object(o.c)("div",{css:Object(o.b)(l.a,";label:ManageTrackers;")},Object(o.c)(i.a,{style:{height:"444px"}},Object(o.c)("div",{css:s},Object(b.b)("popupManageTrackersTitle")),Object.entries(n).length>0&&Object(o.c)(p.a,{title:Object(b.b)("popupManageTrackersMajorTitle"),labelBgColor:"#fbfbfd",labelFontSize:"11px",trackers:n,lColWidthPercent:46.34,rColWidthPercent:56.35,cssOverrides:f,onActionChange:(t,n)=>{Object(c.b)(t,n).then(()=>{e.runtime.sendMessage({message:"getPrivacyData"})})},onRevert:()=>{e.tabs.reload().then(()=>{window.close()})},onConfirmSiteBreak:()=>{e.runtime.sendMessage({message:"getPrivacyData"})}}),Object.entries(r).length>0&&Object(o.c)(p.a,{title:Object(b.b)("popupManageTrackersMinorTitle"),labelBgColor:"#fbfbfd",labelFontSize:"11px",trackers:r,lColWidthPercent:46.34,rColWidthPercent:56.35,cssOverrides:g,alternateRowColors:!0,onActionChange:(t,n)=>{Object(c.b)(t,n).then(()=>{e.runtime.sendMessage({message:"getPrivacyData"})})},onRevert:()=>{e.tabs.reload().then(()=>{window.close()})},onConfirmSiteBreak:()=>{e.runtime.sendMessage({message:"getPrivacyData"})}})))}}.call(this,n(18))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,