(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{384:function(e,t,s){"use strict";s.d(t,"a",(function(){return r}));var r=e=>{var{count:t,kStart:s=1e3,mStart:r=1e6}=e;return t>=r?"".concat(Math.floor(t/1e6),"M"):t>=s?"".concat(Math.floor(t/1e3),"k"):t}},407:function(e,t,s){var r=s(0);function i(e){return r.createElement("svg",e,[r.createElement("circle",{cx:"12",cy:"12",r:"12",fill:"#29DDCC",key:0}),r.createElement("g",{clipPath:"url(#clip0)",key:1},r.createElement("path",{d:"M17.25 9.0057L15.0363 7.5L10.8871 12.9183L8.34677 11.1844L6.75 13.2719L11.4919 16.5V16.4886L11.504 16.5L17.25 9.0057Z",fill:"#202945"})),r.createElement("defs",{key:2},r.createElement("clipPath",{id:"clip0"},r.createElement("rect",{width:"10.5",height:"9",fill:"white",transform:"translate(6.75 7.5)"})))])}i.defaultProps={width:"24",height:"24",viewBox:"0 0 24 24",fill:"none"},e.exports=i,i.default=i},414:function(e,t,s){"use strict";s.r(t);s(206),s(0);var r=s(1),i=s(385),a=s.n(i),c=s(386),n=s.n(c),o=s(44),l=s(6),p=s(71),b=s(384),d=s(407),u=s.n(d);var m={name:"89in1o-totalDisplayCss",styles:"align-items:center;background:#ffffff;border:1px solid #ebecf7;border-radius:4px;display:flex;flex-direction:column;height:70px;justify-content:space-between;line-height:1;margin-bottom:12px;padding:24px 23px;position:relative;text-align:center;width:112px;;label:totalDisplayCss;"},x={name:"41pl3-countCss",styles:"font-size:46px;font-weight:600;;label:countCss;"},f={name:"vi1uy2-subtitleCss",styles:"font-size:14px;font-weight:600;;label:subtitleCss;"},g={name:"1pgct0c-checkmarkCss",styles:"align-items:center;height:24px;width:24px;position:absolute;bottom:-12px;;label:checkmarkCss;"},y=e=>{var{subtitle:t,count:s}=e;return Object(r.c)("div",{css:m},Object(r.c)("div",{css:x},Object(b.a)({count:s,kStart:1e4})),Object(r.c)("div",{css:f},t),Object(r.c)(u.a,{css:g}))};var h={name:"1wwq802-countsSummaryCss",styles:"padding:16px 16px 0;;label:countsSummaryCss;"},j={name:"1dujgs2-innerContainerCss",styles:"border:1px solid #ebecf7;border-radius:4px;background:#fbfbfd;padding:16px 7px;;label:innerContainerCss;"},C={name:"1owxzah-titleCss",styles:"color:#202945;font-weight:600;font-size:14px;line-height:16px;margin-bottom:12px;;label:titleCss;"},O={name:"1e5zfsx-totalCountsCss",styles:"background:#fbfbfd;border-radius:4px;display:flex;height:132px;justify-content:space-between;;label:totalCountsCss;"},v=()=>{var e=Object(o.c)(p.a),t=e.blockedMajorTrackerCounts+e.blockedMinorTrackerCounts;return Object(r.c)("div",{css:h},Object(r.c)("div",{css:j},Object(r.c)("div",{css:C},Object(l.b)("popupReportBlockedTitle")),Object(r.c)("div",{css:O},Object(r.c)(y,{subtitle:Object(l.b)("popupReportBlockedTrackersLabel"),count:t}),Object(r.c)(y,{subtitle:Object(l.b)("popupReportBlockedCookiesLabel"),count:e.blockedCookiesCounts}))))},k=s(201),w=s(50),S=(s(22),s(408),s(387),s(27),s(412)),z=s(388);z.d.register(z.a);var T={name:"k8zgzn-scoreSummaryCss",styles:"padding:16px 16px 0;;label:scoreSummaryCss;"},B={name:"1dujgs2-innerContainerCss",styles:"border:1px solid #ebecf7;border-radius:4px;background:#fbfbfd;padding:16px 7px;;label:innerContainerCss;"},R={name:"1owxzah-titleCss",styles:"color:#202945;font-weight:600;font-size:14px;line-height:16px;margin-bottom:12px;;label:titleCss;"},L={name:"feuagj-descriptionCss",styles:"color:#7f869f;font-size:14px;line-height:18px;margin-bottom:16px;;label:descriptionCss;"},D={name:"c0jn3c-chartContainerCss",styles:"display:flex;;label:chartContainerCss;"},M={name:"29vciz-chartLegendCss",styles:"display:flex;flex-direction:column;font-size:14px;justify-content:space-evenly;margin-left:12px;;label:chartLegendCss;"},E={5:"#29DDCC",4:"#A4D411",3:"#FBC917",2:"#FF9839",1:"#EB5757"},F={name:"1isxh66-ScoreSummary",styles:"align-items:center;display:flex;line-height:1;;label:ScoreSummary;"},P=()=>{var e=Object(o.c)(p.a),{scoreDistribution:t}=e,s=Object.values(t).reduce((e,t)=>e+t,0),i=((e,t)=>Object.entries(e).filter(e=>{var[t,s]=e;return s>0}).map(e=>{var[s,r]=e,i=0!==t?r/t*100:0;return{score:s,val:Math.round(i)}}).sort((e,t)=>parseInt(t.score,10)-parseInt(e.score,10)))(t,s),a=((e,t)=>e.map(e=>{var{score:s,val:r}=e;return r>0?t[s]:""}).filter(e=>e))(i,E),c={maintainAspectRatio:!1,responsive:!1,datasets:[{data:i.map(e=>{var{val:t}=e;return t}),backgroundColor:a,hoverBackgroundColor:a}]},n=Object.entries(t).map(e=>e).sort((e,t)=>parseInt(t[0],10)-parseInt(e[0],10));return Object(r.c)("div",{css:T},Object(r.c)("div",{css:B},Object(r.c)("div",{css:R},Object(l.b)("popupReportScoreTitle")),Object(r.c)("div",{css:L},Object(l.b)("popupReportScoreDescription")),Object(r.c)("div",{css:D},Object(r.c)("div",{style:{height:"190px",width:"190px"}},Object(r.c)(S.a,{data:c,options:{legend:{display:!1},elements:{arc:{borderWidth:0}},tooltips:{enabled:!1}}})),Object(r.c)("div",{css:M},n.map(e=>{var[t,i]=e,a=0!==s?(i/s*100).toFixed():0;return Object(r.c)("div",{css:F},Object(r.c)("span",{css:Object(r.b)("background:",E[t],";border-radius:50%;height:14px;margin-right:8px;width:14px;;label:ScoreSummary;")}),t," : ",Object(r.c)("b",null,"".concat(a,"%")))})))))};var I={name:"1vr604d-typesSummaryCss",styles:"padding:16px 16px 0;;label:typesSummaryCss;"},q={name:"1dujgs2-innerContainerCss",styles:"border:1px solid #ebecf7;border-radius:4px;background:#fbfbfd;padding:16px 7px;;label:innerContainerCss;"},A={name:"1owxzah-titleCss",styles:"color:#202945;font-weight:600;font-size:14px;line-height:16px;margin-bottom:12px;;label:titleCss;"},J={name:"1q3lj7d-descriptionCss",styles:"color:#7f869f;font-size:14px;line-height:18px;margin-bottom:19px;;label:descriptionCss;"},N={name:"bga08y-trackerBarCss",styles:"border-radius:8px;height:40px;margin-bottom:20px;overflow:hidden;position:relative;width:100%;;label:trackerBarCss;"},V={name:"1v685qj-TypesSummary",styles:"display:flex;font-size:13.5px;justify-content:space-between;;label:TypesSummary;"},W={name:"pt96dn-TypesSummary",styles:"display:flex;align-items:center;;label:TypesSummary;"},Z={name:"wlyweg-TypesSummary",styles:"background:#6573ff;border-radius:50%;display:block;height:14px;margin-right:4px;width:14px;;label:TypesSummary;"},G={name:"pt96dn-TypesSummary",styles:"display:flex;align-items:center;;label:TypesSummary;"},H={name:"i3z6ix-TypesSummary",styles:"background:#374677;border-radius:50%;display:block;height:14px;margin-right:4px;width:14px;;label:TypesSummary;"},K=()=>{var e=Object(o.c)(p.a),{blockedMajorTrackerCounts:t,blockedMinorTrackerCounts:s}=e,i=t+s,a=0!==i?(t/i*100).toFixed():0,c=0!==i?(s/i*100).toFixed():0,n=Object(r.b)("background:#6573ff;border-right:1px solid #fbfbfd;height:100%;left:0;margin-right:auto;position:absolute;top:0;width:",a,"%;z-index:1;;label:majorBarCss;"),b=Object(r.b)("background:#374677;height:100%;margin-left:auto;position:absolute;right:0;top:0;width:",c,"%;;label:minorBarCss;");return Object(r.c)("div",{css:I},Object(r.c)("div",{css:q},Object(r.c)("div",{css:A},Object(l.b)("popupReportBreakdownTitle")),Object(r.c)("div",{css:J},Object(l.b)("popupReportBreakdownDescription")),Object(r.c)("div",{css:N},Object(r.c)("div",{css:n}),Object(r.c)("div",{css:b})),Object(r.c)("div",{css:V},Object(r.c)("div",{css:W},Object(r.c)("span",{css:Z}),Object(l.b)("popupReportBreakdownMajorLabel")," : ",Object(r.c)("b",null,a,"%")),Object(r.c)("div",{css:G},Object(r.c)("span",{css:H}),Object(l.b)("popupReportBreakdownMinorLabel")," : ",Object(r.c)("b",null,c,"%")))))};var Q={name:"ysslze-titleCss",styles:"border-bottom:1px solid #ebecf7;font-weight:600;font-size:22px;padding:16px;;label:titleCss;"},U={name:"129x3hp-resetBtnCss",styles:"background:#ffffff;border:1px solid #6573ff;border-radius:4px;color:#6573ff;cursor:pointer;font-size:14px;font-weight:500;height:38px;margin-top:auto;transition:0.4s;width:100%;&:focus{outline:none;}&:disabled{color:lightgray;cursor:initial;border:1px solid lightgray;};label:resetBtnCss;"},X={name:"14zdrm9-disclaimerCss",styles:"color:#7f869f;font-size:14px;line-height:18px;padding:16px 42px 24px;text-align:center;;label:disclaimerCss;"},Y={name:"16fzzrj-PrivacyReport",styles:"padding:16px 16px 0;;label:PrivacyReport;"};t.default=()=>{var e=Object(o.c)(p.a),t=Object.entries(e).toString()===Object.entries(k.b).toString();return Object(r.c)("div",{className:"privacy-report",css:Object(r.b)(n.a,";label:PrivacyReport;")},Object(r.c)(a.a,{style:{height:"420px"}},Object(r.c)("div",{css:Q},Object(l.b)("popupReportTitle")),Object(r.c)(P,null),Object(r.c)(v,null),Object(r.c)(K,null),Object(r.c)("div",{css:Y},Object(r.c)("button",{css:U,type:"submit",onClick:()=>{Object(w.d)()},disabled:t},Object(l.b)("popupReportResetBtn"))),Object(r.c)("div",{css:X},Object(l.b)("popupReportDisclaimer"))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,